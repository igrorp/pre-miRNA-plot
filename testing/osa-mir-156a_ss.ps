%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.11
%%CreationDate: Sat Jun 22 16:58:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGAGGGUGACAGAAGAGAGUGAGCACACGUGGUUGUUUCCUUGCAUAAAUGAUGCCUAUGCUUGGAGCUACGCGUGCUCACUUCUCUCUCUGUCACCUCC\
) def
/coor [
[89.22720337 348.73455811]
[89.22720337 333.73455811]
[89.22720337 318.73455811]
[89.22720337 303.73455811]
[89.22720337 288.73455811]
[86.02295685 281.92587280]
[89.46773529 273.26986694]
[89.93423462 258.27713013]
[90.40073395 243.28439331]
[90.86722565 228.29164124]
[91.33372498 213.29890442]
[91.80022430 198.30616760]
[92.26672363 183.31341553]
[92.50000000 168.31523132]
[92.50000000 153.31523132]
[92.50000000 138.31523132]
[92.50000000 123.31523132]
[92.50000000 108.31523132]
[92.26672363 93.31704712]
[91.80022430 78.32430267]
[91.33372498 63.33155441]
[90.86722565 48.33880997]
[90.40073395 33.34606552]
[89.93423462 18.35332298]
[89.46773529 3.36057878]
[89.00123596 -11.63216591]
[80.83849335 -25.18503380]
[88.17623901 -38.14677811]
[87.70973969 -53.13952255]
[87.24324036 -68.13226318]
[86.77674103 -83.12500763]
[86.31024933 -98.11775208]
[85.84375000 -113.11049652]
[83.16567230 -117.04222107]
[82.10835266 -121.20685577]
[82.52882385 -125.02759552]
[84.09965515 -128.04446411]
[86.36824799 -129.96743774]
[87.76593781 -144.90217590]
[89.16362762 -159.83691406]
[79.35385132 -171.93675232]
[80.98405457 -187.06278992]
[92.57985687 -196.34034729]
[93.97753906 -211.27508545]
[95.37522888 -226.20982361]
[96.77291870 -241.14456177]
[98.17060852 -256.07931519]
[85.96278381 -265.51184082]
[80.81405640 -280.05465698]
[84.36735535 -295.06726074]
[95.48884583 -305.75912476]
[110.62969971 -308.71853638]
[124.95851898 -303.00115967]
[133.90304565 -290.43136597]
[134.60908508 -275.02017212]
[126.85137177 -261.68521118]
[113.10534668 -254.68161011]
[111.70766449 -239.74687195]
[110.30997467 -224.81213379]
[108.91228485 -209.87739563]
[107.51459503 -194.94265747]
[117.18760681 -183.67462158]
[115.98290253 -168.50875854]
[104.09836578 -158.43922424]
[102.70067596 -143.50448608]
[101.30298615 -128.56974792]
[100.83649445 -113.57699585]
[101.30298615 -98.58425140]
[101.76948547 -83.59150696]
[102.23598480 -68.59876251]
[102.70248413 -53.60602188]
[103.16898346 -38.61327744]
[111.29835510 -26.13278961]
[103.99398041 -12.09866333]
[104.46047974 2.89408088]
[104.92697906 17.88682556]
[105.39347839 32.87957001]
[105.85997009 47.87231445]
[106.32646942 62.86505890]
[106.79296875 77.85780334]
[107.25946808 92.85054779]
[110.68875122 100.31613922]
[107.50000000 108.31523132]
[107.50000000 123.31523132]
[107.50000000 138.31523132]
[107.50000000 153.31523132]
[107.50000000 168.31523132]
[110.67391205 177.07415771]
[107.25946808 183.77990723]
[106.79296875 198.77265930]
[106.32646942 213.76539612]
[105.85997009 228.75814819]
[105.39347839 243.75088501]
[104.92697906 258.74362183]
[104.46047974 273.73638916]
[104.22720337 288.73455811]
[104.22720337 303.73455811]
[104.22720337 318.73455811]
[104.22720337 333.73455811]
[104.22720337 348.73455811]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 67]
[38 66]
[39 65]
[40 64]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
