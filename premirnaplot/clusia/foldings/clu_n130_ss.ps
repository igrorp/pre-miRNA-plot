%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCAGUCCCGAACCCGUCGGCUGUCGGCGGACUGCUCGAGCUGCUCCCGCGGCGAGAGCGGGUCGCCGCGUGCCGGCCGGGGGACGGACUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[88.88761902 420.65664673]
[94.93395996 404.81750488]
[94.93395996 389.81750488]
[94.93395996 374.81750488]
[94.93395996 359.81750488]
[94.93395996 344.81750488]
[94.93395996 329.81750488]
[94.93395996 314.81750488]
[94.93395996 299.81750488]
[94.93395996 284.81750488]
[81.96663666 277.48852539]
[74.35823822 264.56689453]
[74.23840332 249.47213745]
[81.73944855 236.25732422]
[94.93395996 228.52090454]
[94.93395996 213.52090454]
[94.93395996 198.52090454]
[94.93395996 183.52090454]
[94.69354248 168.52284241]
[94.21276855 153.53054810]
[93.73199463 138.53825378]
[93.25122070 123.54595947]
[92.77044678 108.55366516]
[92.04943848 93.57099915]
[91.08838654 78.60182190]
[87.35653687 70.05397797]
[90.34426880 63.13888168]
[89.86349487 48.14658737]
[89.38272095 33.15429306]
[88.90194702 18.16200066]
[88.42117310 3.16970778]
[77.17538452 -7.60850954]
[76.90138245 -22.81967545]
[87.24606323 -33.47439575]
[86.76528931 -48.46669006]
[86.28451538 -63.45898056]
[85.80374908 -78.45127106]
[85.32297516 -93.44356537]
[84.84220123 -108.43585968]
[73.59640503 -119.21408081]
[73.32240295 -134.42524719]
[83.66709137 -145.07997131]
[83.18631744 -160.07225037]
[82.70554352 -175.06454468]
[82.22476959 -190.05683899]
[81.74399567 -205.04913330]
[72.63846588 -218.68809509]
[80.13903046 -233.27143860]
[96.52975464 -233.79705811]
[104.94926453 -219.72424316]
[96.73628998 -205.52990723]
[97.21706390 -190.53761292]
[97.69783783 -175.54531860]
[98.17861176 -160.55302429]
[98.65938568 -145.56072998]
[109.66546631 -135.59069824]
[110.36661530 -120.39322662]
[99.83448792 -108.91663361]
[100.31526184 -93.92433929]
[100.79603577 -78.93204498]
[101.27680969 -63.93975449]
[101.75758362 -48.94746017]
[102.23835754 -33.95516968]
[113.24444580 -23.98512650]
[113.94558716 -8.78765869]
[103.41346741 2.68893409]
[103.89424133 17.68122673]
[104.37501526 32.67351913]
[104.85578918 47.66581345]
[105.33656311 62.65810776]
[106.05756378 77.64076996]
[107.01861572 92.60994720]
[110.69568634 99.96690369]
[107.76273346 108.07289124]
[108.24350739 123.06518555]
[108.72428131 138.05747986]
[109.20505524 153.04977417]
[109.68582916 168.04206848]
[113.14178467 176.70512390]
[109.93395996 183.52090454]
[109.93395996 198.52090454]
[109.93395996 213.52090454]
[109.93395996 228.52090454]
[123.12846375 236.25732422]
[130.62951660 249.47213745]
[130.50967407 264.56689453]
[122.90127563 277.48852539]
[109.93395996 284.81750488]
[109.93395996 299.81750488]
[109.93395996 314.81750488]
[109.93395996 329.81750488]
[109.93395996 344.81750488]
[109.93395996 359.81750488]
[109.93395996 374.81750488]
[109.93395996 389.81750488]
[109.93395996 404.81750488]
[115.98029327 420.65664673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[15 83]
[16 82]
[17 81]
[18 80]
[19 78]
[20 77]
[21 76]
[22 75]
[23 74]
[24 72]
[25 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
