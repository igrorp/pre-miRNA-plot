%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUUUGGGAGGAGAUCAGCAAGUCUGGCGUUAUGUACAUAGUUCUCUAUAUGUUAAUGACAUUAAGGUCCAACUUUCUUAUCUUCUUCCUGGUAA\
) } def
/len { sequence length } bind def

/coor [
[79.88245392 380.21307373]
[85.92879486 364.37393188]
[85.92879486 349.37393188]
[85.92879486 334.37393188]
[85.92879486 319.37393188]
[77.54329681 310.49362183]
[77.53244781 297.87652588]
[86.45472717 288.39358521]
[86.93550110 273.40130615]
[87.41627502 258.40899658]
[87.89704895 243.41671753]
[88.37782288 228.42442322]
[88.85859680 213.43212891]
[89.33937073 198.43983459]
[89.82014465 183.44754028]
[90.30091858 168.45524597]
[90.78169250 153.46295166]
[83.45629883 140.49423218]
[91.63193512 126.94913483]
[92.11270905 111.95684052]
[85.68341827 99.54089355]
[92.89499664 87.56238556]
[93.37577057 72.57009125]
[93.85654449 57.57779694]
[94.33731842 42.58550262]
[83.80519104 31.10891151]
[84.50634003 15.91144276]
[95.51242065 5.94140148]
[95.99319458 -9.05089188]
[96.47396851 -24.04318428]
[95.51291656 -39.01236725]
[93.11891937 -53.82009125]
[90.72491455 -68.62782288]
[88.33091736 -83.43554688]
[85.93692017 -98.24327087]
[73.40517426 -107.49491882]
[71.18825531 -122.54616547]
[80.08551788 -134.43626404]
[77.69152069 -149.24398804]
[75.29752350 -164.05171204]
[72.90352631 -178.85943604]
[70.50952911 -193.66716003]
[56.60096741 -200.54696655]
[49.42238617 -214.30369568]
[51.73408890 -229.64761353]
[62.64717865 -240.67864990]
[77.96535492 -243.15518188]
[91.79846191 -236.12490845]
[98.82738495 -222.29110718]
[96.34936523 -206.97317505]
[85.31725311 -196.06115723]
[87.71125031 -181.25343323]
[90.10524750 -166.44570923]
[92.49924469 -151.63798523]
[94.89324951 -136.83026123]
[107.08390808 -128.34950256]
[109.72270966 -113.36646271]
[100.74464417 -100.63726807]
[103.13864899 -85.82954407]
[105.53264618 -71.02182007]
[107.92664337 -56.21409225]
[110.32064056 -41.40636444]
[120.87300873 -52.06692886]
[135.86840820 -52.43828201]
[146.93551636 -42.31311035]
[147.89601135 -27.34389305]
[138.21368408 -15.88734245]
[123.29379272 -14.33919048]
[111.46626282 -23.56241226]
[110.98548889 -8.57011795]
[110.50471497 6.42217493]
[120.84940338 17.07689476]
[120.57540131 32.28805923]
[109.32961273 43.06627655]
[108.84883881 58.05857086]
[108.36806488 73.05086517]
[107.88729095 88.04315948]
[114.31658173 100.45910645]
[107.10500336 112.43761444]
[106.62422943 127.42990875]
[113.91523743 141.47097778]
[105.77398682 153.94372559]
[105.29321289 168.93601990]
[104.81243896 183.92831421]
[104.33166504 198.92060852]
[103.85089111 213.91290283]
[103.37011719 228.90519714]
[102.88934326 243.89747620]
[102.40856934 258.88977051]
[101.92779541 273.88208008]
[101.44702148 288.87435913]
[110.53901672 304.78671265]
[100.92879486 319.37393188]
[100.92879486 334.37393188]
[100.92879486 349.37393188]
[100.92879486 364.37393188]
[106.97512817 380.21307373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[19 80]
[20 79]
[22 77]
[23 76]
[24 75]
[25 74]
[28 71]
[29 70]
[30 69]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
