%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGAAUGUUGUCUGGCUCGAGGACACCUUCUUAUCUCCUUCUCAAGGUGGUACAUAUAUAGUCAUCGGACCAGGCUUCAUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 416.23300171]
[92.50000000 400.39389038]
[92.50000000 385.39389038]
[92.50000000 370.39389038]
[92.50000000 355.39389038]
[92.50000000 340.39389038]
[92.50000000 325.39389038]
[92.50000000 310.39389038]
[92.50000000 295.39389038]
[81.81912994 285.07620239]
[81.60544586 269.86407471]
[92.50000000 258.73095703]
[92.50000000 243.73094177]
[92.50000000 228.73094177]
[92.50000000 213.73094177]
[92.50000000 198.73094177]
[92.50000000 183.73094177]
[84.76270294 171.00367737]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[77.59116364 52.48136139]
[65.39871979 42.43019485]
[57.36426926 28.85490417]
[54.42980194 13.38265514]
[56.92726898 -2.13914466]
[64.54113770 -15.86343384]
[76.34811401 -26.16329384]
[90.92911530 -31.82480049]
[90.39974213 -46.81545639]
[89.87036896 -61.80611038]
[89.34100342 -76.79676819]
[81.12149048 -90.31528473]
[88.40480804 -103.30768585]
[87.87543488 -118.29833984]
[87.34606171 -133.28900146]
[86.81668854 -148.27964783]
[80.21513367 -163.89553833]
[93.39324951 -174.56201172]
[107.29093170 -164.85166931]
[101.80735016 -148.80902100]
[102.33672333 -133.81837463]
[102.86608887 -118.82771301]
[103.39546204 -103.83705902]
[111.57711029 -91.39077759]
[104.33165741 -77.32614136]
[104.86103058 -62.33548355]
[105.39040375 -47.34482574]
[105.91976929 -32.35417175]
[119.61413574 -28.34914970]
[131.40153503 -20.27141762]
[140.10519409 -8.91111565]
[144.85113525 4.61310530]
[145.15596008 18.96424103]
[140.97599792 32.71910477]
[132.71298218 44.50945663]
[121.17554474 53.15812302]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[115.23729706 171.00367737]
[107.50000000 183.73094177]
[107.50000000 198.73094177]
[107.50000000 213.73094177]
[107.50000000 228.73094177]
[107.50000000 243.73094177]
[107.50000000 258.73095703]
[118.39455414 269.86407471]
[118.18087006 285.07620239]
[107.50000000 295.39389038]
[107.50000000 310.39389038]
[107.50000000 325.39389038]
[107.50000000 340.39389038]
[107.50000000 355.39389038]
[107.50000000 370.39389038]
[107.50000000 385.39389038]
[107.50000000 400.39389038]
[113.54634094 416.23300171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[19 70]
[20 69]
[21 68]
[22 67]
[24 65]
[25 64]
[26 63]
[34 54]
[35 53]
[36 52]
[37 51]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
