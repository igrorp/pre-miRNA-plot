%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCGUGCCUAUACUCGGCCGUCGGAUGGCAUCGGGGGAGGUUAUCGUGCGUUUCGGCGUAUCGAUCUCGCCCAUAAAGCCCCGACGAGUAGGGUGUACGUGGCGGUGUG\
) } def
/len { sequence length } bind def

/coor [
[90.55220795 394.01712036]
[96.59854126 378.17797852]
[96.59854126 363.17797852]
[88.86124420 350.45071411]
[96.59854126 336.65054321]
[96.59854126 321.65054321]
[96.59854126 306.65054321]
[96.59854126 291.65054321]
[85.91767120 281.33285522]
[85.70399475 266.12072754]
[96.59854126 254.98760986]
[96.39003754 239.98905945]
[95.97306824 224.99485779]
[95.55609131 210.00064087]
[95.13912201 195.00643921]
[94.72215271 180.01223755]
[94.30517578 165.01803589]
[93.88820648 150.02383423]
[85.80010223 137.51655579]
[93.15079498 123.50663757]
[92.73381805 108.51243591]
[92.10846710 93.52548218]
[91.27484131 78.54866028]
[90.44122314 63.57184219]
[89.60759735 48.59502411]
[88.77397919 33.61820602]
[87.94036102 18.64138985]
[84.53191376 12.70971107]
[84.71368408 6.85043621]
[87.50020599 2.81356454]
[87.50020599 -12.18643570]
[87.50020599 -27.18643570]
[72.58048248 -37.28040695]
[66.65482330 -54.12671661]
[71.87819672 -71.04125214]
[86.02037811 -81.42903137]
[85.18675232 -96.40585327]
[84.35313416 -111.38266754]
[75.86084747 -124.73151398]
[82.87887573 -137.86911011]
[82.04525757 -152.84593201]
[81.21163177 -167.82275391]
[80.37801361 -182.79957581]
[79.54438782 -197.77638245]
[78.71076965 -212.75320435]
[70.06880188 -219.64653015]
[66.79182434 -229.97210693]
[69.75392151 -240.16206360]
[77.71650696 -246.83721924]
[77.71650696 -261.83721924]
[77.71650696 -276.83721924]
[77.71650696 -291.83721924]
[77.71650696 -306.83721924]
[77.71650696 -321.83721924]
[69.05280304 -335.76101685]
[77.01692963 -350.09646606]
[93.41607666 -350.09646606]
[101.38021088 -335.76101685]
[92.71650696 -321.83721924]
[92.71650696 -306.83721924]
[92.71650696 -291.83721924]
[92.71650696 -276.83721924]
[92.71650696 -261.83721924]
[92.71650696 -246.83721924]
[103.66009521 -230.99737549]
[93.68758392 -213.58682251]
[94.52120972 -198.61001587]
[95.35482788 -183.63319397]
[96.18845367 -168.65637207]
[97.02207184 -153.67955017]
[97.85569000 -138.70274353]
[106.28835297 -126.42513275]
[99.32994843 -112.21629333]
[100.16357422 -97.23947144]
[100.99719238 -82.26265717]
[112.19776917 -77.18512726]
[120.18099976 -67.73547363]
[123.35314941 -55.70343399]
[121.03952789 -43.40324783]
[113.62685394 -33.22851562]
[102.50020599 -27.18643570]
[102.50020599 -12.18643570]
[102.50020599 2.81356454]
[102.91717529 17.80776787]
[103.75079346 32.78458405]
[104.58441925 47.76140213]
[105.41803741 62.73822021]
[106.25166321 77.71504211]
[107.08528137 92.69185638]
[110.68533325 100.04132843]
[107.72802734 108.09546661]
[108.14499664 123.08966827]
[116.26292419 136.66943359]
[108.88240814 149.60685730]
[109.29938507 164.60105896]
[109.71635437 179.59527588]
[110.13332367 194.58947754]
[110.55030060 209.58367920]
[110.96726990 224.57788086]
[111.38423920 239.57208252]
[114.79035950 248.20346069]
[111.59854126 254.98760986]
[122.49309540 266.12072754]
[122.27941895 281.33285522]
[111.59854126 291.65054321]
[111.59854126 306.65054321]
[111.59854126 321.65054321]
[111.59854126 336.65054321]
[119.33584595 350.45071411]
[111.59854126 363.17797852]
[111.59854126 378.17797852]
[117.64488220 394.01712036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[5 108]
[6 107]
[7 106]
[8 105]
[11 102]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[18 94]
[20 92]
[21 91]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[30 83]
[31 82]
[32 81]
[36 75]
[37 74]
[38 73]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
