%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGAUAUGAAUUGCUUGGAGCUAGGGAAUAUUCCAUUCCUGCAAGAAGCUGUUUCUGUUGUC\
) } def
/len { sequence length } bind def

/coor [
[81.34123230 295.40344238]
[68.82530212 283.96719360]
[76.34986877 268.77453613]
[77.77571106 253.84245300]
[71.28324890 240.43733215]
[80.29730988 227.43511963]
[81.72314453 212.50303650]
[83.14898682 197.57096863]
[84.57482910 182.63888550]
[78.08236694 169.23376465]
[87.09642029 156.23155212]
[88.52226257 141.29948425]
[89.94810486 126.36740112]
[91.37394714 111.43531799]
[85.74091339 98.63842010]
[93.69397736 87.13883972]
[95.11981964 72.20675659]
[96.54566193 57.27468109]
[97.97149658 42.34260178]
[86.51338196 32.04610825]
[83.35217285 17.15114021]
[89.49516296 3.41331983]
[102.39519501 -3.98445892]
[103.82103729 -18.91653824]
[101.46650696 -28.12248039]
[105.68658447 -34.51933670]
[107.82130432 -49.36666107]
[109.95602417 -64.21398163]
[112.09075165 -79.06130219]
[114.22547150 -93.90862274]
[103.00424957 -104.62607574]
[100.25878143 -119.89833832]
[107.04475403 -133.85292053]
[120.75282288 -141.12399292]
[136.11195374 -138.91567993]
[147.21624756 -128.07713318]
[149.79588318 -112.77597809]
[142.85893250 -98.89583588]
[129.07279968 -91.77390289]
[126.93807220 -76.92658234]
[124.80334473 -62.07925797]
[122.66862488 -47.23193741]
[120.53390503 -32.38461685]
[118.75311279 -17.49069786]
[117.32727814 -2.55861831]
[128.59414673 7.14682055]
[132.02622986 21.79894829]
[126.10325623 35.82648468]
[112.90357971 43.76844406]
[111.47773743 58.70052338]
[110.05189514 73.63259888]
[108.62605286 88.56468201]
[114.25908661 101.36157990]
[106.30602264 112.86116028]
[104.88018036 127.79324341]
[103.45433807 142.72532654]
[102.02850342 157.65739441]
[108.41897583 172.13055420]
[99.50690460 184.06472778]
[98.08106995 198.99679565]
[96.65522766 213.92887878]
[95.22938538 228.86096191]
[101.61985779 243.33412170]
[92.70779419 255.26828003]
[91.28195190 270.20037842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[6 62]
[7 61]
[8 60]
[9 59]
[11 57]
[12 56]
[13 55]
[14 54]
[16 52]
[17 51]
[18 50]
[19 49]
[23 45]
[24 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
