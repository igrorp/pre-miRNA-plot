%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGUGGGUUUGAGAUAGACGGGGGAAAGAGAAGGGGAUGGAGAGAGAAAGGUAAGAUUGGGAGAGAGCUUUAGGCGGGAGAAGAUGGACUCCAUUUUUGUUUGUUUGUUUGUUUGUUUAUUUGUUUUUUGUACCCUG\
) } def
/len { sequence length } bind def

/coor [
[-14.83641911 407.11654663]
[-10.33041859 421.52484131]
[-9.87997341 436.61456299]
[-13.51850891 451.26596069]
[-20.97602081 464.39181519]
[-31.69911385 475.01809692]
[-44.89206314 482.35626221]
[-59.57586288 485.86178589]
[-74.66087341 485.27450562]
[-89.02770233 480.63803101]
[-101.61021423 472.29638672]
[-111.47472382 460.86862183]
[-117.88919830 447.20269775]
[-120.37766266 432.31277466]
[-118.75543976 417.30374146]
[-113.14291382 403.28936768]
[-103.95657349 391.30966187]
[-91.87810516 382.25354004]
[-77.80381775 376.79306030]
[-62.77810287 375.33340454]
[-47.91597748 377.98291016]
[-41.40772247 364.46838379]
[-34.89946747 350.95385742]
[-28.39121056 337.43933105]
[-21.88295555 323.92477417]
[-29.29037857 312.76281738]
[-30.20155907 299.28881836]
[-24.26982117 287.03582764]
[-12.95693684 279.27008057]
[0.82553816 278.12066650]
[7.63539553 264.75558472]
[14.44525337 251.39047241]
[21.25510979 238.02537537]
[28.06496811 224.66027832]
[34.87482452 211.29518127]
[33.75889969 196.44244385]
[46.91803360 187.65905762]
[53.72789001 174.29396057]
[60.53774643 160.92886353]
[67.34760284 147.56376648]
[74.15746307 134.19866943]
[80.96732330 120.83356476]
[87.77717590 107.46846771]
[87.23727417 93.49706268]
[98.85772705 85.72167206]
[105.66757965 72.35657501]
[112.47743988 58.99147797]
[111.84860229 43.18277359]
[124.52064514 35.35535049]
[131.33050537 21.99025345]
[138.14036560 8.62515640]
[125.22162628 16.24790764]
[110.74676514 20.18215370]
[95.74680328 20.14766121]
[81.29018402 16.14688301]
[68.40664673 8.46479702]
[58.01387787 -2.35140872]
[50.85214615 -15.53130150]
[47.43157578 -30.13608551]
[47.99581528 -45.12546921]
[52.50467300 -59.43176651]
[60.63698959 -72.03594971]
[71.81349945 -82.04023743]
[85.23810577 -88.73200989]
[99.95458221 -91.63463593]
[114.91468811 -90.54135132]
[129.05282593 -85.53003693]
[141.36192322 -76.95764160]
[150.96524048 -65.43477631]
[157.17871094 -51.78220367]
[159.55976868 -36.97239304]
[157.93879700 -22.06023216]
[152.43040466 -8.10633087]
[164.56565857 -16.92310905]
[176.70091248 -25.73988724]
[188.83616638 -34.55666733]
[200.97142029 -43.37344742]
[213.10667419 -52.19022369]
[225.24192810 -61.00700378]
[237.37718201 -69.82378387]
[243.99388123 -84.19493103]
[258.83834839 -85.41622162]
[270.97360229 -94.23300171]
[283.10885620 -103.04978180]
[295.24411011 -111.86656189]
[307.37936401 -120.68333435]
[319.51461792 -129.50012207]
[331.64987183 -138.31689453]
[343.78512573 -147.13366699]
[353.04528809 -161.33528137]
[369.25537109 -156.36837769]
[368.96997070 -139.41683960]
[352.60189819 -134.99841309]
[340.46664429 -126.18164062]
[328.33139038 -117.36486053]
[316.19613647 -108.54808044]
[304.06088257 -99.73130035]
[291.92562866 -90.91452789]
[279.79037476 -82.09774780]
[267.65512085 -73.28096771]
[261.90640259 -59.54045868]
[246.19396973 -57.68852615]
[234.05871582 -48.87174988]
[221.92346191 -40.05496979]
[209.78819275 -31.23819160]
[197.65293884 -22.42141151]
[185.51768494 -13.60463333]
[173.38243103 -4.78785419]
[161.24717712 4.02892447]
[151.50546265 15.43501377]
[144.69560242 28.80011177]
[137.88574219 42.16521072]
[139.00166321 57.01795197]
[125.84253693 65.80133820]
[119.03267670 79.16643524]
[112.22282410 92.53153229]
[112.76272583 106.50293732]
[101.14227295 114.27832794]
[94.33242035 127.64342499]
[87.52256012 141.00851440]
[80.71269989 154.37362671]
[73.90284729 167.73872375]
[67.09298706 181.10382080]
[60.28313065 194.46891785]
[60.91196823 210.27761841]
[48.23992538 218.10504150]
[41.43006516 231.47013855]
[34.62020874 244.83523560]
[27.81035042 258.20034790]
[21.00049400 271.56542969]
[14.19063568 284.93054199]
[22.07047081 299.85269165]
[19.55862045 316.37207031]
[7.83428574 328.04385376]
[-8.36842155 330.43304443]
[-14.87667751 343.94757080]
[-21.38493347 357.46209717]
[-27.89319038 370.97665405]
[-34.40144730 384.49118042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[30 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[37 124]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[45 116]
[46 115]
[47 114]
[49 112]
[50 111]
[51 110]
[73 109]
[74 108]
[75 107]
[76 106]
[77 105]
[78 104]
[79 103]
[80 102]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
