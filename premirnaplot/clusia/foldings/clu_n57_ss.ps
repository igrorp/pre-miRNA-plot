%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGCAGCACCAUUCCUUUGAAGCAGAAUUGUCUGAACCUUGUAGCCUUCAAUUCUGCUUCAUUUGAUUCCAUAAUAUGCAGAGG\
) } def
/len { sequence length } bind def

/coor [
[89.57729340 239.94076538]
[95.62363434 224.10162354]
[95.62363434 209.10162354]
[95.62363434 194.10162354]
[95.35282135 179.10406494]
[94.81127930 164.11384583]
[94.26974487 149.12362671]
[78.16690063 144.37660217]
[64.57976532 134.51628113]
[55.07392502 120.67883301]
[50.74467850 104.45867157]
[52.09086609 87.72476196]
[58.95737076 72.40526581]
[70.55300903 60.26536560]
[85.54166412 52.70387650]
[83.38257599 37.86008072]
[69.80798340 30.57745361]
[63.20173645 16.85845757]
[65.90845490 2.05515790]
[76.68395996 -8.19308758]
[74.52487183 -23.03688622]
[72.36578369 -37.88068390]
[70.20668793 -52.72447968]
[68.04759979 -67.56827545]
[65.88851166 -82.41207886]
[63.72942352 -97.25587463]
[61.57033157 -112.09967041]
[59.41124344 -126.94346619]
[57.25215149 -141.78726196]
[55.09306335 -156.63105774]
[52.93397141 -171.47486877]
[50.77488327 -186.31866455]
[35.86120605 -188.85585022]
[22.46243095 -195.87925720]
[11.89123821 -206.70075989]
[5.18328333 -220.26020813]
[2.99574447 -235.22917175]
[5.54293394 -250.14114380]
[12.57530403 -263.53521729]
[23.40389442 -274.09915161]
[36.96783066 -280.79800415]
[51.93825531 -282.97552490]
[66.84851837 -280.41833496]
[80.23786926 -273.37698364]
[90.79454803 -262.54132080]
[97.48432922 -248.97291565]
[99.65180206 -234.00102234]
[97.08463287 -219.09248352]
[90.03431702 -205.70785522]
[79.19158173 -195.15843201]
[65.61868286 -188.47775269]
[67.77777100 -173.63395691]
[69.93685913 -158.79016113]
[72.09594727 -143.94635010]
[74.25504303 -129.10255432]
[76.41413116 -114.25875854]
[78.57321930 -99.41496277]
[80.73230743 -84.57116699]
[82.89139557 -69.72737122]
[85.05049133 -54.88357162]
[87.20957947 -40.03977203]
[89.36866760 -25.19597435]
[91.52775574 -10.35217762]
[104.77628326 -3.59832287]
[111.58802032 9.82047844]
[109.16379547 24.85299301]
[98.22637177 35.70098877]
[100.38546753 50.54478836]
[113.45659637 52.40917206]
[125.56863403 57.66548157]
[135.85833740 65.93907928]
[143.59231567 76.64028168]
[148.21936035 89.00640106]
[149.40969849 102.15605164]
[147.07847595 115.15203857]
[141.39184570 127.06810760]
[132.75511169 137.05496216]
[121.78382874 144.40080261]
[109.25996399 148.58209229]
[109.80150604 163.57231140]
[110.34304047 178.56253052]
[113.84676361 187.25559998]
[110.62363434 194.10162354]
[110.62363434 209.10162354]
[110.62363434 224.10162354]
[116.66996765 239.94076538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 83]
[5 81]
[6 80]
[7 79]
[15 68]
[16 67]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
