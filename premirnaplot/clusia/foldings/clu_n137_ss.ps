%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGCGGAUUGAUUAAUCGGGAAGAUAUCUGUGAUGAUUAGACGGGUUUGGUUGGGUUGGAUUGGGUUGGGUUGG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 280.02206421]
[92.50000000 264.18292236]
[92.50000000 249.18292236]
[92.50000000 234.18292236]
[84.76270294 221.45565796]
[92.50000000 207.65548706]
[84.76270294 194.92820740]
[92.50000000 181.12803650]
[92.50000000 166.12803650]
[92.50000000 151.12803650]
[92.50000000 136.12803650]
[84.76270294 123.40076447]
[92.50000000 109.60059357]
[91.88816833 94.61307526]
[90.66553497 79.66298676]
[89.44289398 64.71289825]
[88.22025299 49.76280975]
[86.99761200 34.81272125]
[85.77497864 19.86263084]
[76.93857574 6.73903894]
[83.61273956 -6.57654572]
[82.39010620 -21.52663422]
[70.62434387 -31.73470688]
[69.59738922 -46.91363907]
[79.40173340 -58.06758118]
[78.17909241 -73.01766968]
[74.26671600 -81.59278870]
[77.22424316 -88.60039520]
[76.61241150 -103.58791351]
[76.00057983 -118.57543182]
[75.38875580 -133.56294250]
[74.77692413 -148.55046082]
[74.16510010 -163.53797913]
[60.80564499 -171.25346375]
[53.75858688 -184.97724915]
[55.27260590 -200.33015442]
[64.86458588 -212.41308594]
[79.47376251 -217.37045288]
[94.43840027 -213.62036133]
[104.98333740 -202.35946655]
[107.74372101 -187.18106079]
[101.83872986 -172.92854309]
[89.15261078 -164.14981079]
[89.76444244 -149.16229248]
[90.37627411 -134.17477417]
[90.98809814 -119.18726349]
[91.59992981 -104.19974518]
[92.21175385 -89.21222687]
[93.12918091 -74.24031067]
[94.35182190 -59.29021835]
[105.83814240 -49.87746048]
[107.29103851 -34.73336029]
[97.34019470 -22.74927330]
[98.56282806 -7.79918480]
[107.31177521 4.25507641]
[100.72506714 18.63999176]
[101.94770050 33.59008026]
[103.17034149 48.54016876]
[104.39298248 63.49025726]
[105.61562347 78.44034576]
[106.83825684 93.39043427]
[110.17332458 97.83459473]
[110.61148071 103.86087799]
[107.50000000 109.60059357]
[115.23729706 123.40076447]
[107.50000000 136.12803650]
[107.50000000 151.12803650]
[107.50000000 166.12803650]
[107.50000000 181.12803650]
[115.23729706 194.92820740]
[107.50000000 207.65548706]
[115.23729706 221.45565796]
[107.50000000 234.18292236]
[107.50000000 249.18292236]
[107.50000000 264.18292236]
[113.54634094 280.02206421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[6 71]
[8 69]
[9 68]
[10 67]
[11 66]
[13 64]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[21 54]
[22 53]
[25 50]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
