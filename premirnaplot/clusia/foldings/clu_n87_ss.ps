%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGAAGGUUCUCUACAGGAGCGACAUGAAAACACAUGUAGUUUUAUGUAAUUUUUCGUUACUUGAAGCUCUUUCAUGUGUUCUCAGGUCGCCCCUGCGGAGAUUUCCUCCGCU\
) } def
/len { sequence length } bind def

/coor [
[95.26812744 379.54492188]
[101.31446838 363.70578003]
[101.31446838 348.70578003]
[101.31446838 333.70578003]
[93.57717133 320.97851562]
[101.31446838 307.17834473]
[101.31446838 292.17834473]
[101.31446838 277.17834473]
[90.37365723 261.33267212]
[100.36022186 243.92604065]
[99.54108429 228.94842529]
[98.72194672 213.97080994]
[97.90280914 198.99317932]
[97.08367157 184.01556396]
[88.66289520 171.72981262]
[95.63503265 157.52770996]
[94.81589508 142.55009460]
[93.99674988 127.57247925]
[93.17761230 112.59485626]
[85.69742584 100.78221893]
[91.84476471 88.22428131]
[91.02562714 73.24666595]
[90.20648956 58.26904678]
[89.38735199 43.29142761]
[88.56821442 28.31381226]
[80.08884430 14.95675945]
[87.11957550 1.82595146]
[86.30043030 -13.15166569]
[85.48129272 -28.12928200]
[77.00192261 -41.48633575]
[84.03265381 -54.61714172]
[83.21351624 -69.59475708]
[82.39437866 -84.57238007]
[81.57524109 -99.54999542]
[80.75610352 -114.52761078]
[79.93695831 -129.50523376]
[79.11782074 -144.48284912]
[78.29868317 -159.46046448]
[65.39106750 -176.45159912]
[74.98937225 -194.63708496]
[72.94687653 -209.49737549]
[70.90437317 -224.35766602]
[68.86187744 -239.21795654]
[66.81937408 -254.07824707]
[64.77687836 -268.93853760]
[62.73437881 -283.79882812]
[53.19001770 -296.41690063]
[59.12222290 -310.07919312]
[57.07972336 -324.93948364]
[55.03722382 -339.79977417]
[52.99472427 -354.66006470]
[50.95222473 -369.52035522]
[39.08929825 -380.32083130]
[40.28078079 -396.31958008]
[53.61267090 -405.24371338]
[68.85788727 -400.24740601]
[74.32159424 -385.16339111]
[65.81251526 -371.56283569]
[67.85501099 -356.70254517]
[69.89751434 -341.84228516]
[71.94001007 -326.98199463]
[73.98251343 -312.12170410]
[83.38077545 -300.56652832]
[77.59466553 -285.84133911]
[79.63716888 -270.98104858]
[81.67966461 -256.12075806]
[83.72216797 -241.26045227]
[85.76466370 -226.40016174]
[87.80716705 -211.53988647]
[89.84966278 -196.67959595]
[97.90524292 -192.41421509]
[103.10678864 -184.76034546]
[104.13776398 -175.42407227]
[100.62938690 -166.56123352]
[93.27629852 -160.27960205]
[94.09544373 -145.30198669]
[94.91458130 -130.32437134]
[95.73371887 -115.34674835]
[96.55285645 -100.36913300]
[97.37199402 -85.39151764]
[98.19113159 -70.41389465]
[99.01026917 -55.43627930]
[107.43105316 -43.15052795]
[100.45891571 -28.94842148]
[101.27805328 -13.97080421]
[102.09719086 1.00681329]
[110.51796722 13.29256535]
[103.54582977 27.49467278]
[104.36496735 42.47229004]
[105.18410492 57.44990921]
[106.00325012 72.42752075]
[106.82238770 87.40514374]
[114.30257416 99.21778107]
[108.15523529 111.77571869]
[108.97437286 126.75333405]
[109.79351044 141.73095703]
[110.61264801 156.70857239]
[119.09201813 170.06562805]
[112.06128693 183.19642639]
[112.88042450 198.17404175]
[113.69956970 213.15167236]
[114.51870728 228.12928772]
[115.33784485 243.10690308]
[123.96830750 250.00398254]
[127.23669434 260.32540894]
[124.27270508 270.50802612]
[116.31446838 277.17834473]
[116.31446838 292.17834473]
[116.31446838 307.17834473]
[124.05177307 320.97851562]
[116.31446838 333.70578003]
[116.31446838 348.70578003]
[116.31446838 363.70578003]
[122.36080933 379.54492188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[6 109]
[7 108]
[8 107]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[16 97]
[17 96]
[18 95]
[19 94]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[27 86]
[28 85]
[29 84]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
