%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCCUUCGAAGUUACUGGAGAUUGGGCAUAAUCAAAAUGGACGGUUUUGAGUGGCAACAACUGGUU\
) } def
/len { sequence length } bind def

/coor [
[78.17089844 342.54113770]
[65.59294891 331.17315674]
[73.03475189 315.93975830]
[74.37934113 301.00015259]
[75.72393036 286.06054688]
[77.06851959 271.12094116]
[63.51379013 264.83169556]
[52.90878296 254.26461792]
[46.54709244 240.68142700]
[45.21400070 225.71331787]
[49.08963776 211.16513062]
[57.72488785 198.79772949]
[70.09335327 190.11480713]
[84.71333313 186.18014526]
[86.05792236 171.24053955]
[87.40251160 156.30091858]
[88.74710083 141.36131287]
[90.09169006 126.42169189]
[91.43627930 111.48207855]
[85.73371887 98.71601105]
[93.62410736 87.17333221]
[94.96869659 72.23371887]
[96.31328583 57.29410553]
[97.65787506 42.35449219]
[99.00246429 27.41487503]
[100.34705353 12.47526169]
[101.69164276 -2.46435285]
[91.83891296 -14.52923965]
[93.41533661 -29.66097832]
[104.97808075 -38.97969818]
[106.32267761 -53.91931152]
[107.66726685 -68.85892487]
[96.50991058 -79.81554413]
[95.05712128 -95.38549805]
[103.99485779 -108.21713257]
[119.10300446 -112.25173950]
[133.24794006 -105.58430481]
[139.75086975 -91.36298370]
[135.54130554 -76.30265045]
[122.60688019 -67.51433563]
[121.26229095 -52.57472229]
[119.91770172 -37.63510895]
[129.63070679 -26.40153694]
[128.47991943 -11.23148918]
[116.63125610 -1.11976326]
[115.28666687 13.81985092]
[113.94207764 28.75946617]
[112.59748840 43.69908142]
[111.25289917 58.63869476]
[109.90830994 73.57830811]
[108.56372070 88.51792145]
[114.26628113 101.28398895]
[106.37589264 112.82666779]
[105.03130341 127.76628113]
[103.68671417 142.70590210]
[102.34212494 157.64550781]
[100.99753571 172.58512878]
[99.65294647 187.52473450]
[113.33541870 194.00666809]
[123.95471954 204.75851440]
[130.24290466 218.46905518]
[131.45858765 233.47546387]
[127.47425842 247.96499634]
[118.78942871 260.19400024]
[106.46802521 268.69763184]
[92.00814056 272.46551514]
[90.66355133 287.40512085]
[89.31895447 302.34475708]
[87.97436523 317.28436279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[5 67]
[6 66]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[30 42]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
