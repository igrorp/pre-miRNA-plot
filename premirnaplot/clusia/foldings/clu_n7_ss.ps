%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAGCUUCAAAACCACUACCAAUAACUUGUCAAGUGGAGAACUUUGUUGAGUUAAGACUUCCAUAUAACAAUUUUCAACAACUUUGGACGGGAAGGCUGGGUCUUGUAAAUGU\
) } def
/len { sequence length } bind def

/coor [
[82.14236450 388.19497681]
[69.16783142 377.28179932]
[76.06281281 361.79324341]
[76.87490082 346.81524658]
[77.68698120 331.83724976]
[65.13545990 323.81695557]
[58.23778534 310.50238037]
[58.93534088 295.42324829]
[67.14081573 282.63394165]
[80.73481750 275.62319946]
[81.54689789 260.64520264]
[82.35898590 245.66719055]
[75.32207489 232.53968811]
[83.79515076 219.17864990]
[84.60723877 204.20065308]
[85.41931915 189.22264099]
[82.60188293 182.28112793]
[86.46163177 173.85171509]
[76.65335846 162.70123291]
[77.67498016 147.52192688]
[89.43714905 137.30972290]
[90.65452576 122.35920715]
[82.14736938 116.38766479]
[76.92427826 107.40155029]
[75.94605255 97.05389404]
[79.39264679 87.24818420]
[86.63004303 79.78821564]
[96.32688904 76.04628754]
[98.75362396 61.24389267]
[101.18035126 46.44149399]
[103.60707855 31.63909721]
[106.03381348 16.83669853]
[108.46054077 2.03430104]
[110.48554230 -12.82838345]
[112.10733032 -27.74045181]
[113.72911072 -42.65252304]
[115.35089874 -57.56459045]
[116.77060699 -72.49725342]
[106.81554413 -84.47784424]
[108.26312256 -99.62245178]
[119.74612427 -109.03924561]
[120.96350861 -123.98976898]
[122.18089294 -138.94029236]
[112.22582245 -150.92086792]
[113.67340088 -166.06547546]
[125.15641022 -175.48228455]
[126.37378693 -190.43280029]
[127.59117126 -205.38331604]
[128.80854797 -220.33383179]
[130.02592468 -235.28434753]
[130.02592468 -250.28434753]
[128.80854797 -265.23486328]
[127.59117126 -280.18539429]
[126.37378693 -295.13589478]
[116.60862732 -308.31063843]
[123.38304138 -323.24514771]
[139.72808838 -324.57608032]
[148.82939148 -310.93429565]
[141.32431030 -296.35327148]
[142.54168701 -281.40277100]
[143.75906372 -266.45223999]
[144.97645569 -251.50173950]
[156.09944153 -261.56549072]
[171.09112549 -261.06600952]
[181.51959229 -250.28421021]
[181.51948547 -235.28421021]
[171.09085083 -224.50257874]
[156.09915161 -224.00332642]
[144.97645569 -234.06697083]
[143.75906372 -219.11645508]
[142.54168701 -204.16593933]
[141.32431030 -189.21542358]
[140.10691833 -174.26489258]
[149.91519165 -163.11441040]
[148.89356995 -147.93511963]
[137.13140869 -137.72290039]
[135.91403198 -122.77238464]
[134.69664001 -107.82186890]
[144.50491333 -96.67137909]
[143.48329163 -81.49208069]
[131.72113037 -71.27986908]
[134.34956360 -64.26460266]
[130.26296997 -55.94280624]
[128.64117432 -41.03073502]
[127.01939392 -26.11866760]
[125.39761353 -11.20659733]
[127.72607422 -6.89753199]
[127.27713776 -1.06274259]
[123.26293945 4.46103096]
[120.83621216 19.26342964]
[118.40947723 34.06582642]
[115.98274994 48.86822510]
[113.55602264 63.67062378]
[111.12928772 78.47302246]
[123.26769257 93.22603607]
[120.94510651 112.18910980]
[105.60504150 123.57658386]
[104.38766479 138.52709961]
[114.34272766 150.50769043]
[112.89515686 165.65229797]
[101.41214752 175.06910706]
[100.39732361 190.03472900]
[99.58523560 205.01272583]
[98.77315521 219.99073792]
[105.75198364 234.18955994]
[97.33698273 246.47927856]
[96.52490234 261.45727539]
[95.71282196 276.43527222]
[108.46913910 284.87469482]
[115.24374390 298.47619629]
[114.30686951 313.54235840]
[106.01007080 326.03311157]
[92.66498566 332.64932251]
[91.85289764 347.62731934]
[91.04081726 362.60531616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[10 108]
[11 107]
[12 106]
[14 104]
[15 103]
[16 102]
[18 101]
[21 98]
[22 97]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 86]
[35 85]
[36 84]
[37 83]
[38 81]
[41 78]
[42 77]
[43 76]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
