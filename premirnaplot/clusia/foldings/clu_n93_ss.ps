%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAAGCUCAAAAGCAGUUUCUUGACGCGAUGUCGCACAGGGUGCAUAUUGAUCACAGUGUCAAACUUGUUGGGAAGGUCCUAUUUGGACUUGAAA\
) } def
/len { sequence length } bind def

/coor [
[78.31848907 502.37112427]
[84.36483002 486.53201294]
[84.36483002 471.53201294]
[84.36483002 456.53201294]
[84.36483002 441.53201294]
[84.36483002 426.53201294]
[84.36483002 411.53201294]
[76.62753296 398.80471802]
[84.36483002 385.00454712]
[84.36483002 370.00454712]
[84.36483002 355.00454712]
[84.36483002 340.00454712]
[84.36483002 325.00454712]
[84.12441254 310.00650024]
[83.64363861 295.01419067]
[75.50238800 282.54144287]
[82.79339600 268.50036621]
[74.65213776 256.02764893]
[81.94314575 241.98655701]
[81.46237183 226.99427795]
[80.98159790 212.00198364]
[80.50082397 197.00968933]
[80.02005005 182.01739502]
[79.53927612 167.02510071]
[79.05850220 152.03280640]
[78.57772827 137.04051208]
[78.09695435 122.04821777]
[70.32106781 109.22107697]
[57.25128937 101.86031342]
[44.18150711 94.49954987]
[27.79800606 95.21574402]
[19.21541214 81.24179840]
[27.26276207 66.95291138]
[43.66163254 67.04827118]
[51.54227066 81.42977142]
[64.61205292 88.79053497]
[77.68183136 96.15129852]
[82.75368500 88.38104248]
[90.00477600 83.90910339]
[97.72103119 83.06255341]
[102.44765472 68.82671356]
[95.61624908 54.82779694]
[100.61251831 40.45796585]
[114.00044250 34.03154373]
[118.72706604 19.79570580]
[118.47568512 10.47212887]
[123.84006500 5.18360424]
[129.02053833 -8.89342213]
[134.20101929 -22.97044945]
[139.38148499 -37.04747391]
[144.56196594 -51.12450027]
[149.74244690 -65.20153046]
[146.42062378 -81.26071930]
[158.84567261 -91.96353912]
[174.23574829 -86.29984283]
[176.75888062 -70.09596252]
[163.81947327 -60.02105331]
[158.63899231 -45.94402695]
[153.45851135 -31.86699867]
[148.27804565 -17.78997231]
[143.09756470 -3.71294641]
[137.91708374 10.36407948]
[132.96290588 24.52232933]
[128.23628235 38.75816727]
[135.12184143 51.91585159]
[130.53115845 66.42034912]
[116.68348694 73.55333710]
[111.95686340 87.78917694]
[117.01618958 110.25767517]
[93.08924866 121.56744385]
[93.57002258 136.55973816]
[94.05079651 151.55203247]
[94.53157043 166.54432678]
[95.01234436 181.53662109]
[95.49311829 196.52891541]
[95.97389221 211.52120972]
[96.45466614 226.51350403]
[96.93544006 241.50579834]
[105.11108398 255.05087280]
[97.78569031 268.01959229]
[105.96132660 281.56469727]
[98.63593292 294.53341675]
[99.11670685 309.52572632]
[102.57266235 318.18878174]
[99.36483002 325.00454712]
[99.36483002 340.00454712]
[99.36483002 355.00454712]
[99.36483002 370.00454712]
[99.36483002 385.00454712]
[107.10213470 398.80471802]
[99.36483002 411.53201294]
[99.36483002 426.53201294]
[99.36483002 441.53201294]
[99.36483002 456.53201294]
[99.36483002 471.53201294]
[99.36483002 486.53201294]
[105.41117096 502.37112427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 83]
[15 82]
[17 80]
[19 78]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 37]
[29 36]
[30 35]
[40 68]
[41 67]
[44 64]
[45 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
