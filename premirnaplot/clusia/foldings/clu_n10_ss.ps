%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGCCUUAUGUUGAGAACCCUGAUGACGUAGCUGAAGCAAGAAGAAACAAGCAACUGCAAUAUAGGAAUGAUCAUGAGAGGUUCAACAACUUGGUGGAGCCC\
) } def
/len { sequence length } bind def

/coor [
[95.21038055 398.10192871]
[101.25672150 382.26281738]
[101.25672150 367.26281738]
[90.57584381 356.94512939]
[90.36216736 341.73300171]
[101.25672150 330.59985352]
[101.25672150 315.59985352]
[101.03232574 300.60153198]
[100.58359528 285.60824585]
[100.13486481 270.61495972]
[92.02028656 258.12484741]
[99.34128571 244.09939575]
[98.89254761 229.10610962]
[98.44381714 214.11282349]
[97.99508667 199.11953735]
[87.95590210 184.81175232]
[96.59878540 168.63859558]
[95.70172119 153.66545105]
[94.80466461 138.69229126]
[93.90760040 123.71914673]
[93.01053619 108.74599457]
[91.88958740 93.78793335]
[90.54499817 78.84832001]
[81.60180664 65.79727173]
[88.16709137 52.42766953]
[86.82250214 37.48805237]
[85.47791290 22.54843903]
[84.13332367 7.60882473]
[82.56539917 -7.30900383]
[80.77448273 -22.20170784]
[78.98357391 -37.09440994]
[66.83771515 -46.84715271]
[65.23362732 -61.97598648]
[74.60622406 -73.49510193]
[72.81531525 -88.38780212]
[71.02439880 -103.28050232]
[55.73197556 -114.24137115]
[53.18026733 -132.56454468]
[64.50410461 -146.79376221]
[61.82574844 -161.55270386]
[59.14739609 -176.31164551]
[44.20221710 -178.84490967]
[31.02630806 -186.33966064]
[21.21072006 -197.89085388]
[15.94073677 -212.10363770]
[15.85273266 -227.26173401]
[20.95733452 -241.53474426]
[30.63813591 -253.19912720]
[43.72613525 -260.84634399]
[58.64089203 -263.55297852]
[73.58137512 -260.99218750]
[86.74345398 -253.47315979]
[96.53773499 -241.90390015]
[101.78151703 -227.68144226]
[101.84159088 -212.52319336]
[96.71069336 -198.25961304]
[87.00840759 -186.61309814]
[73.90634155 -178.99000549]
[76.58469391 -164.23104858]
[79.26304626 -149.47210693]
[89.99338531 -145.06520081]
[97.27960205 -135.88412476]
[99.17287445 -124.19455719]
[95.07429504 -112.95575714]
[85.91710663 -105.07141876]
[87.70801544 -90.17871857]
[89.49893188 -75.28601074]
[101.33527374 -66.31736755]
[103.36367035 -51.23955917]
[93.87627411 -38.88532639]
[95.66719055 -23.99262047]
[97.45809937 -9.09991741]
[101.44686127 -2.73071218]
[99.07293701 6.26423502]
[100.41752625 21.20384979]
[101.76211548 36.14346313]
[103.10670471 51.08308029]
[111.95372772 63.06554794]
[105.48461151 77.50373077]
[106.82920074 92.44334412]
[110.68589020 99.68448639]
[107.98368835 107.84893036]
[108.88075256 122.82208252]
[109.77781677 137.79522705]
[110.67487335 152.76838684]
[111.57193756 167.74153137]
[120.74575806 176.95993042]
[121.09788513 189.55725098]
[112.98837280 198.67080688]
[113.43710327 213.66409302]
[113.88583374 228.65737915]
[114.33457184 243.65066528]
[122.48124695 257.21319580]
[115.12815094 270.16622925]
[115.57688141 285.15951538]
[116.02561188 300.15280151]
[119.45649719 308.79998779]
[116.25672150 315.59985352]
[116.25672150 330.59985352]
[127.15127563 341.73300171]
[126.93759155 356.94512939]
[116.25672150 367.26281738]
[116.25672150 382.26281738]
[122.30305481 398.10192871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[6 99]
[7 98]
[8 96]
[9 95]
[10 94]
[12 92]
[13 91]
[14 90]
[15 89]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 80]
[23 79]
[25 77]
[26 76]
[27 75]
[28 74]
[29 72]
[30 71]
[31 70]
[34 67]
[35 66]
[36 65]
[39 60]
[40 59]
[41 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
