%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCUUUCUUCUGAAUCUGAAAUGGAAGAUGAUUCCAGAGUUCCAAGGUUUGAAGAGGAUGGACUGCA\
) } def
/len { sequence length } bind def

/coor [
[87.99613190 199.87153625]
[94.04247284 184.03239441]
[94.04247284 169.03239441]
[86.30517578 156.30513000]
[94.04247284 142.50495911]
[93.71063995 127.50862122]
[93.04714203 112.52330780]
[85.69007874 100.63359833]
[91.96753693 88.14019775]
[91.30403900 73.15487671]
[90.64054108 58.16955948]
[89.97703552 43.18423843]
[89.31353760 28.19892120]
[88.65003967 13.21360302]
[87.32433319 -1.72769916]
[85.33902740 -16.59573746]
[83.35372162 -31.46377563]
[81.36841583 -46.33181381]
[79.38310242 -61.19985199]
[77.39779663 -76.06788635]
[74.75676727 -90.83355713]
[71.46519470 -105.46794891]
[68.17361450 -120.10234833]
[53.78895187 -133.90852356]
[59.53125763 -152.16648865]
[54.95917130 -166.45269775]
[50.38708496 -180.73892212]
[45.81499863 -195.02514648]
[41.24291229 -209.31135559]
[27.69665527 -217.90661621]
[26.11406517 -233.87141418]
[37.70917130 -244.95893860]
[53.58719635 -242.66377258]
[61.56788635 -228.74658203]
[55.52912903 -213.88343811]
[60.10121536 -199.59722900]
[64.67330170 -185.31100464]
[69.24539185 -171.02479553]
[73.81747437 -156.73857117]
[83.62607574 -152.69583130]
[89.56495667 -143.63619995]
[89.35147095 -132.58195496]
[82.80800629 -123.39392853]
[86.09958649 -108.75952911]
[89.39116669 -94.12513733]
[93.15258789 -90.71998596]
[94.60258484 -84.79982758]
[92.26583862 -78.05319977]
[94.25114441 -63.18515778]
[96.23645020 -48.31711960]
[98.22175598 -33.44908142]
[100.20706940 -18.58104515]
[102.19237518 -3.71300697]
[105.63813019 0.01124862]
[106.55923462 6.03639793]
[103.63535309 12.55010319]
[104.29885864 27.53542137]
[104.96235657 42.52074051]
[105.62585449 57.50605774]
[106.28936005 72.49137878]
[106.95285797 87.47669220]
[114.30992126 99.36640167]
[108.03246307 111.85980225]
[108.69596100 126.84512329]
[112.29646301 135.59790039]
[109.04247284 142.50495911]
[116.77977753 156.30513000]
[109.04247284 169.03239441]
[109.04247284 184.03239441]
[115.08881378 199.87153625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[5 66]
[6 64]
[7 63]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 45]
[22 44]
[23 43]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
