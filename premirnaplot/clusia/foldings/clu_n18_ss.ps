%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUACCAGUUGUGCUCCCUCCACUUACGCUGCUCGUAUGUUCUUGAUCACUGAGAGGAUAAAUGGGAGCCGUAGUAGAAGCAGGAGCAUUGGUAGCA\
) } def
/len { sequence length } bind def

/coor [
[75.45169830 369.00430298]
[81.49803925 353.16519165]
[81.49803925 338.16519165]
[81.49803925 323.16519165]
[81.49803925 308.16519165]
[81.49803925 293.16519165]
[81.49803925 278.16519165]
[81.49803925 263.16519165]
[79.10079956 260.34426880]
[78.05410767 256.15640259]
[79.01544189 251.30079651]
[82.27968597 246.75633240]
[83.70552826 231.82424927]
[85.13137054 216.89218140]
[86.55721283 201.96009827]
[87.98305511 187.02801514]
[89.40888977 172.09593201]
[90.83473206 157.16386414]
[91.78609467 142.19406128]
[92.26200867 127.20161438]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[89.32437134 49.03067398]
[92.74554443 42.32247162]
[93.22145844 27.33002090]
[93.69738007 12.33757305]
[93.93537140 -2.66053843]
[93.93537140 -17.66053772]
[90.75974274 -26.42636681]
[94.18090820 -33.13457108]
[94.65682983 -48.12701797]
[95.13275146 -63.11946487]
[95.60866547 -78.11191559]
[96.08458710 -93.10436249]
[88.78903198 -107.14307404]
[96.92624664 -119.61845398]
[97.40216827 -134.61090088]
[97.87808228 -149.60334778]
[98.35400391 -164.59579468]
[98.82992554 -179.58824158]
[99.30583954 -194.58068848]
[99.78176117 -209.57313538]
[87.01657867 -218.23648071]
[80.98260498 -232.43489075]
[83.60525513 -247.63769531]
[94.04766083 -258.99374390]
[108.97768402 -262.87933350]
[123.63121033 -258.05462646]
[133.33235168 -246.05915833]
[134.98550415 -230.72062683]
[128.06315613 -216.93350220]
[114.77420807 -209.09721375]
[114.29828644 -194.10476685]
[113.82237244 -179.11231995]
[113.34645081 -164.11987305]
[112.87053680 -149.12742615]
[112.39461517 -134.13497925]
[111.91869354 -119.14253235]
[119.24829102 -106.17617798]
[111.07703400 -92.62844086]
[110.60111237 -77.63599396]
[110.12519836 -62.64354706]
[109.64927673 -47.65110016]
[109.17335510 -32.65864944]
[108.93537140 -17.66053772]
[108.93537140 -2.66053843]
[112.14198303 4.15283394]
[108.68982697 12.81349277]
[108.21390533 27.80594063]
[107.73799133 42.79838943]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[110.67562866 120.96932983]
[107.25445557 127.67752838]
[106.77854156 142.66998291]
[109.68666840 148.94042969]
[108.95880127 154.81277466]
[105.76681519 158.58970642]
[104.34097290 173.52177429]
[102.91513062 188.45385742]
[101.48928833 203.38594055]
[100.06344604 218.31800842]
[98.63761139 233.25009155]
[97.21176910 248.18217468]
[96.49803925 263.16519165]
[96.49803925 278.16519165]
[96.49803925 293.16519165]
[96.49803925 308.16519165]
[96.49803925 323.16519165]
[96.49803925 338.16519165]
[96.49803925 353.16519165]
[102.54438019 369.00430298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[18 84]
[19 81]
[20 80]
[21 78]
[23 76]
[24 75]
[25 74]
[27 73]
[28 72]
[29 71]
[30 69]
[31 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
