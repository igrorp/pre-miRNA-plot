%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCUCCUUUGUCGGGAGGACUCUUCGGAGAUAAUCUCCGGCGAGUCCGCCGUCGCCUGGAGCUCG\
) } def
/len { sequence length } bind def

/coor [
[94.73633575 269.74844360]
[94.73633575 254.74845886]
[94.73633575 239.74845886]
[86.99903870 227.02117920]
[94.73633575 213.22100830]
[94.73633575 198.22100830]
[94.73633575 183.22100830]
[94.73633575 168.22100830]
[82.39448547 157.02839661]
[81.78967285 140.04479980]
[93.76435089 127.52085114]
[93.07160187 112.53685760]
[85.69133759 100.66152954]
[91.94440460 88.15589905]
[91.25164795 73.17190552]
[90.55889893 58.18790817]
[81.44914246 48.74513626]
[81.36626434 36.03013229]
[89.79754639 27.06098366]
[89.79754639 12.06098366]
[89.79754639 -2.93901658]
[89.79754639 -17.93901634]
[89.79754639 -32.93901825]
[89.79754639 -47.93901825]
[82.06024170 -61.73918915]
[89.79754639 -74.46646118]
[89.79754639 -89.46646118]
[89.79754639 -104.46646118]
[89.79754639 -119.46646118]
[89.79754639 -134.46646118]
[89.79754639 -149.46646118]
[89.79754639 -164.46646118]
[83.75120544 -180.30558777]
[97.29754639 -190.50035095]
[110.84387970 -180.30558777]
[104.79754639 -164.46646118]
[104.79754639 -149.46646118]
[104.79754639 -134.46646118]
[104.79754639 -119.46646118]
[104.79754639 -104.46646118]
[104.79754639 -89.46646118]
[104.79754639 -74.46646118]
[112.53484344 -61.73918915]
[104.79754639 -47.93901825]
[104.79754639 -32.93901825]
[104.79754639 -17.93901634]
[104.79754639 -2.93901658]
[104.79754639 12.06098366]
[104.79754639 27.06098366]
[114.43051910 41.55180740]
[105.54289246 57.49515533]
[106.23564911 72.47914886]
[106.92839813 87.46314240]
[114.30866241 99.33847046]
[108.05559540 111.84410095]
[108.74835205 126.82809448]
[119.82202148 134.84776306]
[124.08644104 147.63121033]
[120.16146851 160.31716919]
[109.73633575 168.22100830]
[109.73633575 183.22100830]
[109.73633575 198.22100830]
[109.73633575 213.22100830]
[117.47364044 227.02117920]
[109.73633575 239.74845886]
[109.73633575 254.74845886]
[109.73633575 269.74844360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[5 63]
[6 62]
[7 61]
[8 60]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
