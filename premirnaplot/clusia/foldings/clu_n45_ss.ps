%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACAAAAGAGCUGGUCUAAGCUUCAUGGUUAGAAUAAUCUCUGUAAAUUAGGAGGUGCAUUUUAAUUGCUGUGCUUCAAGUUUUAAAGUG\
) } def
/len { sequence length } bind def

/coor [
[72.36651611 382.83810425]
[59.53932190 371.75210571]
[66.64116669 356.35726929]
[67.65380859 341.39151001]
[68.66645813 326.42572021]
[57.13567352 317.03533936]
[53.29999542 302.48367310]
[58.83304977 288.29782104]
[71.80821228 279.99411011]
[72.82085419 265.02832031]
[73.83350372 250.06254578]
[74.84614563 235.09677124]
[75.85879517 220.13099670]
[76.87144470 205.16520691]
[68.00647736 199.31983948]
[62.41943359 190.19367981]
[61.22686005 179.47735596]
[64.72354126 169.19105530]
[72.31363678 161.30363464]
[82.61099243 157.35580444]
[85.13249969 142.56924438]
[87.65401459 127.78269958]
[90.17552948 112.99615479]
[83.98319244 102.98031616]
[86.15843201 91.40747833]
[95.56484985 84.32359314]
[98.58432770 69.63064575]
[101.35521698 54.88879395]
[103.87673187 40.10224533]
[106.39824677 25.31570053]
[108.91976166 10.52915287]
[111.44126892 -4.25739431]
[113.96278381 -19.04394150]
[116.48429871 -33.83048630]
[119.00581360 -48.61703491]
[121.52732849 -63.40358353]
[124.04883575 -78.19013214]
[117.20848083 -95.18281555]
[128.69741821 -108.33049011]
[130.71809387 -123.19376373]
[132.73876953 -138.05703735]
[134.75944519 -152.92030334]
[136.78010559 -167.78358459]
[138.80078125 -182.64685059]
[127.49761200 -193.27784729]
[124.63497162 -208.52857971]
[131.31361389 -222.53483582]
[144.96545410 -229.91093445]
[160.34107971 -227.82061768]
[171.52827454 -217.06762695]
[174.22529602 -201.78674316]
[167.39511108 -187.85374451]
[153.66406250 -180.62617493]
[151.64338684 -165.76290894]
[149.62271118 -150.89964294]
[147.60203552 -136.03636169]
[145.58137512 -121.17308807]
[143.56069946 -106.30981445]
[150.67758179 -96.36934662]
[148.97579956 -83.85543060]
[138.83538818 -75.66861725]
[136.31387329 -60.88206863]
[133.79235840 -46.09552002]
[131.27084351 -31.30897522]
[128.74932861 -16.52242851]
[126.22782135 -1.73588085]
[123.70630646 13.05066586]
[121.18479156 27.83721352]
[118.66327667 42.62376022]
[116.14176178 57.41030502]
[118.16246033 64.68209839]
[113.27727509 72.65012360]
[110.25779724 87.34307098]
[116.01134491 103.00950623]
[104.96207428 115.51766968]
[102.44056702 130.30421448]
[99.91905212 145.09075928]
[97.39753723 159.87730408]
[109.91661835 175.33509827]
[107.40122986 194.76788330]
[91.83721924 206.17785645]
[90.82457733 221.14363098]
[89.81192780 236.10942078]
[88.79928589 251.07519531]
[87.78663635 266.04098511]
[86.77398682 281.00674438]
[98.51227570 290.98266602]
[102.08390045 305.78457642]
[96.32290649 319.68692017]
[83.63223267 327.43838501]
[82.61959076 342.40414429]
[81.60694122 357.36993408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[20 78]
[21 77]
[22 76]
[23 75]
[26 73]
[27 72]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
