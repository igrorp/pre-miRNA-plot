%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUUUAAAUAAAAAUUCAUCUAUUUUCUUUCACAUAUAUAUGUAUAUAUAUAUAUAUAUAUAUCCCUUGGCAAGACCAAGCAGCAACAGAAAGAGGAAGGGAAGGGAAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[26.80904198 514.33483887]
[32.85538101 498.49572754]
[32.85538101 483.49572754]
[32.85538101 468.49572754]
[32.85538101 453.49572754]
[32.85538101 438.49572754]
[32.85538101 423.49572754]
[32.85538101 408.49572754]
[32.85538101 393.49572754]
[25.53823280 390.44094849]
[19.32932091 385.46557617]
[14.72186470 378.94561768]
[12.08717251 371.38043213]
[11.64474773 363.35458374]
[13.44408321 355.49258423]
[17.35963440 348.41043091]
[23.09945488 342.66729736]
[30.22693062 338.72125244]
[38.19396210 336.89300537]
[40.95020676 322.14840698]
[43.70644760 307.40380859]
[41.81883240 300.15988159]
[46.73496628 292.30862427]
[49.87945938 277.64193726]
[53.02395630 262.97521973]
[51.32821274 255.68399048]
[56.44988251 247.96525574]
[59.98043823 233.38665771]
[63.51099014 218.80807495]
[67.04154205 204.22949219]
[70.57209778 189.65090942]
[74.10264587 175.07231140]
[77.63320160 160.49372864]
[81.16375732 145.91514587]
[84.69430542 131.33656311]
[68.10178375 114.09779358]
[66.52377319 90.22319031]
[80.70304108 70.95053864]
[75.28441620 56.96345139]
[69.86579132 42.97636795]
[64.44716644 28.98928452]
[59.02854156 15.00220108]
[53.60991669 1.01511788]
[48.19129181 -12.97196579]
[42.77266693 -26.95904922]
[37.35404205 -40.94613266]
[31.93541718 -54.93321609]
[26.51679230 -68.92029572]
[21.09816742 -82.90737915]
[15.67954254 -96.89446259]
[2.57102251 -106.74833679]
[4.81879520 -122.99270630]
[20.11054420 -128.91676331]
[32.71543121 -118.42633820]
[29.66662598 -102.31308746]
[35.08525085 -88.32600403]
[40.50387573 -74.33892059]
[45.92250061 -60.35184097]
[51.34112549 -46.36475754]
[56.75975037 -32.37767410]
[62.17837524 -18.39059067]
[67.59700012 -4.40350723]
[73.01562500 9.58357620]
[78.43424988 23.57065964]
[83.85287476 37.55774307]
[89.27149963 51.54482651]
[94.69012451 65.53191376]
[104.65402985 65.43724823]
[114.23800659 68.16412354]
[122.65966034 73.48992920]
[134.62991333 64.45040894]
[146.60017395 55.41088867]
[158.57043457 46.37136841]
[170.54069519 37.33184814]
[174.17230225 21.70524025]
[188.71537781 14.93185806]
[203.01370239 22.20766449]
[206.09883118 37.95128250]
[195.60412598 50.08555603]
[179.58021545 49.30210876]
[167.60995483 58.34162903]
[155.63969421 67.38114929]
[143.66943359 76.42066956]
[131.69917297 85.46018982]
[134.14147949 92.88642883]
[134.86825562 100.67012024]
[133.84295654 108.42013550]
[131.11711121 115.74705505]
[126.82768250 122.28271484]
[121.19021606 127.69870758]
[114.48798370 131.72290039]
[107.05776215 134.15306091]
[99.27289581 134.86711121]
[95.74234009 149.44569397]
[92.21179199 164.02427673]
[88.68123627 178.60287476]
[85.15068054 193.18145752]
[81.62013245 207.76004028]
[78.08957672 222.33862305]
[74.55902100 236.91722107]
[71.02847290 251.49580383]
[67.69065857 266.11972046]
[64.54616547 280.78643799]
[61.40166855 295.45312500]
[58.45104599 310.16006470]
[55.69480133 324.90466309]
[52.93856049 339.64926147]
[67.91635895 357.09747314]
[65.62398529 379.72061157]
[47.85538101 393.49572754]
[47.85538101 408.49572754]
[47.85538101 423.49572754]
[47.85538101 438.49572754]
[47.85538101 453.49572754]
[47.85538101 468.49572754]
[47.85538101 483.49572754]
[47.85538101 498.49572754]
[53.90172195 514.33483887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[4 115]
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[19 107]
[20 106]
[21 105]
[23 104]
[24 103]
[25 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
