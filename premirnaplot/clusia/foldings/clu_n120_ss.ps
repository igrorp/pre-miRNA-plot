%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUCAACGCUAUCUCGUGCAGGGCUGUUCUAGGUAGUGUGAGUGACUACUGCGCUCAUCAUGCUCAUUGUUCUGUGAUGAUUGUGAAGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[87.50599670 335.22167969]
[93.55233765 319.38253784]
[93.55233765 304.38253784]
[93.55233765 289.38253784]
[93.55233765 274.38253784]
[93.55233765 259.38253784]
[82.87146759 249.06486511]
[82.65778351 233.85273743]
[93.55233765 222.71960449]
[93.55233765 207.71960449]
[93.55233765 192.71960449]
[85.81504059 179.99234009]
[93.55233765 166.19216919]
[93.55233765 151.19216919]
[93.55233765 136.19216919]
[93.30691528 121.19417572]
[92.81612396 106.20220184]
[89.76444244 101.67688751]
[89.58079529 95.74851990]
[92.81612396 90.22063446]
[93.30691528 75.22866058]
[93.79769897 60.23669434]
[94.28848267 45.24472427]
[94.77927399 30.25275612]
[95.27005768 15.26078701]
[95.76084137 0.26881790]
[84.54282379 -4.87267113]
[75.80136108 -13.53298378]
[70.58529663 -24.63905525]
[69.50878906 -36.82648849]
[72.67905426 -48.60718155]
[79.68626404 -58.55099869]
[89.65631866 -65.45941162]
[101.35986328 -68.50991821]
[103.31775665 -83.38159180]
[105.27565002 -98.25326538]
[107.23354340 -113.12493896]
[97.88536072 -125.58483887]
[100.08279419 -140.63894653]
[112.01901245 -149.47421265]
[113.97690582 -164.34588623]
[115.93479919 -179.21755981]
[117.89269257 -194.08923340]
[119.85058594 -208.96090698]
[121.80847931 -223.83258057]
[123.76637268 -238.70425415]
[121.76081085 -247.82073975]
[126.03935242 -254.02745056]
[119.75949097 -269.17654419]
[129.95242310 -282.02319336]
[146.13253784 -279.35183716]
[151.65510559 -263.91055298]
[140.83900452 -251.58401489]
[138.63804626 -236.74636841]
[136.68014526 -221.87469482]
[134.72225952 -207.00302124]
[132.76437378 -192.13134766]
[130.80647278 -177.25967407]
[128.84858704 -162.38800049]
[126.89068604 -147.51632690]
[136.13345337 -135.89277649]
[134.35972595 -120.78289795]
[122.10521698 -111.16704559]
[120.14732361 -96.29537201]
[118.18943024 -81.42369843]
[116.23153687 -66.55202484]
[130.98669434 -56.41561127]
[138.75361633 -40.19478989]
[137.38655090 -22.17913437]
[127.16744232 -7.17883921]
[110.75281525 0.75960416]
[110.26202393 15.75157261]
[109.77124023 30.74354172]
[109.28045654 45.73551178]
[108.78966522 60.72747803]
[108.29888153 75.71945190]
[107.80809784 90.71141815]
[107.80809784 105.71141815]
[108.29888153 120.70338440]
[111.76268768 129.37139893]
[108.55233765 136.19216919]
[108.55233765 151.19216919]
[108.55233765 166.19216919]
[116.28963470 179.99234009]
[108.55233765 192.71960449]
[108.55233765 207.71960449]
[108.55233765 222.71960449]
[119.44689178 233.85273743]
[119.23320770 249.06486511]
[108.55233765 259.38253784]
[108.55233765 274.38253784]
[108.55233765 289.38253784]
[108.55233765 304.38253784]
[108.55233765 319.38253784]
[114.59867859 335.22167969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[9 87]
[10 86]
[11 85]
[13 83]
[14 82]
[15 81]
[16 79]
[17 78]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[34 66]
[35 65]
[36 64]
[37 63]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
