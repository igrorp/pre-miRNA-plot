%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUAUUGCAGAUUAUAAUGUGCUAUCUUCUAAAAUUAAGGAAAAAUGCAGCUAGAGAGGGACUGAUUUGAUUCUAGUGAUGUCAGAUGUGGUUUUCUGAGGUUUUGGCCAUGAUAUUGGGCUUUGGAUGUGAUUGGAGU\
) } def
/len { sequence length } bind def

/coor [
[79.46253204 634.49340820]
[85.50887299 618.65429688]
[85.50887299 603.65429688]
[85.50887299 588.65429688]
[85.50887299 573.65429688]
[77.77157593 560.92700195]
[85.50887299 547.12683105]
[85.50887299 532.12683105]
[85.50887299 517.12683105]
[85.50887299 502.12683105]
[85.50887299 487.12683105]
[85.50887299 472.12683105]
[76.45299530 467.01770020]
[70.32051086 458.52062988]
[68.29319763 448.15698242]
[70.81020355 437.81765747]
[77.47514343 429.41827393]
[87.11680603 424.54415894]
[88.10470581 409.57672119]
[89.09259796 394.60928345]
[82.21031189 381.40005493]
[90.83969116 368.13943481]
[91.82759094 353.17199707]
[84.94530487 339.96276855]
[93.57468414 326.70214844]
[94.23355103 311.71661377]
[94.56305695 296.72024536]
[94.89257050 281.72387695]
[95.22208405 266.72747803]
[81.79784393 254.36437988]
[81.59135437 235.79843140]
[95.19422913 222.69952393]
[94.86472321 207.70314026]
[94.53520966 192.70677185]
[94.20569611 177.71038818]
[93.87619019 162.71400452]
[93.54667664 147.71762085]
[93.21716309 132.72123718]
[92.88764954 117.72486115]
[82.49225616 107.63120270]
[82.17395782 93.14517975]
[92.11596680 82.60464478]
[91.78645325 67.60826874]
[91.45694733 52.61188889]
[91.12743378 37.61550522]
[90.79792023 22.61912727]
[90.46841431 7.62274647]
[82.42982483 -6.00412750]
[89.88567352 -18.89829636]
[89.55615997 -33.89467621]
[89.22664642 -48.89105606]
[88.89714050 -63.88743591]
[80.85855103 -77.51431274]
[88.31439972 -90.40847778]
[87.98488617 -105.40486145]
[84.64656830 -113.99250793]
[87.81650543 -120.73346710]
[87.81650543 -135.73345947]
[80.07920074 -149.53364563]
[87.81650543 -162.26091003]
[77.22874451 -170.66105652]
[73.49080658 -183.44604492]
[77.75920105 -195.85774231]
[88.25346375 -203.41139221]
[88.58297729 -218.40777588]
[88.91249084 -233.40414429]
[89.07725525 -248.40324402]
[89.07725525 -263.40325928]
[77.72612000 -274.39993286]
[77.55902100 -290.20333862]
[88.67510986 -301.43759155]
[104.47940063 -301.43759155]
[115.59548950 -290.20333862]
[115.42839050 -274.39993286]
[104.07725525 -263.40325928]
[104.07725525 -248.40324402]
[107.24718475 -241.66227722]
[103.90886688 -233.07464600]
[103.57936096 -218.07826233]
[103.24984741 -203.08187866]
[115.37698364 -191.48028564]
[115.39899445 -174.36070251]
[102.81650543 -162.26091003]
[110.55380249 -149.53364563]
[102.81650543 -135.73345947]
[102.81650543 -120.73346710]
[102.98126984 -105.73437500]
[103.31077576 -90.73799133]
[111.32579803 -78.18376160]
[103.89351654 -64.21694946]
[104.22303009 -49.22056961]
[104.55254364 -34.22418976]
[104.88204956 -19.22780800]
[112.89707184 -6.67357540]
[105.46479034 7.29323483]
[105.79430389 22.28961563]
[106.12380981 37.28599548]
[106.45332336 52.28237534]
[106.78283691 67.27875519]
[107.11235046 82.27513885]
[117.50774384 92.36879730]
[117.82604218 106.85482025]
[107.88403320 117.39535522]
[108.21354675 132.39173889]
[108.54305267 147.38810730]
[108.87256622 162.38449097]
[109.20207977 177.38087463]
[109.53158569 192.37725830]
[109.86109924 207.37362671]
[110.19061279 222.37001038]
[120.28800964 228.81808472]
[125.92908478 239.25090027]
[125.79838562 250.99006653]
[120.04557037 261.08551025]
[110.21846008 267.05700684]
[109.88895416 282.05337524]
[109.55944061 297.04974365]
[109.22992706 312.04614258]
[112.12326813 318.13009644]
[111.53910828 323.88131714]
[108.54211426 327.69003296]
[115.35374451 341.96981812]
[106.79502869 354.15988159]
[105.80712891 369.12731934]
[112.61875153 383.40710449]
[104.06003571 395.59716797]
[103.07213593 410.56460571]
[102.08423615 425.53204346]
[116.11670685 439.80963135]
[115.26386261 459.50817871]
[100.50887299 472.12683105]
[100.50887299 487.12683105]
[100.50887299 502.12683105]
[100.50887299 517.12683105]
[100.50887299 532.12683105]
[100.50887299 547.12683105]
[108.24617767 560.92700195]
[100.50887299 573.65429688]
[100.50887299 588.65429688]
[100.50887299 603.65429688]
[100.50887299 618.65429688]
[106.55521393 634.49340820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[4 139]
[5 138]
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[12 131]
[18 128]
[19 127]
[20 126]
[22 124]
[23 123]
[25 121]
[26 118]
[27 117]
[28 116]
[29 115]
[32 110]
[33 109]
[34 108]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[49 93]
[50 92]
[51 91]
[52 90]
[54 88]
[55 87]
[57 86]
[58 85]
[60 83]
[64 80]
[65 79]
[66 78]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
