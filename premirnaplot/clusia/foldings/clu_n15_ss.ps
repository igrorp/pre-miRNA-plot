%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGAGUCAGACUUGGCAGCUCUUAUAACCUGAUACUCUUCCCAUAAGCUUGCUAUCUCUUCUUGG\
) } def
/len { sequence length } bind def

/coor [
[78.77175903 238.94752502]
[84.81809235 223.10839844]
[84.81809235 208.10839844]
[84.81809235 193.10839844]
[84.81809235 178.10839844]
[84.81809235 163.10839844]
[82.25970459 160.22039795]
[81.17422485 155.82089233]
[82.31817627 150.72257996]
[86.00060272 146.07205200]
[88.07295227 131.21589661]
[90.14529419 116.35974121]
[81.49739075 104.73390198]
[83.49921417 90.38333130]
[94.99855042 81.56791687]
[97.07089233 66.71176147]
[99.14324188 51.85560226]
[101.21558380 36.99944687]
[103.28792572 22.14328957]
[105.36027527 7.28713322]
[98.14073181 -3.66877222]
[100.39564514 -16.18250656]
[110.33143616 -23.44969559]
[113.08768463 -38.19429398]
[115.84392548 -52.93888855]
[118.60016632 -67.68348694]
[121.35640717 -82.42808533]
[109.13606262 -91.50687408]
[102.09805298 -104.93644714]
[101.59088898 -120.02826691]
[107.66163635 -133.78715515]
[119.05718994 -143.50573730]
[133.48254395 -147.29713440]
[136.23878479 -162.04173279]
[133.20582581 -178.72218323]
[148.39479065 -186.25422668]
[159.83720398 -173.74392700]
[150.98338318 -159.28549194]
[148.22714233 -144.54089355]
[160.30876160 -135.79447937]
[167.42404175 -122.61562347]
[168.11456299 -107.59283447]
[162.18984985 -93.70333862]
[150.77578735 -83.72306061]
[136.10101318 -79.67183685]
[133.34475708 -64.92724609]
[130.58851624 -50.18264771]
[127.83227539 -35.43804932]
[125.07603455 -20.69345284]
[131.88230896 -4.67931032]
[120.21643066 9.35947895]
[118.14408875 24.21563530]
[116.07173920 39.07179260]
[113.99939728 53.92794800]
[111.92704773 68.78410339]
[109.85470581 83.64025879]
[118.50260925 95.26609802]
[116.50078583 109.61666870]
[105.00144958 118.43208313]
[102.92910767 133.28823853]
[100.85675812 148.14439392]
[99.81809235 163.10839844]
[99.81809235 178.10839844]
[99.81809235 193.10839844]
[99.81809235 208.10839844]
[99.81809235 223.10839844]
[105.86443329 238.94752502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[10 61]
[11 60]
[12 59]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[33 39]
[34 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
