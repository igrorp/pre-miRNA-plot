%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGAGAGAAGAGAGAGAACCUGGUUUAGAGUGGAAUAGGUGGGCGCUUUUGACUAGACAAACCUGGGUCUUCUUUUCUCCAUCUUC\
) } def
/len { sequence length } bind def

/coor [
[83.26513672 416.44146729]
[89.31147766 400.60232544]
[89.31147766 385.60232544]
[89.31147766 370.60232544]
[89.31147766 355.60232544]
[78.63060760 345.28466797]
[78.41692352 330.07250977]
[89.31147766 318.93939209]
[89.31147766 303.93939209]
[89.31147766 288.93939209]
[89.31147766 273.93939209]
[89.31147766 258.93939209]
[89.31147766 243.93939209]
[89.31147766 228.93939209]
[89.31147766 213.93939209]
[89.31147766 198.93939209]
[86.09288788 192.10237122]
[89.58239746 183.41819763]
[90.10589600 168.42732239]
[90.62938690 153.43646240]
[83.34097290 140.44691467]
[91.55518341 126.92517853]
[92.07867432 111.93431854]
[85.68478394 99.50009918]
[92.93046570 87.54219055]
[93.45395660 72.55132294]
[93.97744751 57.56046295]
[94.50093842 42.56960297]
[95.02443695 27.57873917]
[81.60904694 14.45017624]
[81.81752777 -4.00580502]
[95.06851959 -16.39972115]
[94.54502869 -31.39058304]
[94.02153778 -46.38144684]
[85.80732727 -59.90318298]
[93.09574127 -72.89273071]
[92.57225037 -87.88359070]
[92.04875946 -102.87445068]
[88.70169830 -108.98754883]
[89.06336212 -114.93864441]
[92.04875946 -118.92144012]
[92.57225037 -133.91230774]
[93.09574127 -148.90316772]
[84.92324829 -163.12084961]
[93.38282776 -177.16960144]
[109.77198029 -176.59727478]
[117.23096466 -161.99263000]
[108.08660126 -148.37966919]
[107.56311035 -133.38880920]
[107.03961945 -118.39794922]
[107.03961945 -103.39794922]
[107.56311035 -88.40708160]
[108.08660126 -73.41622162]
[116.26336670 -60.96673203]
[109.01239777 -46.90493774]
[109.53588867 -31.91407585]
[110.05937958 -16.92321205]
[120.09239197 -10.97612476]
[125.98148346 -0.76871079]
[126.11085510 11.13628769]
[120.32841492 21.68197441]
[110.01529694 28.10223198]
[109.49180603 43.09309387]
[108.96831512 58.08395767]
[108.44481659 73.07482147]
[107.92132568 88.06568146]
[114.31521606 100.49990082]
[107.06953430 112.45780945]
[106.54604340 127.44867706]
[113.79701233 141.51046753]
[105.62024689 153.95996094]
[105.09675598 168.95082092]
[104.57326508 183.94168091]
[104.31147766 198.93939209]
[104.31147766 213.93939209]
[104.31147766 228.93939209]
[104.31147766 243.93939209]
[104.31147766 258.93939209]
[104.31147766 273.93939209]
[104.31147766 288.93939209]
[104.31147766 303.93939209]
[104.31147766 318.93939209]
[115.20603180 330.07250977]
[114.99234772 345.28466797]
[104.31147766 355.60232544]
[104.31147766 370.60232544]
[104.31147766 385.60232544]
[104.31147766 400.60232544]
[110.35781860 416.44146729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[18 73]
[19 72]
[20 71]
[22 69]
[23 68]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[32 57]
[33 56]
[34 55]
[36 53]
[37 52]
[38 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
