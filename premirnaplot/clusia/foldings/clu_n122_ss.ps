%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGCGUUGGUGGUGGCAGGGUUGUGUUCAAAUGUGCUUUAUUCGUUUUUGUAUUUGUAAAAUCUGCGCUAGUAUUCGUUGUGGAA\
) } def
/len { sequence length } bind def

/coor [
[87.69712830 289.81805420]
[93.74346924 273.97891235]
[93.74346924 258.97891235]
[93.74346924 243.97891235]
[93.74346924 228.97891235]
[93.74346924 213.97891235]
[93.74346924 198.97891235]
[86.00617218 186.25164795]
[93.74346924 172.45146179]
[93.74346924 157.45146179]
[93.74346924 142.45146179]
[93.47573853 127.45385742]
[92.94035339 112.46341705]
[85.68518066 100.51125336]
[92.06920624 88.07196808]
[91.53382111 73.08152771]
[90.99843597 58.09108353]
[90.46305084 43.10064316]
[80.31092072 27.86539459]
[88.86376190 12.65400219]
[87.79367828 -2.30777979]
[86.72358704 -17.26956177]
[85.65350342 -32.23134232]
[84.58341217 -47.19312668]
[72.96964264 -52.47633743]
[64.82247162 -62.20036697]
[61.69081497 -74.41829681]
[64.12754059 -86.71911621]
[71.59304810 -96.70346069]
[82.57318878 -102.45163727]
[82.57318878 -117.45163727]
[82.57318878 -132.45164490]
[79.43498230 -138.69064331]
[80.01116180 -144.63609314]
[83.14678955 -148.51217651]
[84.21688080 -163.47395325]
[85.28696442 -178.43572998]
[86.35705566 -193.39752197]
[72.90225983 -200.53112793]
[63.51730728 -212.52456665]
[59.82819748 -227.29989624]
[62.47409058 -242.29719543]
[70.99656677 -254.91810608]
[83.91905975 -262.97595215]
[99.00266266 -265.07470703]
[113.63405609 -260.85070801]
[125.27826691 -251.03579712]
[131.91786194 -237.33049011]
[132.40248108 -222.10928345]
[126.64817047 -208.00935364]
[115.65189362 -197.47361755]
[101.31883240 -192.32742310]
[100.24874878 -177.36564636]
[99.17865753 -162.40386963]
[98.10857391 -147.44207764]
[97.57318878 -132.45164490]
[97.57318878 -117.45163727]
[97.57318878 -102.45163727]
[112.23418427 -92.93912506]
[118.46523285 -76.44599915]
[113.67338562 -59.31849289]
[99.54519653 -48.26321411]
[100.61528015 -33.30142975]
[101.68537140 -18.33964920]
[102.75545502 -3.37786746]
[103.82554626 11.58391380]
[112.83665466 19.86536026]
[113.72542572 32.47652817]
[105.45349121 42.56525803]
[105.98887634 57.55569839]
[106.52426147 72.54614258]
[107.05964661 87.53658295]
[114.31481934 99.48874664]
[107.93079376 111.92803192]
[108.46617889 126.91847229]
[111.96505737 135.60850525]
[108.74346924 142.45146179]
[108.74346924 157.45146179]
[108.74346924 172.45146179]
[116.48077393 186.25164795]
[108.74346924 198.97891235]
[108.74346924 213.97891235]
[108.74346924 228.97891235]
[108.74346924 243.97891235]
[108.74346924 258.97891235]
[108.74346924 273.97891235]
[114.78981018 289.81805420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[9 79]
[10 78]
[11 77]
[12 75]
[13 74]
[15 72]
[16 71]
[17 70]
[18 69]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[30 58]
[31 57]
[32 56]
[35 55]
[36 54]
[37 53]
[38 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
