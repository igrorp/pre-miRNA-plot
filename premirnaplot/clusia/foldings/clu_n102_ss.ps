%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAAGGGGUGGGACUGGGGCUUCGGAAUGAGUGCACUUGCGUUGUUCUUGGGUGUGAUCGUUUGU\
) } def
/len { sequence length } bind def

/coor [
[78.29315186 334.25418091]
[65.74525452 322.85299683]
[73.22724915 307.63931274]
[74.61127472 292.70330811]
[75.99530029 277.76730347]
[77.37932587 262.83129883]
[78.76335144 247.89527893]
[72.23338318 234.50839233]
[81.21099854 221.48098755]
[82.59502411 206.54498291]
[83.97904968 191.60896301]
[77.44908142 178.22207642]
[86.42668915 165.19468689]
[79.89672089 151.80780029]
[88.87433624 138.78039551]
[90.25836182 123.84438324]
[91.64238739 108.90837097]
[92.33513641 93.92437744]
[92.33513641 78.92437744]
[92.33513641 63.92438126]
[92.33513641 48.92438126]
[92.33513641 33.92438126]
[81.44058228 22.79125404]
[81.65426636 7.57912159]
[92.33513641 -2.73855996]
[92.33513641 -17.73855972]
[84.59783936 -31.53873253]
[92.33513641 -44.26600266]
[92.33513641 -59.26600266]
[91.98867035 -74.26200104]
[91.29592133 -89.24599457]
[81.99841309 -102.75482178]
[89.29198456 -117.44277191]
[105.67362976 -118.20014191]
[114.29132080 -104.24781799]
[106.27991486 -89.93875122]
[106.97266388 -74.95475769]
[110.55027771 -68.19100189]
[107.33513641 -59.26600266]
[107.33513641 -44.26600266]
[115.07244110 -31.53873253]
[107.33513641 -17.73855972]
[107.33513641 -2.73855996]
[118.01601410 7.57912159]
[118.22969055 22.79125404]
[107.33513641 33.92438126]
[107.33513641 48.92438126]
[107.33513641 63.92438126]
[107.33513641 78.92437744]
[107.33513641 93.92437744]
[110.33729553 98.67857361]
[110.25236511 104.79499054]
[106.57839966 110.29239655]
[105.19437408 125.22840881]
[103.81034851 140.16442871]
[110.24132538 154.61962891]
[101.36270142 166.57870483]
[107.79367828 181.03392029]
[98.91506195 192.99299622]
[97.53103638 207.92900085]
[96.14701080 222.86502075]
[102.57798767 237.32022095]
[93.69936371 249.27929688]
[92.31533813 264.21530151]
[90.93131256 279.15133667]
[89.54728699 294.08734131]
[88.16326141 309.02334595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[9 61]
[10 60]
[11 59]
[13 57]
[15 55]
[16 54]
[17 53]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[25 43]
[26 42]
[28 40]
[29 39]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
