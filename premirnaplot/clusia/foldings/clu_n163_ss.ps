%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGAGGCUGAAUUGAAGAACAAAGAGAAGCUUAACGCACUUGAGGAUUCCACGUAGUUUUAUCUUAUCAAUUUUCCUUCUUUUUGUUUUUGGUCAAGUUUUGUU\
) } def
/len { sequence length } bind def

/coor [
[85.32030487 284.00765991]
[91.36663818 268.16851807]
[91.36663818 253.16853333]
[91.36663818 238.16853333]
[91.36663818 223.16853333]
[91.36663818 208.16853333]
[91.36663818 193.16853333]
[91.36663818 178.16853333]
[91.36663818 163.16853333]
[79.81723785 156.29602051]
[73.15415192 144.49945068]
[73.23200989 130.84263611]
[80.13828278 118.93458557]
[92.14166260 111.97589111]
[85.68234253 99.57553101]
[92.86492157 87.57961273]
[93.30942535 72.58619690]
[93.75392151 57.59278488]
[94.19842529 42.59937286]
[94.64292145 27.60595894]
[95.08742523 12.61254692]
[95.53192139 -2.38086534]
[95.97642517 -17.37427711]
[96.42092133 -32.36769104]
[96.86542511 -47.36110306]
[97.30992126 -62.35451508]
[97.75442505 -77.34793091]
[98.19892120 -92.34133911]
[98.64342499 -107.33475494]
[99.08792114 -122.32816315]
[89.14835358 -111.09406281]
[75.38564301 -105.12852478]
[60.39170837 -105.55502319]
[46.99034882 -112.29324341]
[37.70543671 -124.07417297]
[34.28559875 -138.67912292]
[37.37488174 -153.35755920]
[46.39149094 -165.34509277]
[59.63732910 -172.38410950]
[74.61782074 -173.14895630]
[88.51168823 -167.49560547]
[98.70231628 -156.48873901]
[103.27066803 -142.19943237]
[108.90808105 -156.09977722]
[114.54550171 -170.00012207]
[120.18291473 -183.90045166]
[125.82032776 -197.80079651]
[131.45773315 -211.70114136]
[137.09515381 -225.60148621]
[128.11808777 -235.13032532]
[123.48202515 -247.32302856]
[123.85749054 -260.31481934]
[129.15144348 -272.13345337]
[138.52690125 -280.99841309]
[150.53506470 -285.58944702]
[163.33914185 -285.24279785]
[169.79011536 -298.78479004]
[164.27162170 -313.59429932]
[170.91726685 -327.93344116]
[185.78430176 -333.29504395]
[200.05238342 -326.49816895]
[205.25650024 -311.57528687]
[198.30915833 -297.37985229]
[183.33207703 -292.33380127]
[176.88110352 -278.79183960]
[187.11666870 -265.11465454]
[189.12150574 -248.06108093]
[182.26718140 -232.22163391]
[168.32191467 -221.90454102]
[150.99549866 -219.96408081]
[145.35807800 -206.06373596]
[139.72067261 -192.16339111]
[134.08325195 -178.26304626]
[128.44584656 -164.36270142]
[122.80842590 -150.46235657]
[117.17101288 -136.56201172]
[114.08133698 -121.88366699]
[113.63683319 -106.89025116]
[113.19233704 -91.89684296]
[112.74783325 -76.90342712]
[112.30333710 -61.91001511]
[111.85883331 -46.91660309]
[111.41433716 -31.92319107]
[110.96983337 -16.92977715]
[110.52533722 -1.93636537]
[110.08083344 13.05704689]
[109.63633728 28.05045891]
[109.19183350 43.04387283]
[108.74733734 58.03728485]
[108.30283356 73.03070068]
[107.85833740 88.02410889]
[114.31765747 100.42446899]
[107.13507843 112.42038727]
[120.61584473 122.50778961]
[125.43738556 138.46726990]
[119.90747833 154.02015686]
[106.36663818 163.16853333]
[106.36663818 178.16853333]
[106.36663818 193.16853333]
[106.36663818 208.16853333]
[106.36663818 223.16853333]
[106.36663818 238.16853333]
[106.36663818 253.16853333]
[106.36663818 268.16851807]
[112.41297913 284.00765991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[14 93]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
