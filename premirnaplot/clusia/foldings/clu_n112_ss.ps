%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGAAGGCAUGGGCGAGGGAAGCGGCGACAAGGCCGGAGGGGGUGGUGGAACCGUUGUCUGUGAGUUUGUUG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 408.87222290]
[92.50000000 393.03311157]
[92.50000000 378.03311157]
[92.50000000 363.03311157]
[92.50000000 348.03311157]
[92.50000000 333.03311157]
[92.50000000 318.03311157]
[81.81912994 307.71542358]
[81.60544586 292.50329590]
[92.50000000 281.37017822]
[92.50000000 266.37017822]
[92.50000000 251.37016296]
[92.50000000 236.37016296]
[92.50000000 221.37016296]
[92.50000000 206.37016296]
[92.50000000 191.37016296]
[92.50000000 176.37016296]
[92.50000000 161.37016296]
[84.76270294 148.64289856]
[92.50000000 134.84272766]
[92.50000000 119.84272003]
[82.42359924 111.87660217]
[78.79183960 99.55575562]
[82.93635559 87.39779663]
[93.33750916 79.86061859]
[86.18488312 65.74854279]
[94.44835663 53.35644150]
[95.07649231 38.36959839]
[87.92387390 24.25752831]
[96.18734741 11.86542416]
[96.81548309 -3.12141776]
[86.95852661 -10.37519741]
[82.00748444 -21.43405724]
[83.13934326 -33.37533569]
[89.94052887 -43.10738754]
[100.54533386 -48.17001724]
[102.42533112 -63.05173874]
[98.41184235 -79.52378082]
[113.12910461 -87.94033813]
[125.29088593 -76.12816620]
[117.30705261 -61.17173767]
[115.42705536 -46.29001999]
[127.49888611 -32.82390594]
[126.16844940 -14.47588634]
[111.80232239 -2.49328303]
[111.17419434 12.49355984]
[118.37174225 25.53367233]
[110.06333923 38.99773407]
[109.43520355 53.98457718]
[116.63275146 67.02468872]
[108.32434845 80.48875427]
[119.73701477 92.22607422]
[119.39416504 108.59360504]
[107.50000000 119.84272003]
[107.50000000 134.84272766]
[115.23729706 148.64289856]
[107.50000000 161.37016296]
[107.50000000 176.37016296]
[107.50000000 191.37016296]
[107.50000000 206.37016296]
[107.50000000 221.37016296]
[107.50000000 236.37016296]
[107.50000000 251.37016296]
[107.50000000 266.37017822]
[107.50000000 281.37017822]
[118.39455414 292.50329590]
[118.18087006 307.71542358]
[107.50000000 318.03311157]
[107.50000000 333.03311157]
[107.50000000 348.03311157]
[107.50000000 363.03311157]
[107.50000000 378.03311157]
[107.50000000 393.03311157]
[113.54634094 408.87222290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[20 55]
[21 54]
[25 51]
[27 49]
[28 48]
[30 46]
[31 45]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
