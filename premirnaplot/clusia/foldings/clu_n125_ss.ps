%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCGUCGUCGCGGGUGUCUGCAGAGAAGGAAGAUGGAGGAAAGGGAUGGGCGUGAUCGUCGGCGGCAGCGGCAGCGGCGGCGGCCA\
) } def
/len { sequence length } bind def

/coor [
[86.47808075 355.83612061]
[92.52441406 339.99697876]
[92.52441406 324.99697876]
[92.52441406 309.99697876]
[92.52441406 294.99697876]
[92.52441406 279.99697876]
[92.52441406 264.99697876]
[92.52441406 249.99699402]
[92.52441406 234.99699402]
[92.52441406 219.99699402]
[92.52441406 204.99699402]
[92.52441406 189.99699402]
[92.52441406 174.99699402]
[84.78711700 162.26971436]
[92.52441406 148.46954346]
[84.78711700 135.74227905]
[92.52441406 121.94210052]
[92.52441406 106.94210052]
[89.31704712 99.33468628]
[92.79849243 91.41506195]
[93.32785797 76.42440796]
[93.85723114 61.43375015]
[94.38660431 46.44309616]
[80.97946167 36.30762482]
[76.22299957 20.35946274]
[81.77693176 4.84609795]
[95.30131531 -4.27524090]
[95.30131531 -19.27523994]
[86.67599487 -29.05976105]
[87.11155701 -41.69191360]
[95.81649780 -50.29072952]
[96.34587097 -65.28138733]
[85.85100555 -76.79206085]
[86.60140991 -91.98717499]
[97.63975525 -101.92148590]
[98.16912842 -116.91214752]
[98.69850159 -131.90280151]
[84.73644257 -137.85472107]
[73.87002563 -148.45120239]
[67.56884766 -162.25915527]
[66.68508148 -177.41116333]
[71.33824921 -191.85804749]
[80.89906311 -203.64598083]
[94.07448578 -211.18074036]
[109.08265686 -213.44332886]
[123.89383698 -210.12771606]
[136.50494385 -201.68234253]
[145.21043396 -189.24937439]
[148.83294678 -174.51023865]
[146.88258362 -159.45831299]
[139.62309265 -146.12924194]
[128.03628540 -136.32565308]
[113.68915558 -131.37342834]
[113.15978241 -116.38277435]
[112.63041687 -101.39211273]
[122.94050598 -90.70391846]
[122.61719513 -75.49372101]
[111.33652496 -64.75201416]
[110.80715179 -49.76136017]
[119.90270233 -34.86587524]
[110.30131531 -19.27523994]
[110.30131531 -4.27524090]
[121.87619781 2.62076473]
[128.53593445 14.45838070]
[128.41860962 28.14925194]
[121.44685364 40.05910492]
[109.37725830 46.97246933]
[108.84788513 61.96312332]
[108.31851959 76.95378113]
[107.78914642 91.94443512]
[107.52441406 106.94210052]
[107.52441406 121.94210052]
[115.26171875 135.74227905]
[107.52441406 148.46954346]
[115.26171875 162.26971436]
[107.52441406 174.99699402]
[107.52441406 189.99699402]
[107.52441406 204.99699402]
[107.52441406 219.99699402]
[107.52441406 234.99699402]
[107.52441406 249.99699402]
[107.52441406 264.99697876]
[107.52441406 279.99697876]
[107.52441406 294.99697876]
[107.52441406 309.99697876]
[107.52441406 324.99697876]
[107.52441406 339.99697876]
[113.57075500 355.83612061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[15 74]
[17 72]
[18 71]
[20 70]
[21 69]
[22 68]
[23 67]
[27 62]
[28 61]
[31 59]
[32 58]
[35 55]
[36 54]
[37 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
