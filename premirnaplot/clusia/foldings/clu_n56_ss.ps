%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUGGCUAAGAAGUAUAUAGAUCAUUGUUUUAUAUUGAGGUUGUUGGAUUUGUUUGAUUCCGAGGACCCGAGGGAGAGGGAGUACUUGAAGGGGUUGCUG\
) } def
/len { sequence length } bind def

/coor [
[82.23358917 383.17248535]
[88.27993011 367.33334351]
[88.27993011 352.33334351]
[88.27993011 337.33334351]
[80.54262543 324.60607910]
[88.27993011 310.80590820]
[80.54262543 298.07861328]
[88.27993011 284.27844238]
[88.27993011 269.27844238]
[74.74159241 260.13421631]
[69.20800781 244.58732605]
[74.01961517 228.62954712]
[87.48917389 218.53477478]
[87.03173065 203.54176331]
[86.57429504 188.54873657]
[86.11685181 173.55570984]
[85.65940857 158.56268311]
[85.20196533 143.56967163]
[74.62884521 154.20964050]
[59.86014557 156.83366394]
[46.26894379 150.48707581]
[38.79993057 137.47885132]
[40.17044830 122.54159546]
[49.88187790 111.10970306]
[64.40105438 107.34228516]
[78.44567871 112.60997009]
[86.90620422 124.99665833]
[90.08451843 110.33724976]
[86.00129700 96.96492767]
[95.25606537 86.48443604]
[98.43438721 71.82502747]
[101.61270142 57.16561508]
[104.79102325 42.50620651]
[94.62830353 30.92927551]
[93.24725342 15.76530266]
[100.96878815 2.84857273]
[114.65181732 -2.97489476]
[117.83013153 -17.63430405]
[121.00845337 -32.29371262]
[119.76273346 -41.51945496]
[124.51370239 -47.34852600]
[128.13758850 -61.90419388]
[131.76148987 -76.45985413]
[135.38539124 -91.01552582]
[131.21130371 -106.27617645]
[141.79423523 -116.75716400]
[145.41813660 -131.31282043]
[149.04202271 -145.86848450]
[152.66592407 -160.42416382]
[156.28981018 -174.97982788]
[152.11573792 -190.24047852]
[162.69866943 -200.72146606]
[166.32255554 -215.27713013]
[161.27938843 -230.88156128]
[172.47094727 -242.86827087]
[188.38430786 -238.90635681]
[192.64918518 -223.07148743]
[180.87821960 -211.65322876]
[177.25433350 -197.09756470]
[181.68760681 -182.87802124]
[170.84547424 -171.35592651]
[167.22158813 -156.80026245]
[163.59768677 -142.24459839]
[159.97380066 -127.68893433]
[156.34989929 -113.13326263]
[160.78318787 -98.91372681]
[149.94105530 -87.39162445]
[146.31715393 -72.83596039]
[142.69326782 -58.28029633]
[139.06936646 -43.72463226]
[135.66786194 -29.11539650]
[132.48954773 -14.45598602]
[129.31123352 0.20342351]
[139.35380554 11.17085838]
[141.03248596 26.12565613]
[133.49523926 39.35604858]
[119.45043182 45.68452454]
[116.27211761 60.34393311]
[113.09379578 75.00334167]
[109.91548157 89.66275024]
[113.99870300 103.03507233]
[104.74393463 113.51556396]
[101.56561279 128.17497253]
[100.19498444 143.11222839]
[100.65242767 158.10523987]
[101.10987091 173.09826660]
[101.56731415 188.09129333]
[102.02475739 203.08432007]
[102.48220062 218.07734680]
[114.49569702 225.02915955]
[121.41194916 236.93750000]
[121.49581146 250.59953308]
[114.83322144 262.40237427]
[103.27993011 269.27844238]
[103.27993011 284.27844238]
[111.01722717 298.07861328]
[103.27993011 310.80590820]
[111.01722717 324.60607910]
[103.27993011 337.33334351]
[103.27993011 352.33334351]
[103.27993011 367.33334351]
[109.32626343 383.17248535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 101]
[3 100]
[4 99]
[6 97]
[8 95]
[9 94]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[18 84]
[27 83]
[28 82]
[30 80]
[31 79]
[32 78]
[33 77]
[37 73]
[38 72]
[39 71]
[41 70]
[42 69]
[43 68]
[44 67]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
