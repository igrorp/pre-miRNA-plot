%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAGGAGGAGGAGAAGGAGGAGGAAGGGGGUGGCGCCGUUUGGGAUAGGGAGGGUGGGAGGAGAGGUAGGGUUUAUCUCUCUUGCGACUCAUUGGAUUAGGUUUGAUUUUUUGUUUUGUUUUUGUUUUUCUUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 650.30395508]
[92.50000000 634.46478271]
[92.50000000 619.46478271]
[92.50000000 604.46478271]
[92.50000000 589.46478271]
[92.50000000 574.46478271]
[92.50000000 559.46478271]
[92.50000000 544.46478271]
[92.50000000 529.46478271]
[92.50000000 514.46478271]
[92.50000000 499.46478271]
[92.50000000 484.46478271]
[92.50000000 469.46478271]
[84.76270294 456.73751831]
[92.50000000 442.93734741]
[92.50000000 427.93734741]
[92.50000000 412.93734741]
[92.50000000 397.93734741]
[92.50000000 382.93734741]
[84.76270294 370.21008301]
[92.50000000 356.40991211]
[92.50000000 341.40991211]
[92.50000000 326.40991211]
[92.50000000 311.40991211]
[84.76270294 298.68264771]
[92.50000000 284.88247681]
[92.50000000 269.88247681]
[92.50000000 254.88246155]
[92.50000000 239.88246155]
[92.50000000 224.88246155]
[92.50000000 209.88246155]
[80.36157990 201.29196167]
[75.55226898 187.03240967]
[80.11502075 172.50538635]
[92.50000000 163.34468079]
[92.50000000 148.34468079]
[92.50000000 133.34468079]
[65.77265930 118.12834167]
[59.72850800 84.12983704]
[45.61416245 79.05191803]
[30.54540634 84.55755615]
[16.92123795 76.08633423]
[15.19295502 60.13664627]
[26.68634796 48.94372559]
[42.58467102 51.09382629]
[50.69208908 64.93756866]
[64.80643463 70.01549530]
[71.25944519 66.19337463]
[57.23609924 60.86928940]
[52.65507889 46.58593369]
[60.96590424 34.09873581]
[75.91049194 32.81061172]
[86.23550415 43.69152451]
[84.16546631 58.54912186]
[90.61847687 54.72699738]
[92.94848633 39.90906525]
[95.27850342 25.09113693]
[97.60851288 10.27320671]
[92.10876465 -4.56132507]
[101.72912598 -15.93224716]
[96.22937775 -30.76677895]
[105.84973907 -42.13770294]
[108.17974854 -56.95563126]
[110.50976562 -71.77355957]
[112.83977509 -86.59149170]
[115.16978455 -101.40942383]
[117.49979401 -116.22734833]
[119.82980347 -131.04528809]
[122.15981293 -145.86320496]
[124.48983002 -160.68113708]
[126.81983948 -175.49906921]
[118.57584381 -189.26191711]
[124.33075714 -204.23725891]
[139.66990662 -208.93727112]
[152.82640076 -199.75653076]
[153.70770264 -183.73770142]
[141.63777161 -173.16906738]
[139.30775452 -158.35113525]
[136.97775269 -143.53320312]
[134.64773560 -128.71527100]
[132.31771851 -113.89733887]
[129.98771667 -99.07941437]
[127.65769958 -84.26148224]
[125.32769012 -69.44355011]
[122.99768066 -54.62562180]
[120.66767120 -39.80768967]
[126.33407593 -26.03303719]
[116.54705811 -13.60223675]
[122.21346283 0.17241794]
[112.42643738 12.60321808]
[110.09642792 27.42114830]
[107.76641846 42.23907852]
[105.43640900 57.05700684]
[115.74705505 60.57044601]
[124.66040802 66.46047974]
[131.65553284 74.25686646]
[136.35612488 83.38279724]
[138.55004883 93.19685364]
[138.19712830 103.03776550]
[135.42536926 112.26881409]
[130.51586914 120.31906891]
[123.87823486 126.71865082]
[116.01818848 131.12585449]
[107.50000000 133.34468079]
[107.50000000 148.34468079]
[107.50000000 163.34468079]
[119.88497925 172.50538635]
[124.44773102 187.03240967]
[119.63842010 201.29196167]
[107.50000000 209.88246155]
[107.50000000 224.88246155]
[107.50000000 239.88246155]
[107.50000000 254.88246155]
[107.50000000 269.88247681]
[107.50000000 284.88247681]
[115.23729706 298.68264771]
[107.50000000 311.40991211]
[107.50000000 326.40991211]
[107.50000000 341.40991211]
[107.50000000 356.40991211]
[115.23729706 370.21008301]
[107.50000000 382.93734741]
[107.50000000 397.93734741]
[107.50000000 412.93734741]
[107.50000000 427.93734741]
[107.50000000 442.93734741]
[115.23729706 456.73751831]
[107.50000000 469.46478271]
[107.50000000 484.46478271]
[107.50000000 499.46478271]
[107.50000000 514.46478271]
[107.50000000 529.46478271]
[107.50000000 544.46478271]
[107.50000000 559.46478271]
[107.50000000 574.46478271]
[107.50000000 589.46478271]
[107.50000000 604.46478271]
[107.50000000 619.46478271]
[107.50000000 634.46478271]
[113.54634094 650.30395508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[21 120]
[22 119]
[23 118]
[24 117]
[26 115]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[35 106]
[36 105]
[37 104]
[39 47]
[40 46]
[55 93]
[56 92]
[57 91]
[58 90]
[60 88]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
