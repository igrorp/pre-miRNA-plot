%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGAGAUGUUGUGUUGUUGUCAAAGGAAGUAGCUGUUGUUGCUGUUGAAGGGGAUGCAGCAGAUCUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[105.79458618 337.83505249]
[111.84092712 321.99594116]
[111.84092712 306.99594116]
[111.84092712 291.99594116]
[111.84092712 276.99594116]
[111.51818848 261.99942017]
[110.87284851 247.01329041]
[109.58338165 232.06881714]
[107.65216064 217.19366455]
[105.72093201 202.31849670]
[103.78971100 187.44334412]
[101.85848999 172.56819153]
[99.92726898 157.69302368]
[97.99604034 142.81787109]
[96.06481934 127.94270325]
[94.13359833 113.06754303]
[85.79526520 101.84418488]
[90.99124146 88.86367798]
[89.06002045 73.98851776]
[79.61036682 61.29936218]
[85.64466095 47.68185425]
[83.71343994 32.80669403]
[81.78221130 17.93153381]
[79.85099030 3.05637383]
[71.21191406 -1.93547499]
[66.07942200 -10.32728100]
[65.58544922 -20.01093864]
[69.71587372 -28.62771034]
[77.34640503 -34.14274979]
[77.34640503 -49.14274979]
[77.34640503 -64.14275360]
[77.34640503 -79.14275360]
[77.34640503 -94.14275360]
[77.34640503 -109.14275360]
[68.68270111 -123.06655121]
[76.64683533 -137.40199280]
[93.04598236 -137.40199280]
[101.01010895 -123.06655121]
[92.34640503 -109.14275360]
[92.34640503 -94.14275360]
[92.34640503 -79.14275360]
[92.34640503 -64.14275360]
[92.34640503 -49.14274979]
[92.34640503 -34.14274979]
[104.50521851 -17.69519043]
[94.72615051 1.12515116]
[96.65737152 16.00031090]
[98.58859253 30.87547112]
[100.51982117 45.75062943]
[109.83133698 57.37581253]
[103.93518066 72.05729675]
[105.86640167 86.93245697]
[114.20473480 98.15581512]
[109.00875854 111.13632202]
[110.93997955 126.01148224]
[112.87120056 140.88664246]
[114.80242920 155.76179504]
[116.73365021 170.63696289]
[118.66487122 185.51211548]
[120.59609222 200.38728333]
[122.52731323 215.26243591]
[124.45854187 230.13760376]
[128.44953918 236.03100586]
[128.59048462 242.10714722]
[125.85896301 246.36796570]
[126.50429535 261.35406494]
[130.09031677 270.09799194]
[126.84092712 276.99594116]
[126.84092712 291.99594116]
[126.84092712 306.99594116]
[126.84092712 321.99594116]
[132.88726807 337.83505249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 66]
[7 65]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[18 52]
[19 51]
[21 49]
[22 48]
[23 47]
[24 46]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
