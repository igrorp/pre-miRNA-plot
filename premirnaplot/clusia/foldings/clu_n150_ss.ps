%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGGAGGAUCUGAUUUAGGAGCUUCCCUGUUCCCAGAAAUGGGUUUGAAUGGCUUGGGUGGAACUGGUGGUGGCUUAUUUGGAUCUGGAGGACUUCCAG\
) } def
/len { sequence length } bind def

/coor [
[102.85960388 466.03720093]
[88.89657593 458.13699341]
[86.50980377 442.27246094]
[97.53020477 430.61355591]
[98.45362091 415.64199829]
[99.37703705 400.67044067]
[100.30044556 385.69891357]
[101.22386169 370.72735596]
[102.14727783 355.75579834]
[92.18026733 339.30737305]
[103.12004852 322.51458740]
[103.12004852 307.51458740]
[103.12004852 292.51458740]
[102.88906097 277.51635742]
[102.42713165 262.52349854]
[101.96520996 247.53059387]
[101.50328064 232.53770447]
[101.04135895 217.54483032]
[100.57942963 202.55194092]
[100.11750793 187.55905151]
[99.19409180 172.58750916]
[97.81006622 157.65148926]
[96.42604065 142.71548462]
[95.04201508 127.77946472]
[93.65798950 112.84345245]
[85.73715973 101.32164764]
[91.40599823 88.54057312]
[90.02197266 73.60456085]
[88.40810394 58.69163132]
[86.56478119 43.80532074]
[84.49243927 28.94916534]
[82.19155884 14.12668419]
[79.89068604 -0.69579810]
[77.58981323 -15.51828003]
[75.28893280 -30.34076309]
[64.05970001 -33.82751465]
[55.03736496 -41.28621674]
[49.54998779 -51.56777573]
[48.38578415 -63.11155319]
[51.68010712 -74.18220520]
[58.90104675 -83.13056946]
[68.93486786 -88.63928986]
[68.01145935 -103.61083984]
[67.08804321 -118.58238983]
[66.16462708 -133.55393982]
[65.24121857 -148.52548218]
[64.31780243 -163.49703979]
[53.29739761 -175.15594482]
[55.68417358 -191.02046204]
[69.64720154 -198.92068481]
[84.47523499 -192.79623413]
[88.79348755 -177.34527588]
[79.28935242 -164.42045593]
[80.21276855 -149.44889832]
[81.13617706 -134.47735596]
[82.05959320 -119.50580597]
[82.98300934 -104.53425598]
[83.90641785 -89.56270599]
[100.13808441 -80.66638947]
[107.97599030 -63.73622894]
[104.19849396 -45.31643677]
[90.11141968 -32.64163589]
[92.41229248 -17.81915474]
[94.71316528 -2.99667287]
[97.01404572 11.82580948]
[99.31491852 26.64829063]
[103.52415466 32.88283920]
[101.45108795 41.96199799]
[103.29441071 56.84830475]
[107.30966187 63.20951843]
[104.95798492 72.22053528]
[106.34201050 87.15654755]
[114.26284027 98.67835236]
[108.59400177 111.45942688]
[109.97802734 126.39543915]
[111.36205292 141.33145142]
[112.74607849 156.26747131]
[114.13010406 171.20347595]
[117.78324127 177.05137634]
[117.79501343 182.95552063]
[115.11038971 187.09712219]
[115.57231903 202.09001160]
[116.03424072 217.08290100]
[116.49617004 232.07579041]
[116.95809174 247.06866455]
[117.42002106 262.06155396]
[117.88195038 277.05444336]
[121.32314301 285.70816040]
[118.12004852 292.51458740]
[118.12004852 307.51458740]
[118.12004852 322.51458740]
[126.39389801 329.90759277]
[129.08073425 340.44427490]
[125.50595856 350.47860718]
[117.11882782 356.67922974]
[116.19541168 371.65075684]
[115.27199554 386.62231445]
[114.34858704 401.59387207]
[113.42517090 416.56542969]
[112.50175476 431.53695679]
[122.00588989 444.46179199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[11 91]
[12 90]
[13 89]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[27 72]
[28 71]
[29 69]
[30 68]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
