%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUGUUGAGAAGUGAAGCGAAGUGAGGAGUUAAGAGUGAUGGUUGAUUAGUGUUAGAAUUCUUUGGUUUUGUUUUGUUUUUGGAUUUUGGGA\
) } def
/len { sequence length } bind def

/coor [
[95.68954468 457.42687988]
[101.73588562 441.58773804]
[101.73588562 426.58773804]
[101.73588562 411.58773804]
[101.73588562 396.58773804]
[92.12454987 382.00506592]
[101.20690155 366.09115601]
[100.71611786 351.09918213]
[100.22533417 336.10723877]
[92.07575226 323.63992310]
[99.35737610 309.59399414]
[98.86659241 294.60202026]
[98.37580872 279.61004639]
[97.88501740 264.61807251]
[97.39423370 249.62611389]
[96.90345001 234.63414001]
[96.41265869 219.64216614]
[95.92187500 204.65020752]
[95.43109131 189.65823364]
[94.94029999 174.66625977]
[94.44951630 159.67430115]
[93.95873260 144.68232727]
[93.46794128 129.69035339]
[92.97715759 114.69838715]
[83.72966003 100.79930878]
[91.57028198 86.06074524]
[90.58923340 71.09286499]
[89.60818481 56.12498093]
[88.62713623 41.15709686]
[87.64609528 26.18921280]
[86.66504669 11.22132778]
[85.68399811 -3.74655581]
[84.70294952 -18.71443939]
[83.23269653 -33.64221191]
[81.27480316 -48.51388168]
[79.31690979 -63.38555527]
[69.84452057 -76.05774689]
[75.85438538 -89.68605804]
[66.38198853 -102.35824585]
[72.39185333 -115.98654938]
[70.43395996 -130.85823059]
[68.47607422 -145.72990417]
[66.51818085 -160.60157776]
[54.71691132 -171.46940613]
[55.99942780 -187.46110535]
[69.38189697 -196.30921936]
[84.59842682 -191.22624207]
[89.97619629 -176.11137390]
[81.38985443 -162.55946350]
[83.34774017 -147.68778992]
[85.30563354 -132.81611633]
[87.26352692 -117.94444275]
[96.59587860 -106.33597565]
[90.72605896 -91.64394379]
[100.05840302 -80.03547668]
[94.18858337 -65.34345245]
[96.14647675 -50.47177505]
[98.10437012 -35.60010529]
[101.43804932 -31.93397713]
[102.37300110 -26.07686806]
[99.67083740 -19.69548607]
[100.65188599 -4.72760296]
[101.63292694 10.24028111]
[102.61397552 25.20816422]
[103.59502411 40.17604828]
[104.57607269 55.14393234]
[105.55712128 70.11181641]
[106.53816223 85.07969666]
[114.88310242 93.37759399]
[115.46054077 105.13172150]
[107.96912384 114.20760345]
[108.45991516 129.19956970]
[108.95069885 144.19154358]
[109.44148254 159.18350220]
[109.93227386 174.17547607]
[110.42305756 189.16744995]
[110.91384125 204.15940857]
[111.40463257 219.15138245]
[111.89541626 234.14335632]
[112.38619995 249.13531494]
[112.87699127 264.12728882]
[113.36777496 279.11926270]
[113.85855865 294.11123657]
[114.34934998 309.10321045]
[122.53403473 322.64282227]
[115.21730042 335.61642456]
[115.70808411 350.60839844]
[116.19887543 365.60037231]
[125.13000488 375.08148193]
[125.12355804 387.70324707]
[116.73588562 396.58773804]
[116.73588562 411.58773804]
[116.73588562 426.58773804]
[116.73588562 441.58773804]
[122.78221893 457.42687988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[7 88]
[8 87]
[9 86]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 58]
[35 57]
[36 56]
[38 54]
[40 52]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
