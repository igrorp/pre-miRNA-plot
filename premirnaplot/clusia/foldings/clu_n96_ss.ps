%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAAAGGGAGAUUUAGAGCUACUGGAAGUUGUAGGAAUGGGCGGUUUGGGAUGAAAUAGGAUAUUUUUUUUCUCUAGUCUUUUCCAAGUUGUACUCUUAAUUUCUUCCCAAUGCCGCCCAUUCCGAUAAUUUCCAGUGGUUCCUUCCUUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[41.73560715 719.18548584]
[47.78194809 703.34637451]
[47.78194809 688.34637451]
[47.78194809 673.34637451]
[47.78194809 658.34637451]
[47.78194809 643.34637451]
[47.78194809 628.34637451]
[47.78194809 613.34637451]
[47.78194809 598.34637451]
[47.78194809 583.34637451]
[47.78194809 568.34637451]
[47.78194809 553.34637451]
[35.30924225 561.67889404]
[20.95699120 557.31854248]
[15.22744560 543.45593262]
[22.31319237 530.23504639]
[37.02924347 527.33020020]
[48.60702896 536.86688232]
[50.10528564 521.94189453]
[51.60354614 507.01690674]
[53.10180283 492.09191895]
[54.60006332 477.16693115]
[56.09832001 462.24194336]
[57.59657669 447.31695557]
[59.09483719 432.39196777]
[60.59309387 417.46697998]
[62.09135437 402.54199219]
[63.58961105 387.61700439]
[65.08786774 372.69201660]
[66.58612823 357.76702881]
[68.08438873 342.84204102]
[69.58264160 327.91705322]
[71.08090210 312.99206543]
[72.57916260 298.06707764]
[66.15180206 284.63061523]
[75.22882843 271.67230225]
[76.72708130 256.74731445]
[78.22534180 241.82232666]
[79.72360229 226.89733887]
[81.22185516 211.97235107]
[82.72011566 197.04736328]
[84.21837616 182.12239075]
[85.71663666 167.19740295]
[87.21488953 152.27241516]
[88.71315002 137.34742737]
[90.21141052 122.42243958]
[91.70966339 107.49745178]
[93.05852509 92.55821991]
[94.25785065 77.60624695]
[95.45718384 62.65426636]
[96.65650940 47.70228958]
[97.85583496 32.75031281]
[99.05516052 17.79833603]
[92.44602966 3.42370939]
[101.17617035 -8.64417839]
[102.37549591 -23.59615517]
[103.57482147 -38.54813385]
[104.77414703 -53.50011063]
[105.97347260 -68.45208740]
[107.02314758 -83.41531372]
[107.92306519 -98.38829803]
[108.82298279 -113.36127472]
[109.72290039 -128.33425903]
[110.47296143 -143.31549072]
[111.07311249 -158.30348206]
[111.67325592 -173.29147339]
[97.13028717 -177.22209167]
[83.82682800 -184.29075623]
[72.43018341 -194.14286804]
[63.51200104 -206.28427124]
[57.51961136 -220.10595703]
[54.75358963 -234.91462708]
[55.35267639 -249.96749878]
[59.28682709 -264.50952148]
[66.35870361 -277.81124878]
[76.21358490 -289.20550537]
[88.35714722 -298.12075806]
[102.18029022 -304.10980225]
[116.98963165 -306.87222290]
[132.04235840 -306.26950073]
[146.58341980 -302.33181763]
[159.88343811 -295.25671387]
[171.27531433 -285.39907837]
[180.18760681 -273.25335693]
[186.17330933 -259.42877197]
[188.93214417 -244.61875916]
[188.32575989 -229.56617737]
[184.38456726 -215.02607727]
[177.30624390 -201.72776794]
[167.44584656 -190.33828735]
[155.29795837 -181.42892456]
[141.47192383 -175.44657898]
[126.66123962 -172.69132996]
[126.06109619 -157.70333862]
[125.46095276 -142.71534729]
[128.35189819 -135.86769104]
[124.69587708 -127.43434143]
[123.79595947 -112.46135712]
[122.89604950 -97.48838043]
[121.99613190 -82.51539612]
[124.74948883 -75.61127472]
[120.92545319 -67.25276184]
[119.72612762 -52.30078125]
[118.52680206 -37.34880447]
[117.32746887 -22.39682770]
[116.12814331 -7.44485188]
[122.82305908 5.86031055]
[114.00714111 18.99766350]
[112.80781555 33.94964218]
[111.60848236 48.90161896]
[110.40915680 63.85359573]
[109.20983124 78.80557251]
[108.01050568 93.75754547]
[110.56719971 101.45327759]
[106.63465118 108.99571228]
[105.13639832 123.92069244]
[103.63813782 138.84568787]
[102.13987732 153.77067566]
[100.64161682 168.69564819]
[99.14336395 183.62063599]
[97.64510345 198.54562378]
[96.14684296 213.47061157]
[94.64859009 228.39559937]
[93.15032959 243.32058716]
[91.65206909 258.24557495]
[90.15380859 273.17056274]
[96.47400665 287.67456055]
[87.50415039 299.56533813]
[86.00588989 314.49032593]
[84.50762939 329.41531372]
[83.00937653 344.34030151]
[81.51111603 359.26528931]
[80.01285553 374.19027710]
[78.51459503 389.11526489]
[77.01634216 404.04025269]
[75.51808167 418.96524048]
[74.01982117 433.89022827]
[72.52156830 448.81521606]
[71.02330780 463.74020386]
[69.52504730 478.66519165]
[68.02678680 493.59017944]
[66.52853394 508.51516724]
[65.03027344 523.44012451]
[63.53201675 538.36511230]
[62.78194809 553.34637451]
[62.78194809 568.34637451]
[62.78194809 583.34637451]
[62.78194809 598.34637451]
[62.78194809 613.34637451]
[62.78194809 628.34637451]
[62.78194809 643.34637451]
[62.78194809 658.34637451]
[62.78194809 673.34637451]
[62.78194809 688.34637451]
[62.78194809 703.34637451]
[68.82828522 719.18548584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 146]
[12 145]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[24 138]
[25 137]
[26 136]
[27 135]
[28 134]
[29 133]
[30 132]
[31 131]
[32 130]
[33 129]
[34 128]
[36 126]
[37 125]
[38 124]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[60 100]
[61 99]
[62 98]
[63 97]
[64 95]
[65 94]
[66 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
