%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUUUAUAUUAUUUGAUGAUUUAGAUCAGCAGGGAUGAUGAUGAUGAUGAGGAGGAGGAGGAUGAUGAUGAUGAUGAGGAUGAUGAGGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[87.87672424 380.29748535]
[93.92306519 364.45834351]
[93.92306519 349.45834351]
[93.92306519 334.45834351]
[93.92306519 319.45834351]
[93.92306519 304.45834351]
[93.92306519 289.45834351]
[86.18576813 276.73107910]
[93.92306519 262.93090820]
[93.92306519 247.93090820]
[93.92306519 232.93090820]
[93.92306519 217.93090820]
[93.92306519 202.93090820]
[93.92306519 187.93090820]
[93.92306519 172.93090820]
[93.92306519 157.93090820]
[84.31173706 143.34822083]
[93.39408875 127.43432617]
[92.90330505 112.44235992]
[85.68372345 100.46866608]
[92.10472870 88.04843140]
[91.61394501 73.05645752]
[91.12315369 58.06449127]
[78.44508362 49.31391525]
[73.40946198 34.94394684]
[77.74963379 20.53468513]
[89.60047913 11.55161953]
[89.10969543 -3.44034958]
[88.61891174 -18.43231773]
[88.12812042 -33.42428589]
[72.50936890 -36.90562820]
[58.30249786 -44.24671936]
[46.44279861 -54.95820618]
[37.70948029 -68.32904816]
[32.67449188 -83.47373199]
[31.66506195 -99.39088440]
[34.74243546 -115.02953339]
[41.69820023 -129.35844421]
[52.06836700 -141.43414307]
[65.16434479 -150.46308899]
[80.11863708 -155.85374451]
[71.06594086 -168.82907104]
[77.51849365 -182.25344849]
[76.04823303 -197.18121338]
[66.06147766 -210.18878174]
[72.58213806 -225.23580933]
[88.90232086 -226.84321594]
[98.23322296 -213.35742188]
[90.97600555 -198.65147400]
[92.44626617 -183.72370911]
[101.39379883 -171.81610107]
[95.04640961 -157.32400513]
[108.99803925 -155.42965698]
[122.16751862 -150.42720032]
[133.87155151 -142.57234192]
[143.50201416 -132.26889038]
[150.55754089 -120.04798126]
[154.66961670 -106.54074860]
[155.62187195 -92.44564056]
[153.36140442 -78.49239349]
[148.00173950 -65.40419006]
[139.81712341 -53.86020660]
[129.22851562 -44.46035385]
[116.78187561 -37.69412231]
[103.12009430 -33.91507339]
[103.61087799 -18.92310524]
[104.10166168 -3.93113589]
[104.59245300 11.06083298]
[117.00543976 19.24958229]
[122.27873993 33.34413528]
[118.19374084 48.01267624]
[106.11512756 57.57370377]
[106.60591125 72.56567383]
[107.09669495 87.55764008]
[114.31627655 99.53133392]
[107.89527130 111.95156860]
[108.38605499 126.94354248]
[117.31719208 136.42465210]
[117.31073761 149.04641724]
[108.92306519 157.93090820]
[108.92306519 172.93090820]
[108.92306519 187.93090820]
[108.92306519 202.93090820]
[108.92306519 217.93090820]
[108.92306519 232.93090820]
[108.92306519 247.93090820]
[108.92306519 262.93090820]
[116.66036987 276.73107910]
[108.92306519 289.45834351]
[108.92306519 304.45834351]
[108.92306519 319.45834351]
[108.92306519 334.45834351]
[108.92306519 349.45834351]
[108.92306519 364.45834351]
[114.96940613 380.29748535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[18 77]
[19 76]
[21 74]
[22 73]
[23 72]
[27 68]
[28 67]
[29 66]
[30 65]
[41 52]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
