%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGUGAAGUGGCUUAAACUUUCUGACGUCGAGAAUAGUUAGUUCAUCAUCCCGAUUACCAACAGCAAUGUGGGAGGCGUCAGGGCGGUAGGUGAUGUUAAUGUUCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.14230347 547.21569824]
[106.17290497 536.29638672]
[113.07518005 520.81109619]
[113.89431763 505.83346558]
[111.07936859 498.88882446]
[114.94592285 490.45962524]
[116.17386627 475.50997925]
[109.50442505 462.19201660]
[118.34547424 449.07156372]
[119.57341766 434.12191772]
[120.80136108 419.17227173]
[120.59648132 404.17364502]
[118.96064758 389.26312256]
[109.88152313 377.45556641]
[116.06768799 362.89389038]
[114.43185425 347.98336792]
[112.79602814 333.07281494]
[111.16019440 318.16229248]
[109.52436066 303.25177002]
[100.23908997 295.36682129]
[98.82504272 282.86239624]
[106.59609222 272.45721436]
[97.84287262 260.40606689]
[104.42447662 246.01881409]
[103.19653320 231.06916809]
[101.96858978 216.11950684]
[100.74064636 201.16986084]
[99.51270294 186.22019958]
[98.28475952 171.27053833]
[97.05681610 156.32089233]
[95.82888031 141.37123108]
[94.60093689 126.42158508]
[93.37299347 111.47193146]
[86.83837891 97.97012329]
[75.87583923 87.73182678]
[64.77447510 77.64421844]
[53.53637314 67.70917511]
[42.29826355 57.77413940]
[31.06015968 47.83910370]
[15.02352142 47.38546371]
[5.49504757 34.47857666]
[9.78416824 19.01950073]
[24.60063744 12.86711693]
[38.57852554 20.74100876]
[40.99519730 36.60099792]
[52.23330307 46.53603363]
[63.47140884 56.47107315]
[74.70951843 66.40611267]
[81.90240479 68.50714874]
[86.11413574 76.76928711]
[97.07667542 87.00758362]
[104.43995667 85.58209991]
[126.52982330 81.30566406]
[132.87940979 67.71585846]
[139.22900391 54.12605667]
[145.57858276 40.53625488]
[151.92817688 26.94645119]
[158.09155273 13.27118969]
[164.06756592 -0.48697990]
[170.04357910 -14.24514961]
[168.44485474 -29.98537254]
[180.61215210 -38.57641983]
[176.08799744 -53.96835327]
[185.41871643 -67.01892090]
[201.44657898 -67.71683502]
[211.87638855 -55.52672958]
[208.70727539 -39.79980087]
[194.37031555 -32.60040665]
[196.39649963 -17.84425735]
[183.80175781 -8.26913261]
[177.82574463 5.48903656]
[171.84971619 19.24720573]
[172.07423401 26.73730659]
[165.51797485 33.29603958]
[159.16839600 46.88584137]
[152.81880188 60.47564316]
[146.46920776 74.06544495]
[140.11962891 87.65525055]
[108.32264709 110.24398804]
[109.55059052 125.19364166]
[110.77853394 140.14329529]
[112.00647736 155.09294128]
[113.23442078 170.04260254]
[114.46235657 184.99226379]
[115.69029999 199.94190979]
[116.91824341 214.89157104]
[118.14618683 229.84121704]
[119.37413025 244.79087830]
[128.21517944 257.91131592]
[121.54574585 271.22927856]
[132.38558960 286.03662109]
[124.43489838 301.61593628]
[126.07072449 316.52645874]
[127.70655823 331.43698120]
[129.34239197 346.34753418]
[130.97822571 361.25805664]
[140.17436218 374.13214111]
[133.87118530 387.62728882]
[135.50701904 402.53784180]
[145.59849548 391.43997192]
[160.43005371 389.19839478]
[173.35044861 396.81835938]
[178.56546021 410.88259888]
[173.73641968 425.08404541]
[161.02891541 433.05392456]
[146.14166260 431.21817017]
[135.75102234 420.40020752]
[134.52307129 435.34985352]
[133.29513550 450.29949951]
[139.87673950 464.68676758]
[131.12351990 476.73791504]
[129.89556885 491.68756104]
[128.87193298 506.65261841]
[128.05279541 521.63024902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 114]
[4 113]
[6 112]
[7 111]
[9 109]
[10 108]
[11 107]
[12 99]
[13 98]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[22 90]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[34 51]
[35 50]
[36 48]
[37 47]
[38 46]
[39 45]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 72]
[59 71]
[60 70]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
