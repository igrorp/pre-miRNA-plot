%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUAUUGGCAUUAUUUUUUUUCUUCUUAUUUUAGUUGGUGUUAGUGUUUUUUUAUUGGAAAGAGGAUUUGAGUUAGUAGGUCAUUGAGAAUCCAAGGGGAUGAUGAAGGGAGGGAGAAGGAUGGGGUAGACUU\
) } def
/len { sequence length } bind def

/coor [
[82.65106964 562.54400635]
[88.69740295 546.70489502]
[88.69740295 531.70489502]
[88.69740295 516.70489502]
[85.52259827 509.95428467]
[88.87599945 501.35687256]
[89.22502899 486.36093140]
[89.57406616 471.36499023]
[82.13500977 458.46112061]
[90.19132996 444.84472656]
[87.17446136 438.02209473]
[90.72700500 429.50500488]
[91.42488861 414.52124023]
[92.12276459 399.53750610]
[92.82064819 384.55374146]
[93.51852417 369.56997681]
[94.21640015 354.58624268]
[94.91428375 339.60247803]
[95.61215973 324.61871338]
[96.31004333 309.63494873]
[97.00791931 294.65121460]
[97.70580292 279.66744995]
[98.40367889 264.68368530]
[99.10156250 249.69993591]
[99.79943848 234.71617126]
[100.49732208 219.73242188]
[101.19519806 204.74865723]
[100.84616852 189.75271606]
[99.45191956 174.81765747]
[98.05767059 159.88259888]
[96.66342163 144.94754028]
[95.26917267 130.01248169]
[93.87492371 115.07741547]
[85.34092712 107.06799316]
[84.38871765 95.40295410]
[91.51078796 86.11553955]
[90.46443939 71.15207672]
[89.41809845 56.18861771]
[88.37174988 41.22515869]
[73.62858582 29.44243240]
[72.10968781 10.94848537]
[84.30912781 -2.61054730]
[82.56773376 -17.50912285]
[80.82633972 -32.40769958]
[79.08494568 -47.30627441]
[77.34355164 -62.20484924]
[75.60215759 -77.10342407]
[73.68753052 -91.98072815]
[71.59993744 -106.83474731]
[69.51234436 -121.68877411]
[55.36953735 -127.51358032]
[46.10234833 -139.55583191]
[44.12023163 -154.52038574]
[49.85624313 -168.37513733]
[61.67736816 -177.43750000]
[59.58977127 -192.29151917]
[57.50217438 -207.14555359]
[47.91955948 -219.73458862]
[53.81026840 -233.41482544]
[51.72267151 -248.26884460]
[49.63507462 -263.12286377]
[36.86396027 -272.43276978]
[34.49908447 -288.05911255]
[43.94348907 -300.73107910]
[59.59397125 -302.93063354]
[72.16538239 -293.35278320]
[74.19932556 -277.67990112]
[64.48909760 -265.21047974]
[66.57669067 -250.35644531]
[68.66429138 -235.50242615]
[78.09758759 -223.97583008]
[72.35619354 -209.23313904]
[74.44379425 -194.37911987]
[76.53138733 -179.52510071]
[90.39250946 -174.07212830]
[99.72520447 -162.33514404]
[101.94466400 -147.40396118]
[96.35576630 -133.27381897]
[84.36636353 -123.77636719]
[86.45395660 -108.92234802]
[88.54155731 -94.06832886]
[92.62496948 -87.82528687]
[90.50073242 -78.84481812]
[92.24212646 -63.94624329]
[93.98352051 -49.04766846]
[95.72491455 -34.14908981]
[97.46630859 -19.25051689]
[99.20770264 -4.35194111]
[109.56774902 0.67605895]
[116.24869537 10.20312405]
[117.47140503 21.89597893]
[112.81141663 32.82068634]
[103.33521271 40.17881012]
[104.38155365 55.14226913]
[105.42790222 70.10572815]
[106.47425079 85.06919098]
[116.22010803 98.67596436]
[108.80998993 113.68316650]
[110.20423889 128.61822510]
[111.59848785 143.55328369]
[112.99272919 158.48835754]
[114.38697815 173.42341614]
[115.78122711 188.35847473]
[126.59486389 177.96302795]
[141.59465027 178.04377747]
[152.29574585 188.55503845]
[152.64492798 203.55097961]
[142.44467163 214.54891968]
[127.46491241 215.32774353]
[116.17895508 205.44654846]
[115.48107910 220.43029785]
[114.78319550 235.41406250]
[114.08531952 250.39781189]
[113.38743591 265.38156128]
[112.68955994 280.36532593]
[111.99167633 295.34909058]
[111.29380035 310.33282471]
[110.59591675 325.31658936]
[109.89804077 340.30035400]
[109.20015717 355.28411865]
[108.50228119 370.26785278]
[107.80439758 385.25161743]
[107.10652161 400.23538208]
[106.40864563 415.21914673]
[105.71076202 430.20288086]
[105.18727112 445.19375610]
[112.60135651 459.17022705]
[104.57000732 471.71401978]
[104.22097015 486.70996094]
[103.87193298 501.70590210]
[103.69740295 516.70489502]
[103.69740295 531.70489502]
[103.69740295 546.70489502]
[109.74374390 562.54400635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[4 131]
[6 130]
[7 129]
[8 128]
[10 126]
[12 125]
[13 124]
[14 123]
[15 122]
[16 121]
[17 120]
[18 119]
[19 118]
[20 117]
[21 116]
[22 115]
[23 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[33 98]
[36 96]
[37 95]
[38 94]
[39 93]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 81]
[49 80]
[50 79]
[55 74]
[56 73]
[57 72]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
