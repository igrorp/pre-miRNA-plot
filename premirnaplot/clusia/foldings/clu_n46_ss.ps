%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAACUCACCAGUCAAGUAGCUUGGGGGCUCACCAGAGAAUGGGCCCAAGUACUUAACACGGUCUGGGCCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 248.64495850]
[92.50000000 232.80581665]
[92.50000000 217.80581665]
[81.81912994 207.48814392]
[81.60544586 192.27600098]
[92.50000000 181.14288330]
[81.81912994 170.82519531]
[81.60544586 155.61306763]
[92.50000000 144.47994995]
[92.50000000 129.47994995]
[92.50000000 114.47994232]
[83.69676208 100.35086060]
[91.88398743 85.85613251]
[91.23864746 70.87001801]
[82.91480255 57.41549683]
[90.09738159 44.36713409]
[89.45204926 29.38102341]
[88.80671692 14.39491081]
[88.16137695 -0.59120053]
[87.51604462 -15.57731247]
[83.93003082 -24.32123566]
[87.17942047 -31.21917343]
[87.17942047 -46.21917343]
[87.17942047 -61.21917343]
[83.98040009 -67.57736969]
[84.62291718 -73.62108612]
[87.88027954 -77.49475861]
[89.16975403 -92.43923187]
[90.45922089 -107.38370514]
[91.74869537 -122.32817841]
[93.03816986 -137.27264404]
[94.32763672 -152.21711731]
[95.61711121 -167.16159058]
[83.80628204 -177.22558594]
[80.19931793 -192.31761169]
[86.18317413 -206.63449097]
[99.45693207 -214.67109680]
[114.91656494 -213.33717346]
[126.61753082 -203.14564514]
[130.06056213 -188.01538086]
[123.92174530 -173.76425171]
[110.56158447 -165.87211609]
[109.27210999 -150.92764282]
[107.98263550 -135.98316956]
[106.69316864 -121.03870392]
[105.40369415 -106.09423065]
[104.11421967 -91.14975739]
[102.82475281 -76.20528412]
[102.17942047 -61.21917343]
[102.17942047 -46.21917343]
[102.17942047 -31.21917343]
[102.50215912 -16.22264481]
[103.14749146 -1.23653400]
[103.79282379 13.74957752]
[104.43815613 28.73568916]
[105.08349609 43.72180176]
[113.36118317 56.10441208]
[106.22476196 70.22468567]
[106.87009430 85.21079254]
[115.06392670 93.75525665]
[115.31864166 105.59087372]
[107.50000000 114.47994232]
[107.50000000 129.47994995]
[107.50000000 144.47994995]
[118.39455414 155.61306763]
[118.18087006 170.82519531]
[107.50000000 181.14288330]
[118.39455414 192.27600098]
[118.18087006 207.48814392]
[107.50000000 217.80581665]
[107.50000000 232.80581665]
[113.54634094 248.64495850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[6 67]
[9 64]
[10 63]
[11 62]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[22 51]
[23 50]
[24 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
