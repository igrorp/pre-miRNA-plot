%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAAUAUUUCAUAGGAGUACAACUAGAUGGUAGUGAGCAUGUUGAGCCUCUUGGGAACCGUAUUCCAGAAGAUACUGCAA\
) } def
/len { sequence length } bind def

/coor [
[86.47970581 290.98498535]
[92.52604675 275.14584351]
[92.52604675 260.14584351]
[92.52604675 245.14584351]
[92.52604675 230.14584351]
[84.78874969 217.41857910]
[92.52604675 203.61840820]
[92.52604675 188.61840820]
[92.52604675 173.61840820]
[92.52604675 158.61840820]
[92.52604675 143.61840820]
[81.84517670 133.30072021]
[81.63149261 118.08859253]
[92.52604675 106.95546722]
[89.31142426 99.32439423]
[92.82065582 91.39053345]
[93.38827515 76.40127563]
[93.95589447 61.41201782]
[94.52352142 46.42276001]
[95.09114075 31.43350601]
[95.65876007 16.44424820]
[96.22638702 1.45499253]
[81.79512024 -12.16823387]
[81.63148499 -31.71859360]
[95.41102600 -45.16965103]
[94.27658844 -60.12669373]
[93.14215851 -75.08373260]
[92.00772858 -90.04077148]
[80.30239105 -100.31806946]
[79.36499023 -115.50279999]
[89.23495483 -126.59870911]
[88.10052490 -141.55575562]
[86.96609497 -156.51278687]
[77.61521149 -165.63237000]
[77.10887909 -178.27961731]
[85.16977692 -187.50796509]
[84.60214996 -202.49722290]
[84.03453064 -217.48648071]
[73.29409790 -229.40380859]
[76.05693817 -245.20716858]
[90.20363617 -252.77357483]
[104.88204956 -246.29873657]
[108.83216858 -230.74958801]
[99.02378845 -218.05410767]
[99.59140778 -203.06484985]
[100.15903473 -188.07559204]
[110.32237244 -173.90219116]
[101.92313385 -157.64723206]
[103.05756378 -142.69018555]
[104.19200134 -127.73314667]
[115.62259674 -118.25279236]
[116.98613739 -103.10038757]
[106.96476746 -91.17520142]
[108.09920502 -76.21816254]
[109.23363495 -61.26112366]
[110.36806488 -46.30408096]
[120.04280090 -41.74611282]
[126.90061951 -33.43287277]
[129.57661438 -22.90880203]
[127.49138641 -12.16823387]
[120.97470093 -3.27749395]
[111.21564484 2.02261472]
[110.64801788 17.01187134]
[110.08039856 32.00112915]
[109.51277924 46.99038315]
[108.94515228 61.97964096]
[108.37753296 76.96889496]
[107.80990601 91.95815277]
[107.52604675 106.95546722]
[118.42060089 118.08859253]
[118.20691681 133.30072021]
[107.52604675 143.61840820]
[107.52604675 158.61840820]
[107.52604675 173.61840820]
[107.52604675 188.61840820]
[107.52604675 203.61840820]
[115.26334381 217.41857910]
[107.52604675 230.14584351]
[107.52604675 245.14584351]
[107.52604675 260.14584351]
[107.52604675 275.14584351]
[113.57238770 290.98498535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[14 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[25 56]
[26 55]
[27 54]
[28 53]
[31 50]
[32 49]
[33 48]
[36 46]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
