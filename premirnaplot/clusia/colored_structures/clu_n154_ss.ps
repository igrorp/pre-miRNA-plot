%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCCUGUGAAUACUUUUGCUGAGAUUGAUUUGGGUGAGGCUUUAAAUUUGAAUAUUCGGAGGUGCAAGUAUGUGAAACCUACUCCAGUUCAGCGUCAUGCAAUACCAAUAUCACUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[102.38136292 525.87048340]
[89.36436462 515.00799561]
[96.19889069 499.49264526]
[96.95255280 484.51159668]
[97.70622253 469.53054810]
[98.27157593 454.54119873]
[98.64852142 439.54592896]
[91.23350525 426.62823486]
[99.31516266 413.02685547]
[99.69211578 398.03161621]
[100.06906128 383.03634644]
[100.44601440 368.04107666]
[85.15063477 361.70822144]
[73.40158081 349.99404907]
[66.99519348 334.65026855]
[66.92591095 317.98648071]
[73.23201752 302.52243042]
[84.98566437 290.60714722]
[100.42926788 284.06195068]
[100.05231476 269.06668091]
[99.67536163 254.07142639]
[99.29840851 239.07617188]
[98.73305511 224.08682251]
[97.97939301 209.10577393]
[97.22573090 194.12471008]
[86.03993988 184.35671997]
[85.06221008 169.17453003]
[95.38362122 157.50808716]
[94.62995911 142.52702332]
[93.87629700 127.54597473]
[93.12262726 112.56491852]
[85.69414520 100.71969604]
[91.89631653 88.18874359]
[91.14265442 73.20769501]
[90.38898468 58.22663879]
[89.63532257 43.24558258]
[88.69346619 28.27518272]
[87.56356049 13.31779861]
[83.76013184 4.88684177]
[86.59803009 -2.02883911]
[85.84436798 -17.00989342]
[85.09070587 -31.99094772]
[76.66979218 -45.38493347]
[83.75785065 -58.48488617]
[83.00418854 -73.46594238]
[82.25051880 -88.44699860]
[81.49685669 -103.42804718]
[69.75238800 -119.72039795]
[79.03244019 -136.60894775]
[77.52701569 -151.53321838]
[76.02159119 -166.45747375]
[74.51615906 -181.38174438]
[73.01073456 -196.30601501]
[63.92749405 -209.25997925]
[70.34839630 -222.69952393]
[68.84297180 -237.62377930]
[55.37009048 -245.32189941]
[49.02585602 -259.48278809]
[52.24975204 -274.66125488]
[63.80212784 -285.02090454]
[79.24085236 -286.57821655]
[92.62943268 -278.73440552]
[98.81967926 -264.50552368]
[95.43131256 -249.36291504]
[83.76723480 -239.12921143]
[85.27265930 -224.20494080]
[94.24822998 -212.31846619]
[87.93500519 -197.81143188]
[89.44042969 -182.88717651]
[90.94585419 -167.96290588]
[92.45127869 -153.03863525]
[93.95670319 -138.11437988]
[102.52244568 -132.29620361]
[106.49852753 -122.49625397]
[104.31916809 -111.92166901]
[96.47791290 -104.18171692]
[97.23157501 -89.20066071]
[97.98523712 -74.21960449]
[98.73890686 -59.23855209]
[107.10590363 -46.91611099]
[100.07176208 -32.74461365]
[100.82542419 -17.76355743]
[101.57908630 -2.78250384]
[102.52094269 12.18789673]
[103.65084839 27.14528084]
[107.33313751 33.65074539]
[104.61637878 42.49192047]
[105.37004089 57.47297287]
[106.12370300 72.45402527]
[106.87737274 87.43508148]
[114.30585480 99.28030396]
[108.10368347 111.81125641]
[108.85734558 126.79230499]
[109.61101532 141.77336121]
[110.36467743 156.75440979]
[121.80484772 167.32609558]
[122.35575867 182.52973938]
[112.20677948 193.37104797]
[112.96044922 208.35209656]
[113.71411133 223.33316040]
[117.30446625 231.85704041]
[114.29367065 238.69921875]
[114.67062378 253.69447327]
[115.04757690 268.68972778]
[115.42453003 283.68499756]
[128.32597351 287.85369873]
[139.27806091 295.80706787]
[147.20755005 306.74816895]
[151.34289551 319.58813477]
[151.28919983 333.05459595]
[147.06602478 345.81768799]
[139.10392761 356.62142944]
[128.20066833 364.40731812]
[115.44127655 368.41802979]
[115.06433105 383.41329956]
[114.68737793 398.40856934]
[114.31042480 413.40380859]
[121.69847870 427.39407349]
[113.64379120 439.92288208]
[113.26683807 454.91815186]
[116.20491791 463.68826294]
[112.68727875 470.28421021]
[111.93360901 485.26525879]
[111.17994690 500.24630737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 124]
[4 123]
[5 122]
[6 120]
[7 119]
[9 117]
[10 116]
[11 115]
[12 114]
[19 105]
[20 104]
[21 103]
[22 102]
[23 100]
[24 99]
[25 98]
[28 95]
[29 94]
[30 93]
[31 92]
[33 90]
[34 89]
[35 88]
[36 87]
[37 85]
[38 84]
[40 83]
[41 82]
[42 81]
[44 79]
[45 78]
[46 77]
[47 76]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[55 66]
[56 65]
] def

init

% Start Annotations
86 106 10 0.5019607843137255 0.0 0.0 omark / 19 38 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
