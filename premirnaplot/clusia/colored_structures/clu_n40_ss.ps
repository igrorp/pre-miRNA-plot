%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUUCUGUGUUAGAUGAAUCAUGGUUUGCUGCUGACAGCUUUUUGUAUCGAAUGUGCAAGGAUUUCAUUUUGUUGGUGCUAGAUGCCUCAGUAGUAGAUGGAGACCUUUUGACAUGGACCAG\
) } def
/len { sequence length } bind def

/coor [
[78.98977661 415.58331299]
[85.03611755 399.74417114]
[85.03611755 384.74417114]
[85.03611755 369.74417114]
[85.03611755 354.74417114]
[85.03611755 339.74417114]
[85.03611755 324.74417114]
[81.85432434 317.97982788]
[85.22934723 309.36840820]
[85.60629272 294.37313843]
[85.98324585 279.37789917]
[86.36019897 264.38262939]
[86.73715210 249.38735962]
[87.11409760 234.39208984]
[87.49105072 219.39683533]
[87.86800385 204.40156555]
[76.51483154 197.26020813]
[70.14693451 185.33255005]
[70.53601074 171.70841980]
[77.68727112 159.97811890]
[89.80979919 153.28623962]
[90.56346130 138.30519104]
[83.47541046 125.20523834]
[91.89631653 111.81125641]
[85.69414520 99.28030396]
[93.12262726 87.43508148]
[93.87629700 72.45402527]
[94.62995911 57.47297287]
[95.38362122 42.49192047]
[96.13729095 27.51086426]
[96.89095306 12.52980995]
[97.64461517 -2.45124435]
[98.39828491 -17.43229866]
[99.15194702 -32.41335297]
[99.90560913 -47.39440918]
[100.65927887 -62.37546158]
[101.41294098 -77.35651398]
[93.32327271 -87.49604797]
[94.32611084 -100.02487183]
[103.33081055 -108.20661163]
[104.46071625 -123.16399384]
[97.78491974 -137.50778198]
[106.45894623 -149.61607361]
[107.58884430 -164.57345581]
[108.71875000 -179.53083801]
[102.04295349 -193.87463379]
[110.71697235 -205.98291016]
[111.84687805 -220.94029236]
[112.97677612 -235.89768982]
[114.10668182 -250.85507202]
[115.23657990 -265.81243896]
[116.36648560 -280.76983643]
[103.14617157 -273.68298340]
[89.26328278 -279.36325073]
[84.80223846 -293.68453979]
[93.00350189 -306.24395752]
[107.90974426 -307.91848755]
[118.69289398 -297.49249268]
[121.68854523 -312.19033813]
[124.68419647 -326.88815308]
[127.67984772 -341.58596802]
[130.67549133 -356.28381348]
[120.09738159 -367.63647461]
[118.24586487 -383.04269409]
[125.83288574 -396.57846069]
[139.94108582 -403.03897095]
[155.14556885 -399.94006348]
[165.59991455 -388.47329712]
[167.28419495 -373.04791260]
[159.55078125 -359.59524536]
[145.37332153 -353.28814697]
[142.37767029 -338.59033203]
[139.38201904 -323.89251709]
[136.38636780 -309.19467163]
[133.39071655 -294.49685669]
[131.32386780 -279.63992310]
[130.19396973 -264.68255615]
[129.06407166 -249.72515869]
[127.93416595 -234.76777649]
[126.80426025 -219.81039429]
[125.67436218 -204.85301208]
[132.43096924 -191.57907104]
[123.67613220 -178.40093994]
[122.54622650 -163.44355774]
[121.41632843 -148.48617554]
[128.17294312 -135.21223450]
[119.41809845 -122.03409576]
[118.28820038 -107.07670593]
[126.75715637 -91.76118469]
[116.39399719 -76.60285187]
[115.64033508 -61.62179565]
[114.88666534 -46.64074326]
[114.13300323 -31.65968895]
[113.37933350 -16.67863464]
[112.62567139 -1.69757950]
[111.87200928 13.28347492]
[111.11833954 28.26452827]
[110.36467743 43.24558258]
[109.61101532 58.22663879]
[108.85734558 73.20769501]
[108.10368347 88.18874359]
[114.30585480 100.71969604]
[106.87737274 112.56491852]
[113.91152191 126.73641205]
[105.54451752 139.05885315]
[104.79085541 154.03991699]
[118.07321167 164.42572021]
[122.54376984 180.51135254]
[116.64322662 195.95216370]
[102.86326599 204.77851868]
[102.48631287 219.77378845]
[102.10936737 234.76904297]
[101.73241425 249.76431274]
[101.35546112 264.75958252]
[100.97850800 279.75482178]
[100.60155487 294.75009155]
[100.22460938 309.74536133]
[100.03611755 324.74417114]
[100.03611755 339.74417114]
[100.03611755 354.74417114]
[100.03611755 369.74417114]
[100.03611755 384.74417114]
[100.03611755 399.74417114]
[106.08245850 415.58331299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 123]
[3 122]
[4 121]
[5 120]
[6 119]
[7 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[21 106]
[22 105]
[24 103]
[26 101]
[27 100]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[40 88]
[41 87]
[43 85]
[44 84]
[45 83]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
] def

init

% Start Annotations
28 46 10 0.0 1.0 0.0 omark / 85 102 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
