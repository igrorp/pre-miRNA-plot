%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGGUAUUCAAAAUUGACGGGACAAAUGAUUGAGGGGAAGGUAUAUAGGAUAAAUGUGAUCUGUAUCUGCAAUUCAAUAUAAAUAUAUACACUAACCACAUUUAUUCUAUAUACCUUUCCUUCUAUCAUUUGUCUCGUGCAAUUUUGAAUACUCGAA\
) } def
/len { sequence length } bind def

/coor [
[90.67053223 578.14923096]
[96.71687317 562.31005859]
[96.71687317 547.31005859]
[96.71687317 532.31005859]
[96.71687317 517.31005859]
[96.71687317 502.31008911]
[96.71687317 487.31008911]
[96.71687317 472.31008911]
[96.71687317 457.31008911]
[96.71687317 442.31008911]
[96.71687317 427.31008911]
[96.71687317 412.31008911]
[96.71687317 397.31008911]
[96.71687317 382.31008911]
[96.71687317 367.31008911]
[96.71687317 352.31008911]
[96.71687317 337.31008911]
[96.71687317 322.31008911]
[96.56961823 307.31082153]
[96.27510834 292.31369019]
[95.98060608 277.31658936]
[95.68609619 262.31948853]
[95.39159393 247.32237244]
[95.09709167 232.32527161]
[94.80258179 217.32815552]
[94.50807953 202.33105469]
[94.21356964 187.33393860]
[93.91906738 172.33683777]
[93.62456512 157.33972168]
[93.33005524 142.34262085]
[93.03555298 127.34550476]
[92.74104309 112.34839630]
[85.67881775 100.28123474]
[92.26184845 87.94610596]
[91.96733856 72.94899750]
[91.67283630 57.95188904]
[91.37832642 42.95478058]
[91.08382416 27.95767212]
[90.78932190 12.96056271]
[90.49481201 -2.03654599]
[90.20030975 -17.03365517]
[89.90579987 -32.03076172]
[89.61129761 -47.02787018]
[89.31679535 -62.02497864]
[89.02228546 -77.02208710]
[88.72778320 -92.01919556]
[88.43327332 -107.01630402]
[88.13877106 -122.01341248]
[87.84426880 -137.01052856]
[87.54975891 -152.00762939]
[87.25525665 -167.00474548]
[86.96074677 -182.00184631]
[86.66624451 -196.99896240]
[86.37173462 -211.99606323]
[86.07723236 -226.99317932]
[85.78273010 -241.99028015]
[85.48822021 -256.98739624]
[85.19371796 -271.98449707]
[84.89920807 -286.98159790]
[84.60470581 -301.97872925]
[69.44954681 -311.85397339]
[63.27220535 -328.68844604]
[68.35363770 -345.72216797]
[82.49325562 -356.23394775]
[81.61019135 -371.20791626]
[80.72712708 -386.18191528]
[79.84407043 -401.15588379]
[78.96100616 -416.12988281]
[64.23887634 -419.51150513]
[51.06648254 -426.90509033]
[40.51166153 -437.71121216]
[33.43004227 -451.05389404]
[30.39570236 -465.85150146]
[31.65461540 -480.90447998]
[37.10473251 -494.99252319]
[46.30423737 -506.97357178]
[58.50736237 -515.87640381]
[72.72486115 -520.97930908]
[87.80418396 -521.86859131]
[102.52291107 -518.47216797]
[115.68786621 -511.06533813]
[126.23182678 -500.24862671]
[133.30003357 -486.89883423]
[136.31950378 -472.09817505]
[135.04547119 -457.04647827]
[129.58120728 -442.96392822]
[120.36967468 -430.99209595]
[108.15760803 -422.10153198]
[93.93498993 -417.01293945]
[94.81805420 -402.03894043]
[95.70111084 -387.06497192]
[96.58417511 -372.09097290]
[97.46723938 -357.11700439]
[108.59894562 -352.12939453]
[116.58542633 -342.81393433]
[119.85278320 -330.91149902]
[117.71675110 -318.68151855]
[110.52490234 -308.47296143]
[99.60181427 -302.27322388]
[99.89631653 -287.27612305]
[100.19082642 -272.27899170]
[100.48532867 -257.28189087]
[100.77983856 -242.28479004]
[101.07434082 -227.28767395]
[101.36884308 -212.29057312]
[101.66335297 -197.29345703]
[101.95785522 -182.29635620]
[102.25236511 -167.29924011]
[102.54686737 -152.30213928]
[102.84137726 -137.30502319]
[103.13587952 -122.30792236]
[103.43038177 -107.31081390]
[103.72489166 -92.31370544]
[104.01939392 -77.31659698]
[104.31390381 -62.31948471]
[104.60840607 -47.32237625]
[104.90290833 -32.32526779]
[105.19741821 -17.32815933]
[105.49192047 -2.33105135]
[105.78643036 12.66605759]
[106.08093262 27.66316605]
[106.37543488 42.66027451]
[106.66994476 57.65738297]
[106.96444702 72.65449524]
[107.25895691 87.65160370]
[114.32118225 99.71876526]
[107.73815155 112.05389404]
[108.03266144 127.05100250]
[108.32716370 142.04811096]
[108.62167358 157.04522705]
[108.91617584 172.04232788]
[109.21067810 187.03944397]
[109.50518799 202.03654480]
[109.79969025 217.03366089]
[110.09420013 232.03076172]
[110.38870239 247.02787781]
[110.68320465 262.02499390]
[110.97771454 277.02209473]
[111.27221680 292.01919556]
[111.56672668 307.01629639]
[114.87808228 315.58636475]
[111.71687317 322.31008911]
[111.71687317 337.31008911]
[111.71687317 352.31008911]
[111.71687317 367.31008911]
[111.71687317 382.31008911]
[111.71687317 397.31008911]
[111.71687317 412.31008911]
[111.71687317 427.31008911]
[111.71687317 442.31008911]
[111.71687317 457.31008911]
[111.71687317 472.31008911]
[111.71687317 487.31008911]
[111.71687317 502.31008911]
[111.71687317 517.31005859]
[111.71687317 532.31005859]
[111.71687317 547.31005859]
[111.71687317 562.31005859]
[117.76321411 578.14923096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 149]
[12 148]
[13 147]
[14 146]
[15 145]
[16 144]
[17 143]
[18 142]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[28 131]
[29 130]
[30 129]
[31 128]
[32 127]
[34 125]
[35 124]
[36 123]
[37 122]
[38 121]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
] def

init

% Start Annotations
15 32 10 0.0 1.0 0.0 omark / 129 146 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
