%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAUACGUUUAUUCUGAUAAAAGAUUGCCAAGGUUCUAAGGGUGCCCAAGAUACUUUUUAUCCAUUUGCGAAAAAUCCUAAAUCUGCUUGUUUGAUUUUAUAGUAUUGUGUGCACUCCGGCUAAUGUUGGAUCUUCUGUUGGAAUGCAUUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[73.89173126 619.35809326]
[60.76141357 608.63287354]
[67.43267822 593.04663086]
[68.02902985 578.05847168]
[68.62537384 563.07031250]
[69.22172546 548.08221436]
[69.81806946 533.09405518]
[62.59288025 520.06921387]
[70.87271118 506.58758545]
[71.46905518 491.59942627]
[64.24386597 478.57461548]
[72.52369690 465.09295654]
[73.12004089 450.10482788]
[73.71639252 435.11669922]
[74.31273651 420.12854004]
[74.90908813 405.14041138]
[75.50543213 390.15225220]
[76.10178375 375.16412354]
[76.69812775 360.17599487]
[77.29447937 345.18783569]
[77.89082336 330.19970703]
[70.66563416 317.17489624]
[78.94546509 303.69323730]
[79.54180908 288.70507812]
[80.13816071 273.71694946]
[80.73450470 258.72882080]
[81.33085632 243.74066162]
[78.76834106 239.65165710]
[78.78506470 233.89978027]
[82.26064301 228.17193604]
[83.45239258 213.21936035]
[84.64414978 198.26676941]
[85.83589935 183.31419373]
[79.13423920 170.01242065]
[87.94351196 156.87060547]
[89.13526154 141.91801453]
[90.32701111 126.96543884]
[78.16310883 118.54323578]
[71.82344818 105.17526245]
[72.99891663 90.42696381]
[81.37599945 78.23194122]
[94.72040558 71.84281158]
[95.91215515 56.89022446]
[96.95520020 41.92653275]
[97.84942627 26.95321274]
[98.74365234 11.97989082]
[99.63787842 -2.99343061]
[92.73703766 -17.23031807]
[101.21931458 -29.47369385]
[102.11354065 -44.44701385]
[95.21269989 -58.68390274]
[103.69497681 -70.92727661]
[104.58920288 -85.90060425]
[105.48342896 -100.87392426]
[106.37766266 -115.84724426]
[107.27188873 -130.82057190]
[108.16611481 -145.79388428]
[94.28897095 -154.73600769]
[86.84322357 -169.36517334]
[87.76970673 -185.66012573]
[96.72225189 -199.19474792]
[111.18749237 -206.34025574]
[111.78383636 -221.32839966]
[112.38018799 -236.31654358]
[97.97167969 -243.81942749]
[88.30150604 -256.80029297]
[85.25821686 -272.63937378]
[89.39926147 -288.16741943]
[99.84968567 -300.29974365]
[114.48642731 -306.64910889]
[114.78466034 -321.64614868]
[115.08289337 -336.64315796]
[101.14350128 -342.70629883]
[90.58904266 -353.64578247]
[85.02899933 -367.79336548]
[85.31123352 -382.99166870]
[91.39270782 -396.92309570]
[102.34604645 -407.46313477]
[116.50093842 -413.00457764]
[131.69886780 -412.70236206]
[145.62226868 -406.60253906]
[156.14790344 -395.63534546]
[161.67071533 -381.47317505]
[161.34849548 -366.27566528]
[155.23037720 -352.36032104]
[144.24935913 -341.84912109]
[130.07992554 -336.34494019]
[129.78169250 -321.34790039]
[129.48345947 -306.35086060]
[142.17796326 -300.68472290]
[151.77700806 -290.56927490]
[156.80198669 -277.51458740]
[156.46054077 -263.48693848]
[150.77130127 -250.61280823]
[140.56604004 -240.85644531]
[127.36833191 -235.72019958]
[126.77198029 -220.73205566]
[126.17563629 -205.74391174]
[138.20089722 -199.20896912]
[146.26663208 -188.07006836]
[148.74650574 -174.47564697]
[145.09848022 -161.07839966]
[135.98194885 -150.51771545]
[123.13943481 -144.89965820]
[122.24520874 -129.92634583]
[121.35098267 -114.95301819]
[120.45675659 -99.97969818]
[119.56253052 -85.00637054]
[118.66829681 -70.03305054]
[125.63310242 -56.86715698]
[117.08686066 -43.55278778]
[116.19263458 -28.57946777]
[123.15744019 -15.41357136]
[114.61119843 -2.09920382]
[113.71697235 12.87411785]
[112.82274628 27.84743881]
[111.92852020 42.82076263]
[114.68408203 49.72287750]
[110.86473846 58.08197784]
[109.67298889 73.03456116]
[121.83689117 81.45676422]
[128.17655945 94.82473755]
[127.00108337 109.57303619]
[118.62400055 121.76805878]
[105.27959442 128.15719604]
[104.08784485 143.10977173]
[102.89608765 158.06236267]
[109.51250458 172.43363953]
[100.78848267 184.50595093]
[99.59672546 199.45852661]
[98.40497589 214.41110229]
[97.21322632 229.36369324]
[96.31900024 244.33700562]
[95.72264862 259.32516479]
[95.12630463 274.31329346]
[94.52995300 289.30142212]
[93.93360901 304.28958130]
[101.11614227 318.38644409]
[92.87896729 330.79605103]
[92.28261566 345.78417969]
[91.68627167 360.77233887]
[91.08992767 375.76046753]
[90.49357605 390.74862671]
[89.89723206 405.73675537]
[89.30088043 420.72488403]
[88.70453644 435.71304321]
[88.10818481 450.70117188]
[87.51184082 465.68933105]
[94.69437408 479.78619385]
[86.45719910 492.19580078]
[85.86084747 507.18392944]
[93.04338837 521.28082275]
[84.80621338 533.69042969]
[84.20986176 548.67852783]
[83.61351776 563.66668701]
[83.01716614 578.65484619]
[82.42082214 593.64294434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[9 151]
[10 150]
[12 148]
[13 147]
[14 146]
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[30 132]
[31 131]
[32 130]
[33 129]
[35 127]
[36 126]
[37 125]
[42 120]
[43 119]
[44 117]
[45 116]
[46 115]
[47 114]
[49 112]
[50 111]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[62 98]
[63 97]
[64 96]
[70 89]
[71 88]
[72 87]
] def

init

% Start Annotations
134 154 10 0.5019607843137255 0.0 0.0 omark / 6 27 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
