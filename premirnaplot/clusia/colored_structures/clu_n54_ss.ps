%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCGGUGGUCUCUAAUUCGCUUGGUGCAGGUCGGGAACUGAUUUAAAGCUUUCGCUAAAAUUUUUAAGCAAAAACAAAAACAAAAAGAAAAAGAAAAAGAAAAAGAUUUUUUUUUAAGCUUCCAGAUGGCGAGAAGCUAUUGGCCUAAAGGAGUGGAAGCUUUUGUUUCCCGCCUUGCAUCAACUGAAUCGGAGACCGCGGUGAA\
) } def
/len { sequence length } bind def

/coor [
[38.09407806 1071.41992188]
[44.14041519 1055.58081055]
[44.14041519 1040.58081055]
[44.14041519 1025.58081055]
[44.14041519 1010.58081055]
[44.14041519 995.58081055]
[44.14041519 980.58081055]
[40.99638748 973.89093018]
[44.25484848 965.35577393]
[44.48031235 950.35748291]
[44.70577621 935.35919189]
[44.93124008 920.36083984]
[45.15670395 905.36254883]
[45.38217163 890.36425781]
[45.60763550 875.36596680]
[45.83309937 860.36761475]
[38.28797531 847.52551270]
[46.23183441 833.84320068]
[46.45729828 818.84490967]
[46.68276215 803.84655762]
[46.90822601 788.84826660]
[47.13369370 773.84997559]
[39.58856964 761.00781250]
[47.53242493 747.32550049]
[47.75788879 732.32720947]
[47.98335648 717.32891846]
[48.20882034 702.33062744]
[48.43428421 687.33227539]
[48.65974808 672.33398438]
[48.88521194 657.33569336]
[49.11067963 642.33740234]
[49.33614349 627.33905029]
[49.56160736 612.34075928]
[42.01648331 599.49865723]
[49.96034241 585.81634521]
[50.18580627 570.81799316]
[50.41127014 555.81970215]
[50.63673401 540.82141113]
[50.86219788 525.82312012]
[48.68091583 523.05096436]
[47.73479843 519.08410645]
[48.57098389 514.51489258]
[51.45116043 510.15780640]
[52.35250854 495.18490601]
[53.25386047 480.21200562]
[45.46666718 470.95407104]
[46.09603500 458.47155762]
[55.34930801 449.48458862]
[56.47561264 434.52691650]
[57.60191727 419.56927490]
[58.72822189 404.61160278]
[59.85452652 389.65396118]
[60.98083115 374.69628906]
[62.10713577 359.73864746]
[63.23344040 344.78097534]
[64.35974121 329.82333374]
[65.48605347 314.86569214]
[66.61235809 299.90802002]
[67.73866272 284.95037842]
[66.01367950 282.73883057]
[65.06147766 279.71026611]
[65.19785309 276.15576172]
[66.62735748 272.47546387]
[69.40876770 269.13656616]
[71.43184662 254.27362061]
[73.45491791 239.41067505]
[75.47798920 224.54771423]
[77.50106812 209.68476868]
[79.52413940 194.82182312]
[73.57408142 181.16729736]
[83.10193634 168.53675842]
[85.12501526 153.67381287]
[78.20409393 151.25506592]
[71.66082764 147.94825745]
[65.60857391 143.81065369]
[60.15221024 138.91397095]
[55.38626862 133.34304810]
[51.39332962 127.19440460]
[48.24257660 120.57456970]
[45.98859787 113.59825134]
[44.67045212 106.38632202]
[44.31097794 99.06373596]
[44.91639709 91.75737762]
[46.47623062 84.59383392]
[48.96343994 77.69722748]
[52.33494186 71.18704987]
[56.53231049 65.17610168]
[61.48282623 59.76852798]
[67.10070801 55.05802917]
[73.28862762 51.12621689]
[79.93936157 48.04122162]
[86.93766785 45.85649109]
[94.16230774 44.60988235]
[94.61318970 29.61665916]
[95.06406403 14.62343693]
[95.51494598 -0.36978561]
[95.96582031 -15.36300755]
[96.41670227 -30.35622978]
[96.86757660 -45.34945297]
[97.31845856 -60.34267426]
[97.76933289 -75.33589935]
[85.41365814 -84.72294617]
[80.96751404 -99.58940125]
[86.14054871 -114.21880341]
[98.94361877 -122.98584747]
[114.45368195 -122.51942444]
[126.70680237 -112.99888611]
[130.99140930 -98.08507538]
[125.65998077 -83.51265717]
[112.76255798 -74.88501740]
[112.31168365 -59.89179611]
[111.86080170 -44.89857483]
[111.40991974 -29.90535164]
[110.95904541 -14.91212940]
[110.50816345 0.08109279]
[110.05728912 15.07431507]
[109.60640717 30.06753731]
[109.15553284 45.06076050]
[121.98921204 48.82756042]
[133.55484009 55.54533768]
[144.12150574 44.89895248]
[154.68817139 34.25256729]
[165.25483704 23.60618210]
[175.82150269 12.95979691]
[186.38818359 2.31341147]
[186.49833679 -13.26303291]
[197.36610413 -23.90945435]
[212.21517944 -23.70844078]
[215.87458801 -39.69408417]
[231.62571716 -44.25849915]
[243.26516724 -32.70621109]
[238.81925964 -16.92121887]
[222.86157227 -13.14177132]
[223.17417908 1.70537841]
[212.60974121 12.65285301]
[197.03456116 12.88008022]
[186.46789551 23.52646446]
[175.90122986 34.17285156]
[165.33454895 44.81923676]
[154.76788330 55.46562195]
[144.20121765 66.11200714]
[154.48408508 88.44019318]
[154.15365601 113.02019501]
[143.27432251 135.06390381]
[123.96530914 150.27731323]
[99.98796082 155.69689941]
[97.96488953 170.55984497]
[103.77024078 185.27746582]
[94.38708496 196.84490967]
[92.36401367 211.70785522]
[90.34093475 226.57080078]
[88.31786346 241.43374634]
[86.29479218 256.29669189]
[84.27171326 271.15963745]
[82.69631195 286.07669067]
[81.57000732 301.03433228]
[80.44370270 315.99197388]
[79.31739807 330.94964600]
[78.19109344 345.90728760]
[77.06478882 360.86495972]
[75.93848419 375.82260132]
[74.81217957 390.78027344]
[73.68587494 405.73791504]
[72.55957031 420.69555664]
[71.43326569 435.65322876]
[70.30696106 450.61087036]
[78.67382812 467.01364136]
[68.22675323 481.11337280]
[67.32540131 496.08627319]
[66.42405701 511.05914307]
[65.86050415 526.04858398]
[65.63504028 541.04687500]
[65.40957642 556.04516602]
[65.18411255 571.04345703]
[64.95864868 586.04180908]
[72.48764038 599.95672607]
[64.55991364 612.56622314]
[64.33444977 627.56451416]
[64.10898590 642.56286621]
[63.88351822 657.56115723]
[63.65805435 672.55944824]
[63.43259048 687.55773926]
[63.20712662 702.55609131]
[62.98165894 717.55438232]
[62.75619507 732.55267334]
[62.53073120 747.55096436]
[70.05973053 761.46588135]
[62.13199615 774.07543945]
[61.90653229 789.07373047]
[61.68106842 804.07202148]
[61.45560455 819.07037354]
[61.23013687 834.06866455]
[68.75913239 847.98358154]
[60.83140564 860.59307861]
[60.60594177 875.59143066]
[60.38047409 890.58972168]
[60.15501022 905.58801270]
[59.92954636 920.58630371]
[59.70408249 935.58465576]
[59.47861862 950.58294678]
[59.25315094 965.58123779]
[59.14041519 980.58081055]
[59.14041519 995.58081055]
[59.14041519 1010.58081055]
[59.14041519 1025.58081055]
[59.14041519 1040.58081055]
[59.14041519 1055.58081055]
[65.18675995 1071.41992188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 207]
[3 206]
[4 205]
[5 204]
[6 203]
[7 202]
[9 201]
[10 200]
[11 199]
[12 198]
[13 197]
[14 196]
[15 195]
[16 194]
[18 192]
[19 191]
[20 190]
[21 189]
[22 188]
[24 186]
[25 185]
[26 184]
[27 183]
[28 182]
[29 181]
[30 180]
[31 179]
[32 178]
[33 177]
[35 175]
[36 174]
[37 173]
[38 172]
[39 171]
[43 170]
[44 169]
[45 168]
[48 166]
[49 165]
[50 164]
[51 163]
[52 162]
[53 161]
[54 160]
[55 159]
[56 158]
[57 157]
[58 156]
[59 155]
[64 154]
[65 153]
[66 152]
[67 151]
[68 150]
[69 149]
[71 147]
[72 146]
[93 118]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[120 141]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[128 133]
] def

init

% Start Annotations
20 40 10 0.0 1.0 0.0 omark / 172 192 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
