%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAACUUCAAGGUGACCAGCGCAAGAACGUCUCUACCUUUCUUGUUCAAGUAUGUUCAUUUCCAGAUUUGGCAUACCUCAUAGCCCAUCUUUGGGGUGUGUGUUUGGCAAGUCACAGGUCUCUUUCUUUUUGUAGGCUGGCAUUGUGAAGAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[90.01260376 652.12207031]
[96.05894470 636.28295898]
[96.05894470 621.28295898]
[96.05894470 606.28295898]
[85.37806702 595.96527100]
[85.16439056 580.75311279]
[96.05894470 569.61999512]
[96.05894470 554.61999512]
[96.05894470 539.61999512]
[96.05894470 524.61999512]
[96.05894470 509.62002563]
[88.32164001 496.89273071]
[96.05894470 483.09255981]
[96.05894470 468.09255981]
[96.05894470 453.09255981]
[96.05894470 438.09255981]
[92.89727783 431.36791992]
[96.21006012 422.79693604]
[96.50641632 407.79986572]
[96.80277252 392.80279541]
[97.09912872 377.80572510]
[97.39548492 362.80865479]
[97.39548492 347.80865479]
[97.09912872 332.81158447]
[96.80277252 317.81451416]
[96.50641632 302.81744385]
[96.21006012 287.82037354]
[95.91369629 272.82330322]
[95.61734009 257.82623291]
[81.45640564 253.05619812]
[69.75996399 243.71154785]
[61.95174789 230.90505981]
[58.99063873 216.17233276]
[61.25294876 201.28770447]
[68.48471069 188.05056763]
[79.83003998 178.06779480]
[93.93237305 172.55876160]
[93.63601685 157.56169128]
[93.33965302 142.56462097]
[93.04329681 127.56754303]
[82.38726044 124.81821442]
[72.93480682 117.87239075]
[66.34796906 107.30005646]
[64.00888824 94.32544708]
[66.76631927 80.68934631]
[53.63029480 73.44746399]
[38.62082291 77.61322021]
[25.40218925 70.08179474]
[21.52327538 55.74688339]
[8.38725185 48.50500107]
[-7.98907709 49.36980438]
[-16.69809914 35.47430038]
[-8.78071785 21.11299515]
[7.61834240 21.05956459]
[15.62913513 35.36897659]
[28.76515961 42.61085892]
[42.95735550 38.23854065]
[56.38231659 45.39571381]
[60.87217712 60.31143951]
[74.00820160 67.55332184]
[81.15921783 65.29214478]
[70.09165955 55.16746521]
[73.32601166 40.52031708]
[87.62796783 35.99768829]
[98.69571686 46.12216187]
[95.46125793 60.76977921]
[102.61227417 58.50859833]
[109.19671631 45.03102112]
[115.78116608 31.55344200]
[122.36560822 18.07586479]
[128.95005798 4.59828854]
[135.53450012 -8.87928867]
[134.64025879 -24.67520332]
[147.17906189 -32.71433258]
[153.76350403 -46.19190979]
[152.86927795 -61.98782349]
[165.40808105 -70.02695465]
[171.99252319 -83.50453186]
[168.54470825 -95.96941376]
[174.34791565 -107.07610321]
[185.79190063 -111.09714508]
[192.64134216 -124.44200134]
[199.49078369 -137.78686523]
[206.34022522 -151.13171387]
[205.75823975 -166.94221497]
[218.45343018 -174.73204041]
[225.30287170 -188.07690430]
[232.15229797 -201.42175293]
[239.00173950 -214.76661682]
[237.65203857 -231.11012268]
[251.28335571 -240.22709656]
[265.87298584 -232.73875427]
[266.41235352 -216.34848022]
[252.34660339 -207.91717529]
[245.49716187 -194.57231140]
[238.64772034 -181.22746277]
[231.79827881 -167.88259888]
[232.87017822 -153.02662659]
[219.68507385 -144.28227234]
[212.83563232 -130.93742371]
[205.98620605 -117.59255981]
[199.13676453 -104.24770355]
[200.96905518 -86.81743622]
[185.47009277 -76.92008972]
[178.88565063 -63.44250870]
[180.25085449 -48.61060333]
[167.24108887 -39.60746384]
[160.65664673 -26.12988853]
[162.02185059 -11.29798031]
[149.01206970 -2.29484320]
[142.42762756 11.18273354]
[135.84318542 24.66031075]
[129.25874329 38.13788605]
[122.67429352 51.61546326]
[116.08985138 65.09304047]
[133.19372559 88.58477783]
[128.22911072 114.56855774]
[108.04036713 127.27118683]
[108.33673096 142.26826477]
[108.63308716 157.26533508]
[108.92944336 172.26240540]
[123.23841095 177.21000671]
[134.96926880 186.73675537]
[142.71833801 199.67787170]
[145.56692505 214.46148682]
[143.19017029 229.29969788]
[135.89398193 242.40467834]
[124.57584381 252.20410156]
[110.61441803 257.52987671]
[110.91077423 272.52694702]
[111.20713043 287.52401733]
[111.50348663 302.52108765]
[111.79984283 317.51815796]
[112.09619904 332.51522827]
[112.39255524 347.51229858]
[115.51869965 353.43557739]
[115.19277954 359.17651367]
[112.39255524 363.10501099]
[112.09619904 378.10208130]
[111.79984283 393.09915161]
[111.50348663 408.09622192]
[111.20713043 423.09329224]
[111.05894470 438.09255981]
[111.05894470 453.09255981]
[111.05894470 468.09255981]
[111.05894470 483.09255981]
[118.79624176 496.89273071]
[111.05894470 509.62002563]
[111.05894470 524.61999512]
[111.05894470 539.61999512]
[111.05894470 554.61999512]
[111.05894470 569.61999512]
[121.95349884 580.75311279]
[121.73981476 595.96527100]
[111.05894470 606.28295898]
[111.05894470 621.28295898]
[111.05894470 636.28295898]
[117.10528564 652.12207031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 157]
[3 156]
[4 155]
[7 152]
[8 151]
[9 150]
[10 149]
[11 148]
[13 146]
[14 145]
[15 144]
[16 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 135]
[24 134]
[25 133]
[26 132]
[27 131]
[28 130]
[29 129]
[37 121]
[38 120]
[39 119]
[40 118]
[45 60]
[46 59]
[49 56]
[50 55]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[74 108]
[75 107]
[77 105]
[78 104]
[81 102]
[82 101]
[83 100]
[84 99]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% Start Annotations
15 34 10 0.0 1.0 0.0 omark / 126 146 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
