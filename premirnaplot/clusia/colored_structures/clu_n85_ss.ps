%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCUGGGCUUGAGGUGGCCUAACUAAGCACGGAGAAGGAGAAAAAUGGUGUGGCUUUGAGUUGUUGGAUUUGGGUUUCAAAUUUCUUUAUUGUGGCUGAUUUGGGUUGAGAUUGGUGGUUGAGUGCGGCAUGCG\
) } def
/len { sequence length } bind def

/coor [
[135.11000061 549.65124512]
[141.15634155 533.81213379]
[141.15634155 518.81213379]
[141.15634155 503.81213379]
[140.98559570 488.81311035]
[140.64414978 473.81698608]
[140.30270386 458.82086182]
[139.96125793 443.82476807]
[131.93624878 431.27691650]
[139.35740662 417.30419922]
[139.01596069 402.30807495]
[138.67451477 387.31195068]
[138.33306885 372.31585693]
[137.99162292 357.31973267]
[137.65016174 342.32363892]
[119.06975555 328.66363525]
[116.23040771 305.52337646]
[131.27944946 287.38800049]
[128.22761536 272.70172119]
[125.17577362 258.01547241]
[122.12393188 243.32920837]
[119.07209015 228.64294434]
[116.02024841 213.95669556]
[112.96841431 199.27043152]
[109.91657257 184.58416748]
[96.28424835 178.64297485]
[88.67433929 165.66017151]
[90.18604279 150.50865173]
[100.44818115 139.01976013]
[97.39633942 124.33349609]
[94.34449768 109.64723969]
[91.12569427 94.99666595]
[87.74033356 80.38367462]
[84.35498047 65.77069092]
[80.96962738 51.15770340]
[70.31739044 39.45982361]
[74.98263550 25.31469345]
[71.59728241 10.70170689]
[68.21192169 -3.91127944]
[64.82656860 -18.52426529]
[61.44121170 -33.13725281]
[58.05585861 -47.75023651]
[54.00890732 -62.19399643]
[49.30874634 -76.43859100]
[44.60858536 -90.68318939]
[39.90842819 -104.92778015]
[23.76388741 -109.83281708]
[13.79727745 -123.24212646]
[13.75582123 -139.78399658]
[23.45884323 -152.97618103]
[18.43564796 -167.11009216]
[13.41245365 -181.24401855]
[1.50050199 -191.65631104]
[4.52895403 -206.23979187]
[-0.49424034 -220.37370300]
[-5.51743460 -234.50761414]
[-10.54062843 -248.64152527]
[-25.46125221 -252.90234375]
[-35.00131607 -265.14028931]
[-35.49246597 -280.64956665]
[-26.74584579 -293.46661377]
[-12.12471199 -298.66296387]
[2.74881244 -294.24053955]
[12.15555382 -281.89984131]
[12.47842884 -266.38610840]
[3.59328508 -253.66471863]
[8.61647892 -239.53080750]
[13.63967323 -225.39689636]
[18.66286850 -211.26298523]
[30.21552658 -201.86163330]
[27.54636765 -186.26721191]
[32.56956100 -172.13328552]
[37.59275818 -157.99937439]
[50.73793793 -155.40782166]
[60.95363235 -146.57200623]
[65.48465729 -133.73280334]
[63.03879166 -120.22871399]
[54.15302277 -109.62794495]
[58.85318375 -95.38334656]
[63.55334091 -81.13875580]
[68.25350189 -66.89415741]
[70.78953552 -65.51788330]
[72.90798187 -63.01070023]
[74.15857697 -59.53599167]
[74.16230011 -55.42296982]
[72.66884613 -51.13559341]
[76.05419922 -36.52260590]
[79.43955231 -21.90962219]
[82.82491302 -7.29663515]
[86.21026611 7.31635094]
[89.59561920 21.92933655]
[100.00571442 32.58200073]
[95.58261108 47.77235031]
[98.96796417 62.38533401]
[102.35332489 76.99832153]
[105.73867798 91.61130524]
[110.51937866 98.19409943]
[109.03076172 106.59539795]
[112.08260345 121.28165436]
[115.13443756 135.96792603]
[129.12417603 142.41722107]
[136.54710388 155.71209717]
[134.73957825 170.65187073]
[124.60282898 181.53233337]
[127.65467072 196.21858215]
[130.70651245 210.90484619]
[133.75834656 225.59111023]
[136.81019592 240.27737427]
[139.86203003 254.96363831]
[142.91387939 269.64990234]
[145.96571350 284.33615112]
[153.43440247 285.75411987]
[160.28289795 289.00283813]
[166.07199097 293.86160278]
[170.43353271 300.00686646]
[173.09387207 307.03372192]
[173.89097595 314.48269653]
[172.78428650 321.86962891]
[169.85658264 328.71725464]
[165.30796814 334.58605957]
[159.44216919 339.10232544]
[152.64628601 341.98217773]
[152.98773193 356.97830200]
[153.32917786 371.97439575]
[153.67062378 386.97052002]
[154.01206970 401.96664429]
[154.35351562 416.96273804]
[162.40295410 430.58322144]
[154.95736694 443.48330688]
[155.29881287 458.47943115]
[155.64027405 473.47555542]
[155.98171997 488.47164917]
[159.32925415 497.06527710]
[156.15634155 503.81213379]
[156.15634155 518.81213379]
[156.15634155 533.81213379]
[162.20268250 549.65124512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 136]
[3 135]
[4 134]
[5 132]
[6 131]
[7 130]
[8 129]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[15 122]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[23 106]
[24 105]
[25 104]
[29 100]
[30 99]
[31 98]
[32 96]
[33 95]
[34 94]
[35 93]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 81]
[44 80]
[45 79]
[46 78]
[50 73]
[51 72]
[52 71]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% Start Annotations
18 36 10 0.0 1.0 0.0 omark / 94 114 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
