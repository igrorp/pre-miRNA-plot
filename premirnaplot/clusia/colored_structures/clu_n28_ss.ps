%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGAAGCUAAAUUCACUUCAAGAGCAAAUCAGAUCUUAUGAAAAUCAGGCAAGUCAAGAAACUGCAAUUGCUGAAUCUCGAAGGGUUGAACUGGAGGAGACUCUUCUCAA\
) } def
/len { sequence length } bind def

/coor [
[38.90721893 527.39160156]
[44.95355988 511.55245972]
[44.95355988 496.55245972]
[44.95355988 481.55245972]
[44.95355988 466.55245972]
[44.95355988 451.55245972]
[44.95355988 436.55245972]
[44.95355988 421.55245972]
[34.05247116 415.86032104]
[26.60674286 405.98159790]
[24.10817528 393.79183960]
[27.10179901 381.63925171]
[35.06847763 371.89221191]
[46.51371765 366.47781372]
[47.34733963 351.50100708]
[48.18096161 336.52420044]
[45.37110901 329.57315063]
[49.25164795 321.14440918]
[50.50127411 306.19653320]
[51.75090027 291.24868774]
[53.00052643 276.30084229]
[54.25015259 261.35296631]
[45.06307220 257.59197998]
[37.06326294 251.69001770]
[30.74066734 243.99990845]
[26.48461533 234.98422241]
[24.55986214 225.18750000]
[25.09011841 215.20333862]
[28.05013084 205.63842773]
[33.26679230 197.07566833]
[40.42924500 190.03868103]
[49.10740280 184.95979309]
[58.77777481 182.15341187]
[68.85504150 181.79664612]
[72.97178650 167.37261963]
[77.08852386 152.94860840]
[81.20526123 138.52458191]
[85.32200623 124.10055542]
[89.43874359 109.67653656]
[86.22607422 96.06880188]
[96.13722992 86.20672607]
[100.25397491 71.78269958]
[104.37071228 57.35868073]
[94.97544861 45.15068054]
[94.57483673 29.92922020]
[103.11299896 17.53713417]
[117.14298248 12.60787010]
[121.25971985 -1.81615269]
[125.37646484 -16.24017525]
[129.49319458 -30.66419983]
[128.84381104 -39.92058182]
[133.93005371 -45.42897415]
[138.44616699 -59.73298645]
[142.96228027 -74.03699493]
[134.60562134 -89.32811737]
[139.72520447 -105.63299561]
[154.72160339 -113.10294342]
[158.83834839 -127.52696991]
[150.94111633 -141.21672058]
[155.11767578 -156.45915222]
[168.89015198 -164.21121216]
[184.08757019 -159.87373352]
[191.69358826 -146.02006531]
[187.19567871 -130.86935425]
[173.26237488 -123.41022491]
[169.14562988 -108.98619843]
[176.95420837 -98.63403320]
[177.33624268 -85.47718811]
[169.92469788 -74.36408997]
[157.26629639 -69.52088928]
[152.75018311 -55.21687698]
[148.23406982 -40.91286469]
[143.91722107 -26.54745865]
[139.80049133 -12.12343502]
[135.68374634 2.30058813]
[131.56700134 16.72461128]
[140.88166809 28.31663704]
[141.59278870 43.34854889]
[133.21829224 56.06552124]
[118.79473877 61.47542191]
[114.67799377 75.89944458]
[110.56125641 90.32346344]
[113.77392578 103.93119812]
[103.86277008 113.79327393]
[99.74602509 128.21730042]
[95.62928772 142.64132690]
[91.51255035 157.06533813]
[87.39580536 171.48936462]
[83.27906799 185.91339111]
[98.84951782 199.74110413]
[105.56499481 219.37812805]
[101.74853516 239.70596313]
[88.45889282 255.46214294]
[69.19801331 262.60260010]
[67.94838715 277.55044556]
[66.69876099 292.49832153]
[65.44912720 307.44616699]
[64.19950104 322.39401245]
[63.15777969 337.35781860]
[62.32415771 352.33462524]
[61.49053574 367.31143188]
[75.82622528 378.21899414]
[80.80650330 395.36856079]
[74.65117645 411.96667480]
[59.95355988 421.55245972]
[59.95355988 436.55245972]
[59.95355988 451.55245972]
[59.95355988 466.55245972]
[59.95355988 481.55245972]
[59.95355988 496.55245972]
[59.95355988 511.55245972]
[65.99990082 527.39160156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[6 107]
[7 106]
[8 105]
[14 101]
[15 100]
[16 99]
[18 98]
[19 97]
[20 96]
[21 95]
[22 94]
[34 89]
[35 88]
[36 87]
[37 86]
[38 85]
[39 84]
[41 82]
[42 81]
[43 80]
[47 76]
[48 75]
[49 74]
[50 73]
[52 72]
[53 71]
[54 70]
[57 66]
[58 65]
] def

init

% Start Annotations
71 91 10 0.5019607843137255 0.0 0.0 omark / 33 54 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
