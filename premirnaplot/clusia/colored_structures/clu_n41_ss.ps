%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUGAGCUUCUUCUCUGUUGUCAUAGCAUUAUUCAAGGAUAUCCCUGAUACUGAAGGAGAUAAUAUUUAUGGCAUCCGCUCCUUUUCUGUGCGUUUGGGCCAAGAGCGGGUUUUUUGGAUCUGUAUUGCACUUCUGGAAAUGGCUUAUG\
) } def
/len { sequence length } bind def

/coor [
[72.71983337 654.83148193]
[59.60636520 644.08563232]
[66.30209351 628.50988770]
[66.92196655 613.52270508]
[67.54183960 598.53552246]
[68.16172028 583.54833984]
[68.78159332 568.56115723]
[69.40146637 553.57397461]
[70.02133942 538.58679199]
[70.64121246 523.59960938]
[60.39584351 512.84936523]
[60.81098938 497.64138794]
[72.15631104 486.96798706]
[72.77618408 471.98080444]
[73.39605713 456.99362183]
[74.01593781 442.00640869]
[66.03897858 432.86022949]
[66.47184753 420.32995605]
[75.62873840 411.18774414]
[65.60772705 400.22805786]
[66.33708191 385.03192139]
[77.90057373 374.59527588]
[78.83005524 359.62408447]
[79.60477448 344.64410400]
[80.22464752 329.65692139]
[69.97927856 318.90667725]
[70.39441681 303.69869995]
[81.73973846 293.02529907]
[82.35961151 278.03811646]
[82.97949219 263.05093384]
[75.00253296 253.90473938]
[75.43540192 241.37448120]
[84.59229279 232.23226929]
[85.52177429 217.26109314]
[86.45125580 202.28991699]
[87.38073730 187.31874084]
[88.31021881 172.34756470]
[89.23970032 157.37640381]
[90.16918182 142.40522766]
[91.09865570 127.43405151]
[92.02813721 112.46287537]
[85.57980347 98.91964722]
[73.37207031 90.20349884]
[61.16434097 81.48734283]
[48.95661163 72.77119446]
[36.65945816 64.18166351]
[24.27420044 55.71966553]
[11.88894081 47.25767136]
[-2.67791677 52.60428619]
[-17.59618568 48.33522797]
[-27.12948990 36.09203720]
[-27.61207581 20.58246613]
[-18.85838127 7.77026653]
[-4.23438120 2.58198810]
[10.63669872 7.01262999]
[20.03662682 19.35852051]
[20.35093498 34.87241364]
[32.73619461 43.33440781]
[45.12145233 51.79640198]
[52.46494675 52.98043823]
[57.67276382 60.56346130]
[69.88049316 69.27961731]
[82.08822632 77.99576569]
[94.29595184 86.71192169]
[87.76140594 73.21007538]
[76.79933167 62.97128677]
[72.23795319 48.68164444]
[75.24048615 33.98522568]
[85.04125214 22.62982750]
[99.14089966 17.51124763]
[113.94382477 19.93479729]
[125.67504883 29.28243637]
[131.34294128 43.17037964]
[129.50212097 58.05699539]
[120.62343597 70.14481354]
[116.69870758 84.62226105]
[127.08383942 73.79872131]
[137.46896362 62.97517776]
[147.85409546 52.15163422]
[158.23922729 41.32809448]
[168.62435913 30.50455093]
[179.00949097 19.68100929]
[189.39462280 8.85746765]
[187.51353455 1.41462600]
[188.35943604 -6.14660740]
[191.77671814 -12.86768246]
[197.28686523 -17.91357803]
[204.15495300 -20.67648125]
[211.48745728 -20.84875679]
[218.34841919 -18.45650864]
[229.79469299 -28.15099716]
[234.35852051 -36.13817978]
[241.57914734 -37.92459106]
[253.22331238 -47.38045120]
[254.60415649 -63.12430191]
[266.76666260 -73.21633148]
[282.49502563 -71.66911316]
[292.45791626 -59.40059280]
[290.74447632 -43.68945694]
[278.37130737 -33.85684967]
[262.67916870 -35.73627853]
[251.03500366 -26.28042030]
[239.48918152 -16.70473480]
[228.04290771 -7.01024675]
[222.97978210 14.85937119]
[200.21817017 19.24259949]
[189.83303833 30.06614113]
[179.44790649 40.88968277]
[169.06277466 51.71322250]
[158.67764282 62.53676605]
[148.29251099 73.36030579]
[137.90737915 84.18385315]
[127.52224731 95.00739288]
[106.99931335 113.39235687]
[106.06983185 128.36352539]
[105.14035034 143.33470154]
[104.21086884 158.30587769]
[103.28138733 173.27705383]
[102.35191345 188.24822998]
[101.42243195 203.21940613]
[100.49295044 218.19058228]
[99.56346893 233.16175842]
[108.15534973 249.41552734]
[97.96667480 263.67080688]
[97.34680176 278.65798950]
[96.72692871 293.64517212]
[107.15209961 305.21902466]
[106.30995941 320.40933228]
[95.21183014 330.27679443]
[94.59195709 345.26397705]
[97.37731934 354.03128052]
[93.80122375 360.55358887]
[92.87174225 375.52474976]
[103.05549622 387.31155396]
[101.89959717 402.48123169]
[90.59991455 412.11724854]
[99.19179535 428.37100220]
[89.00312042 442.62628174]
[88.38324738 457.61349487]
[87.76337433 472.60067749]
[87.14349365 487.58786011]
[97.56866455 499.16168213]
[96.72652435 514.35198975]
[85.62840271 524.21948242]
[85.00852966 539.20666504]
[84.38864899 554.19384766]
[83.76877594 569.18103027]
[83.14890289 584.16821289]
[82.52902985 599.15539551]
[81.90915680 614.14257812]
[81.28927612 629.12976074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[13 141]
[14 140]
[15 139]
[16 138]
[19 136]
[22 133]
[23 132]
[24 130]
[25 129]
[28 126]
[29 125]
[30 124]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[42 64]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[76 113]
[77 112]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[83 106]
[90 104]
[91 103]
[93 102]
[94 101]
] def

init

% Start Annotations
113 133 10 0.5019607843137255 0.0 0.0 omark / 23 42 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
