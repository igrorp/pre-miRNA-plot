%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAAGGUUUGGUUAAACUUGAGAAGAUGAUAGUGAAAGAAUGUGAAACGAUGGGAGCAAUAGUUGCAAGUGAAGGAGAUGAUGUAGUAUGUGAUGUUGAUUUCGGUUGUUUGAAGCACUUAGAACUUUGUCAUCUGUCAUGCCUCACAAGUUUCUCCUUUGGA\
) } def
/len { sequence length } bind def

/coor [
[60.35371780 521.91333008]
[66.40005493 506.07418823]
[66.40005493 491.07418823]
[66.40005493 476.07418823]
[66.40005493 461.07418823]
[66.40005493 446.07418823]
[66.40005493 431.07418823]
[66.40005493 416.07418823]
[64.13773346 413.31561279]
[63.12286377 409.30923462]
[63.93390656 404.66455078]
[66.84998322 400.22906494]
[67.70116425 385.25323486]
[65.21578979 381.12805176]
[65.32600403 375.39044189]
[68.87853241 369.73007202]
[70.29580688 354.79718018]
[71.71308899 339.86428833]
[73.13036346 324.93139648]
[74.54763794 309.99850464]
[75.96492004 295.06561279]
[77.38219452 280.13272095]
[70.88204956 266.73132324]
[79.88864136 253.72395325]
[81.30592346 238.79106140]
[74.80577087 225.38966370]
[83.81237030 212.38229370]
[85.08827972 197.43664551]
[86.22270966 182.47961426]
[87.35714722 167.52256775]
[88.49157715 152.56553650]
[89.62600708 137.60848999]
[90.76043701 122.65145111]
[91.89486694 107.69440460]
[92.88771820 92.72730255]
[93.73889923 77.75147247]
[94.59008026 62.77564240]
[95.15769958 47.78638458]
[95.44155884 32.78907013]
[95.72542572 17.79175758]
[79.99900818 6.96500015]
[73.97224426 -10.99436188]
[79.89022064 -28.83265305]
[95.21134186 -39.45815659]
[94.64372253 -54.44741058]
[94.07609558 -69.43666840]
[92.94166565 -84.39370728]
[91.24205017 -99.29711151]
[89.54243469 -114.20050812]
[87.84281921 -129.10391235]
[86.14320374 -144.00730896]
[84.44358826 -158.91070557]
[82.74398041 -173.81410217]
[73.49283600 -186.64871216]
[79.73821259 -200.17071533]
[78.03859711 -215.07411194]
[76.33898163 -229.97750854]
[74.63936615 -244.88090515]
[72.79880524 -259.76754761]
[70.81745911 -274.63610840]
[68.83611298 -289.50469971]
[66.85477448 -304.37326050]
[64.87342834 -319.24182129]
[60.62107849 -327.37707520]
[62.99803162 -334.41021729]
[61.29841614 -349.31359863]
[59.59880066 -364.21701050]
[57.89918518 -379.12039185]
[56.19957352 -394.02380371]
[41.29314423 -396.41146851]
[27.58415794 -402.73336792]
[16.08991051 -412.52032471]
[7.66335249 -425.04614258]
[2.92978907 -439.38125610]
[2.24048233 -454.46197510]
[5.64658356 -469.16915894]
[12.89533806 -482.41143799]
[23.44883919 -493.20614624]
[36.52394867 -500.75228882]
[51.15040207 -504.48986816]
[66.24282837 -504.14151001]
[80.68125916 -499.73306274]
[93.39427185 -491.59170532]
[103.43847656 -480.32153320]
[110.06852722 -466.75891113]
[112.79242706 -451.91024780]
[111.40805054 -436.87741089]
[106.01811981 -422.77593994]
[97.02260590 -410.65228271]
[85.08904266 -401.40606689]
[71.10297394 -395.72341919]
[72.80258942 -380.82000732]
[74.50220490 -365.91662598]
[76.20181274 -351.01321411]
[77.90142822 -336.10983276]
[79.74199677 -321.22317505]
[81.72333527 -306.35461426]
[83.70468140 -291.48602295]
[85.68602753 -276.61746216]
[87.66737366 -261.74890137]
[91.68569183 -255.50648499]
[89.54277039 -246.58052063]
[91.24238586 -231.67712402]
[92.94200134 -216.77372742]
[94.64160919 -201.87033081]
[103.77117920 -190.10171509]
[97.64737701 -175.51371765]
[99.34699249 -160.61032104]
[101.04660797 -145.70692444]
[102.74622345 -130.80352783]
[104.44583893 -115.90012360]
[106.14545441 -100.99671936]
[107.84506989 -86.09332275]
[110.00079346 -84.23645782]
[111.53393555 -81.39508057]
[112.05867767 -77.80826569]
[111.28518677 -73.85265350]
[109.06535339 -70.00428772]
[109.63298035 -55.01503372]
[110.20059967 -40.02577591]
[120.53952026 -35.64247131]
[128.51754761 -27.66649246]
[132.94371033 -17.23394585]
[133.13688660 -5.85146809]
[129.03031921 4.82133150]
[121.18698883 13.21385479]
[110.72274017 18.07561874]
[110.43887329 33.07293320]
[110.15501404 48.07024765]
[112.79471588 52.09842300]
[112.90169525 57.83607483]
[109.56591034 63.62681961]
[108.71472931 78.60265350]
[107.86354828 93.57848358]
[110.59604645 101.20256805]
[106.85190582 108.82884216]
[105.71747589 123.78588104]
[104.58304596 138.74291992]
[103.44861603 153.69996643]
[102.31418610 168.65699768]
[101.17975616 183.61404419]
[100.04532623 198.57107544]
[102.52448273 207.40956116]
[98.74526215 213.79956055]
[105.14404297 228.26905823]
[96.23881531 240.20832825]
[94.82154083 255.14122009]
[101.22031403 269.61071777]
[92.31508636 281.54998779]
[90.89781189 296.48287964]
[89.48053741 311.41577148]
[88.06325531 326.34866333]
[86.64598083 341.28158569]
[85.22870636 356.21447754]
[83.81142426 371.14736938]
[82.67699432 386.10440063]
[81.82582092 401.08023071]
[81.40005493 416.07418823]
[81.40005493 431.07418823]
[81.40005493 446.07418823]
[81.40005493 461.07418823]
[81.40005493 476.07418823]
[81.40005493 491.07418823]
[81.40005493 506.07418823]
[87.44639587 521.91333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 164]
[3 163]
[4 162]
[5 161]
[6 160]
[7 159]
[8 158]
[12 157]
[13 156]
[16 155]
[17 154]
[18 153]
[19 152]
[20 151]
[21 150]
[22 149]
[24 147]
[25 146]
[27 144]
[28 142]
[29 141]
[30 140]
[31 139]
[32 138]
[33 137]
[34 136]
[35 134]
[36 133]
[37 132]
[38 129]
[39 128]
[40 127]
[44 120]
[45 119]
[46 118]
[47 113]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[55 105]
[56 104]
[57 103]
[58 102]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
] def

init

% Start Annotations
14 34 10 0.0 1.0 0.0 omark / 139 159 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
