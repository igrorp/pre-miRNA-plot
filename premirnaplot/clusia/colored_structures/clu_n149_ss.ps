%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUGGCGGAAGGCUGGGGCGGAGGAGGAGGAGGAGGAGAAGGAGGAGGAAGGGGGUGGCGCCGUUUGGGAUAGGGAGGGUGGGAGGAGAGGUAGGGUUUAUCUCUCUUGCGACUCAUUGGAUUAGGUUUGAUUUUUUGUUUUGUUUUUGUUUUUCUUUCUUAAAGUUGUAUUAUUAGUGUUCCGACUGAGUA\
) } def
/len { sequence length } bind def

/coor [
[148.43171692 1002.85986328]
[154.47805786 987.02075195]
[154.47805786 972.02075195]
[154.47805786 957.02075195]
[154.47805786 942.02075195]
[154.47805786 927.02075195]
[154.47805786 912.02075195]
[154.35722351 897.02124023]
[154.11557007 882.02319336]
[153.87393188 867.02514648]
[153.63227844 852.02703857]
[153.39062500 837.02899170]
[145.44929504 824.42803955]
[152.96327209 810.50500488]
[152.72161865 795.50695801]
[152.47996521 780.50891113]
[152.23831177 765.51086426]
[137.28523254 753.04156494]
[136.28697205 733.29211426]
[150.33273315 718.94293213]
[149.36676025 703.97412109]
[148.40078735 689.00524902]
[147.43481445 674.03637695]
[132.98329163 662.81512451]
[131.28054810 644.27758789]
[143.87017822 630.13464355]
[142.42247009 615.20465088]
[140.97476196 600.27471924]
[139.52705383 585.34472656]
[138.07934570 570.41473389]
[136.63163757 555.48474121]
[135.18391418 540.55480957]
[133.73620605 525.62481689]
[132.28849792 510.69485474]
[130.84078979 495.76486206]
[129.39308167 480.83489990]
[127.94538116 465.90490723]
[119.01583862 453.98382568]
[125.38510895 439.50131226]
[123.93740082 424.57135010]
[122.48969269 409.64135742]
[121.04198456 394.71139526]
[119.59427643 379.78140259]
[110.66473389 367.86032104]
[117.03400421 353.37780762]
[115.58629608 338.44784546]
[114.13858795 323.51785278]
[112.69087982 308.58789062]
[103.76134491 296.66677856]
[110.13061523 282.18429565]
[108.68290710 267.25430298]
[107.23519897 252.32434082]
[105.78748322 237.39436340]
[104.33977509 222.46438599]
[102.89206696 207.53440857]
[89.98121643 200.15553284]
[83.81810760 186.42672729]
[86.95750427 171.52714539]
[98.40052795 161.21388245]
[96.95281219 146.28390503]
[95.50510406 131.35392761]
[68.12265015 118.84484100]
[60.33877182 85.04387665]
[47.85834122 76.72288513]
[31.90808868 78.44595337]
[20.71892548 66.94889832]
[22.87422371 51.05128098]
[36.72061920 42.94839096]
[51.63634491 48.85606766]
[56.17933273 64.24245453]
[68.65975952 72.56344604]
[75.30068207 69.07801819]
[68.32983398 55.79618073]
[57.59586716 45.31849289]
[64.24378204 31.87211037]
[79.08637238 34.03952026]
[81.61167145 48.82533264]
[88.58251953 62.10717392]
[95.22344208 58.62174988]
[95.46509552 43.62369537]
[95.70674133 28.62564278]
[95.94839478 13.62758923]
[88.43441772 -0.29543999]
[96.37575531 -12.89641190]
[88.86177826 -26.81944084]
[96.80310822 -39.42041397]
[97.04476166 -54.41846848]
[97.28640747 -69.41651917]
[97.52806091 -84.41457367]
[97.76971436 -99.41262817]
[98.01136017 -114.41068268]
[98.25301361 -129.40873718]
[98.49466705 -144.40678406]
[98.73631287 -159.40484619]
[98.97796631 -174.40289307]
[88.89592743 -186.88215637]
[92.50710297 -202.51350403]
[107.04129791 -209.30590820]
[121.34912872 -202.04879761]
[124.45484924 -186.30923462]
[113.97602081 -174.16123962]
[113.73436737 -159.16319275]
[113.49271393 -144.16513062]
[113.25106812 -129.16708374]
[113.00941467 -114.16902924]
[112.76776886 -99.17097473]
[112.52611542 -84.17292023]
[112.28446198 -69.17487335]
[112.04281616 -54.17681503]
[111.80116272 -39.17876434]
[119.33242035 -26.32849503]
[111.37380219 -12.65476131]
[118.90506744 0.19550687]
[110.94644928 13.86923981]
[110.70479584 28.86729431]
[110.46315002 43.86534500]
[110.22149658 58.86339951]
[118.99464417 63.19935226]
[126.34223175 69.31688690]
[131.92578125 76.79890442]
[135.52050781 85.17041779]
[137.02333069 93.92803955]
[136.45355225 102.56994629]
[133.94633484 110.62450409]
[129.73977661 117.67607880]
[124.15653229 123.38634491]
[117.58119965 127.51034546]
[110.43508148 129.90621948]
[111.88278961 144.83619690]
[113.33049774 159.76617432]
[126.54179382 167.68878174]
[132.48530579 181.70762634]
[129.07469177 196.36477661]
[117.82204437 206.08670044]
[119.26975250 221.01667786]
[120.71746063 235.94665527]
[122.16516876 250.87663269]
[123.61287689 265.80661011]
[125.06058502 280.73657227]
[134.09367371 293.72555542]
[127.62085724 307.14016724]
[129.06855774 322.07015991]
[130.51626587 337.00012207]
[131.96397400 351.93011475]
[140.99707031 364.91909790]
[134.52424622 378.33370972]
[135.97195435 393.26367188]
[137.41966248 408.19366455]
[138.86737061 423.12362671]
[140.31507874 438.05361938]
[149.34817505 451.04260254]
[142.87535095 464.45721436]
[144.32305908 479.38717651]
[145.77076721 494.31716919]
[147.21847534 509.24713135]
[148.66618347 524.17712402]
[150.11389160 539.10705566]
[151.56159973 554.03704834]
[153.00930786 568.96704102]
[154.45701599 583.89703369]
[155.90472412 598.82696533]
[157.35244751 613.75695801]
[158.80015564 628.68695068]
[169.28710938 634.32067871]
[175.68168640 644.21929932]
[176.48934937 655.85583496]
[171.62463379 666.32537842]
[162.40367126 673.07037354]
[163.36965942 688.03924561]
[164.33563232 703.00811768]
[165.30160522 717.97698975]
[174.83897400 722.81011963]
[181.45365906 731.10742188]
[184.00090027 741.32513428]
[182.08485413 751.59759521]
[176.11837769 760.07769775]
[167.23637390 765.26922607]
[167.47801208 780.26727295]
[167.71966553 795.26531982]
[167.96131897 810.26336670]
[175.91993713 823.93707275]
[168.38867188 836.78735352]
[168.63032532 851.78540039]
[168.87197876 866.78344727]
[169.11363220 881.78149414]
[169.35528564 896.77960205]
[172.62609863 905.32293701]
[169.47805786 912.02075195]
[169.47805786 927.02075195]
[169.47805786 942.02075195]
[169.47805786 957.02075195]
[169.47805786 972.02075195]
[169.47805786 987.02075195]
[175.52439880 1002.85986328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 193]
[3 192]
[4 191]
[5 190]
[6 189]
[7 188]
[8 186]
[9 185]
[10 184]
[11 183]
[12 182]
[14 180]
[15 179]
[16 178]
[17 177]
[20 171]
[21 170]
[22 169]
[23 168]
[26 163]
[27 162]
[28 161]
[29 160]
[30 159]
[31 158]
[32 157]
[33 156]
[34 155]
[35 154]
[36 153]
[37 152]
[39 150]
[40 149]
[41 148]
[42 147]
[43 146]
[45 144]
[46 143]
[47 142]
[48 141]
[50 139]
[51 138]
[52 137]
[53 136]
[54 135]
[55 134]
[59 130]
[60 129]
[61 128]
[63 71]
[64 70]
[79 117]
[80 116]
[81 115]
[82 114]
[84 112]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% Start Annotations
30 54 10 0.0 1.0 0.0 omark / 137 160 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
