%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUUUCGGUGUAGUUCUGGAGGACUGGCAGUGUUGGUUCGGGUUAGUUGUUGGUUGAAGGCAGCUUGGCAGUUGUGCUGGAGGUGGAGGAAAGGC\
) } def
/len { sequence length } bind def

/coor [
[76.39814758 393.99426270]
[82.44448853 378.15515137]
[82.44448853 363.15515137]
[82.44448853 348.15515137]
[82.44448853 333.15515137]
[82.44448853 318.15515137]
[82.44448853 303.15515137]
[82.44448853 288.15515137]
[72.65273285 281.88528442]
[67.12311554 271.51980591]
[67.37392426 259.65319824]
[73.45941925 249.32192993]
[83.92576599 243.22752380]
[84.88681793 228.25834656]
[77.98085785 215.06149292]
[86.58644104 201.78541565]
[87.54749298 186.81622314]
[88.50854492 171.84704590]
[89.46959686 156.87786865]
[90.43064880 141.90869141]
[91.39170837 126.93950653]
[92.11270905 111.95684052]
[85.68341827 99.54089355]
[92.89499664 87.56238556]
[93.37577057 72.57009125]
[93.85654449 57.57779694]
[94.33731842 42.58550262]
[94.81809235 27.59321022]
[87.52708435 13.55213642]
[95.66833496 1.07939589]
[96.14910889 -13.91289711]
[96.62988281 -28.90519142]
[93.73606873 -37.77187729]
[97.37400055 -44.36813354]
[98.33505249 -59.33731461]
[99.29611206 -74.30649567]
[100.25716400 -89.27567291]
[91.67985535 -105.47126770]
[101.75268555 -119.74296570]
[102.23345947 -134.73526001]
[102.71423340 -149.72755432]
[103.19500732 -164.71984863]
[103.67578125 -179.71214294]
[96.38477325 -193.75321960]
[104.52602386 -206.22595215]
[92.18908691 -215.63763428]
[87.77259827 -230.51292419]
[92.97479248 -245.13197327]
[105.79531860 -253.87347412]
[121.30442047 -253.37612915]
[133.53852844 -243.83117676]
[137.79339600 -228.90884399]
[132.43292236 -214.34709167]
[119.51831818 -205.74517822]
[126.84371185 -192.77645874]
[118.66807556 -179.23136902]
[118.18730164 -164.23907471]
[117.70652771 -149.24678040]
[117.22575378 -134.25448608]
[116.74497986 -119.26219177]
[124.84153748 -110.11768341]
[124.44798279 -97.50670624]
[115.22634125 -88.31462097]
[114.26528931 -73.34544373]
[113.30423737 -58.37625885]
[112.34318542 -43.40707779]
[111.62217712 -28.42441750]
[111.14140320 -13.43212414]
[110.66062927 1.56016958]
[117.98602295 14.52889538]
[109.81037903 28.07398415]
[109.32961273 43.06627655]
[108.84883881 58.05857086]
[108.36806488 73.05086517]
[107.88729095 88.04315948]
[114.31658173 100.45910645]
[107.10500336 112.43761444]
[109.99881744 121.30430603]
[106.36088562 127.90055847]
[105.39983368 142.86973572]
[104.43878174 157.83891296]
[103.47772980 172.80810547]
[102.51667023 187.77728271]
[101.55561829 202.74645996]
[108.39284515 217.01400757]
[99.85600281 229.21940613]
[98.89495087 244.18858337]
[111.92436218 257.73556519]
[111.12409210 276.19995117]
[97.44448853 288.15515137]
[97.44448853 303.15515137]
[97.44448853 318.15515137]
[97.44448853 333.15515137]
[97.44448853 348.15515137]
[97.44448853 363.15515137]
[97.44448853 378.15515137]
[103.49082184 393.99426270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[13 87]
[14 86]
[16 84]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 77]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[30 69]
[31 68]
[32 67]
[34 66]
[35 65]
[36 64]
[37 63]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[45 54]
] def

init

% Start Annotations
16 35 10 0.0 1.0 0.0 omark / 68 87 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
