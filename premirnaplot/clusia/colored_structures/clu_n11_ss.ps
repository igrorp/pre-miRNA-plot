%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGGAGACUCUUGUUGGGGUAAAUGCUCAGUUUUGCUUGAAUUAUCUGCUUCUGAUGAUCUCGUUCGCUUCCAGGCUGAGGUUGAAGAGAGGGAUUUAGAUGUCAAUGAGGCUAGCUAUUGGUACUGUAGAAGAGUUGGAUCG\
) } def
/len { sequence length } bind def

/coor [
[79.84630585 490.73083496]
[85.89264679 474.89169312]
[85.89264679 459.89169312]
[85.89264679 444.89169312]
[75.56871033 437.11160278]
[71.57273865 424.61254883]
[75.58605957 411.91436768]
[86.35010529 403.74624634]
[86.67285156 388.74969482]
[86.99559021 373.75317383]
[87.31832886 358.75665283]
[87.64107513 343.76013184]
[87.96381378 328.76358032]
[88.28655243 313.76705933]
[85.26401520 306.96282959]
[88.78103638 298.45230103]
[89.42636871 283.46618652]
[90.07170105 268.48007202]
[82.88912201 255.43170166]
[91.21297455 241.97718811]
[91.85830688 226.99107361]
[92.50363922 212.00495911]
[93.14897156 197.01884460]
[93.47171783 182.02232361]
[93.47171783 167.02232361]
[93.47171783 152.02232361]
[93.31033325 137.02319336]
[92.98759460 122.02665710]
[92.66485596 107.03012848]
[89.33650970 99.61956024]
[92.50000000 91.70825958]
[92.50000000 76.70825958]
[92.50000000 61.70825958]
[92.50000000 46.70825958]
[92.50000000 31.70825958]
[92.50000000 16.70825958]
[92.50000000 1.70825875]
[89.35237122 -6.94571638]
[92.66485596 -13.61361504]
[92.98759460 -28.61014175]
[93.31033325 -43.60667038]
[93.63307953 -58.60319901]
[90.74047852 -64.67861938]
[91.31813049 -70.42419434]
[94.30618286 -74.23419189]
[95.27380371 -89.20294952]
[96.24143219 -104.17170715]
[97.20906067 -119.14046478]
[98.17668915 -134.10922241]
[99.14431763 -149.07798767]
[99.46705627 -164.07450867]
[99.14431763 -179.07102966]
[98.82157135 -194.06756592]
[98.49883270 -209.06408691]
[98.17608643 -224.06062317]
[84.17181396 -233.48432922]
[78.57406616 -249.23310852]
[83.39253235 -265.06433105]
[96.54885101 -274.82647705]
[95.90351868 -289.81259155]
[95.25818634 -304.79870605]
[94.61285400 -319.78482056]
[93.96752167 -334.77093506]
[93.32218170 -349.75701904]
[92.67684937 -364.74313354]
[89.78859711 -369.26495361]
[89.04902649 -373.96902466]
[90.15689087 -377.98880005]
[92.50505829 -380.71035767]
[92.82779694 -395.70687866]
[93.15053558 -410.70339966]
[84.78842926 -424.81039429]
[93.05915833 -438.97116089]
[109.45450592 -438.61831665]
[117.10834503 -424.11483765]
[108.14706421 -410.38067627]
[107.82432556 -395.38412476]
[107.50157928 -380.38760376]
[107.66296387 -365.38848877]
[108.30829620 -350.40237427]
[108.95362854 -335.41625977]
[109.59896088 -320.43014526]
[110.24429321 -305.44403076]
[110.88963318 -290.45791626]
[111.53496552 -275.47180176]
[123.33119965 -269.13464355]
[130.49758911 -257.69476318]
[131.06147766 -244.09878540]
[124.76747131 -231.91197205]
[113.17261505 -224.38336182]
[113.49536133 -209.38682556]
[113.81809998 -194.39030457]
[114.14083862 -179.39378357]
[114.46358490 -164.39724731]
[116.47040558 -162.34230042]
[117.75329590 -159.34008789]
[117.93633270 -155.67391968]
[116.75745392 -151.76158142]
[114.11307526 -148.11035156]
[113.14544678 -133.14160156]
[112.17781830 -118.17283630]
[111.21018982 -103.20407867]
[110.24256134 -88.23532867]
[109.27494049 -73.26657104]
[108.62960815 -58.28045654]
[108.30686188 -43.28392792]
[107.98412323 -28.28740120]
[107.66137695 -13.29087353]
[107.50000000 1.70825875]
[107.50000000 16.70825958]
[107.50000000 31.70825958]
[107.50000000 46.70825958]
[107.50000000 61.70825958]
[107.50000000 76.70825958]
[107.50000000 91.70825958]
[107.66137695 106.70738983]
[107.98412323 121.70391846]
[108.30686188 136.70043945]
[111.63996124 145.28469849]
[108.47171783 152.02232361]
[108.47171783 167.02232361]
[108.47171783 182.02232361]
[111.49436951 188.03410339]
[111.04046631 193.79077148]
[108.13508606 197.66418457]
[107.48975372 212.65029907]
[106.84442139 227.63639832]
[106.19908905 242.62251282]
[113.33551025 256.74279785]
[105.05781555 269.12539673]
[104.41248322 284.11151123]
[103.76715088 299.09762573]
[103.28308105 314.08981323]
[102.96034241 329.08633423]
[102.63760376 344.08285522]
[102.31485748 359.07937622]
[101.99211884 374.07592773]
[101.66937256 389.07244873]
[101.34663391 404.06896973]
[113.66657257 416.43933105]
[113.27236938 433.55670166]
[100.89264679 444.89169312]
[100.89264679 459.89169312]
[100.89264679 474.89169312]
[106.93898773 490.73083496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 144]
[3 143]
[4 142]
[8 139]
[9 138]
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[16 132]
[17 131]
[18 130]
[20 128]
[21 127]
[22 126]
[23 125]
[24 122]
[25 121]
[26 120]
[27 118]
[28 117]
[29 116]
[31 115]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[37 109]
[39 108]
[40 107]
[41 106]
[42 105]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[69 78]
[70 77]
[71 76]
] def

init

% Start Annotations
121 140 10 0.5019607843137255 0.0 0.0 omark / 9 26 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
