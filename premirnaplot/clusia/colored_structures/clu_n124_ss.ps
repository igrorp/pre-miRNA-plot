%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCACCAUCUUGUACAAGCUGAAGCUCGGCGAGAUCGUCACCACCAUUCCCACCAUCGGAUUCAAUGUGGAGACGGUUGAGUAUAAGAAUAUCAGCUUCACUGUCUGGGAUGUUGGUGGUCA\
) } def
/len { sequence length } bind def

/coor [
[97.13551331 374.62802124]
[103.18185425 358.78887939]
[103.18185425 343.78887939]
[103.18185425 328.78887939]
[103.18185425 313.78887939]
[103.18185425 298.78887939]
[103.18185425 283.78887939]
[103.18185425 268.78887939]
[103.18185425 253.78889465]
[102.61650085 238.79954529]
[101.48660278 223.84216309]
[100.35669708 208.88478088]
[99.22679901 193.92739868]
[98.09689331 178.97001648]
[89.42287445 166.86172485]
[96.09867096 152.51792908]
[94.96876526 137.56054688]
[93.83885956 122.60316467]
[90.15657806 116.09770203]
[92.87333679 107.25653076]
[89.32139587 99.91207886]
[92.29376984 91.89047241]
[91.91682434 76.89521027]
[91.53987122 61.89994812]
[91.16291809 46.90468597]
[90.78596497 31.90942192]
[90.40901947 16.91415977]
[90.03206635 1.91889632]
[70.66526031 -12.35154343]
[67.57354736 -35.96469498]
[82.31121063 -54.36248779]
[78.58086395 -68.89123535]
[65.25988770 -76.96522522]
[61.68375015 -91.75258636]
[69.46315765 -104.40234375]
[65.73281097 -118.93109131]
[62.00246429 -133.45983887]
[58.27211380 -147.98858643]
[54.54176712 -162.51733398]
[50.81141663 -177.04608154]
[47.08106995 -191.57482910]
[36.15488815 -203.01725769]
[40.48396301 -217.26885986]
[36.75361633 -231.79760742]
[33.02326584 -246.32635498]
[29.29291725 -260.85510254]
[11.29942131 -267.01599121]
[0.62652534 -282.57901001]
[1.35033262 -301.28817749]
[13.00806236 -315.74972534]
[8.19390869 -329.95620728]
[3.37975430 -344.16268921]
[-11.25631618 -349.66900635]
[-18.88372040 -363.32025146]
[-15.90103245 -378.67074585]
[-3.71658564 -388.47244263]
[11.91649723 -388.09725952]
[23.61675072 -377.72241211]
[25.85967636 -362.24649048]
[17.58622932 -348.97683716]
[22.40038300 -334.77035522]
[27.21453667 -320.56387329]
[38.48545837 -319.28515625]
[48.48486710 -313.82107544]
[55.71401215 -304.94610596]
[59.07263565 -293.94921875]
[58.02628326 -282.44665527]
[52.69095230 -272.14447021]
[43.82166672 -264.58544922]
[47.55201340 -250.05670166]
[51.28236389 -235.52795410]
[55.01271057 -220.99920654]
[65.67207336 -210.59597778]
[61.60981750 -195.30517578]
[65.34016418 -180.77642822]
[69.07051086 -166.24768066]
[72.80086517 -151.71893311]
[76.53121185 -137.19018555]
[80.26155853 -122.66143799]
[83.99190521 -108.13269043]
[96.90312195 -100.79537964]
[100.89319611 -86.11430359]
[93.10961151 -72.62158203]
[96.83995819 -58.09283447]
[103.94055939 -57.30224991]
[110.66922760 -54.84629059]
[116.64017487 -50.85649872]
[121.50886536 -45.55261230]
[124.99187469 -39.23049927]
[126.88343048 -32.24562073]
[127.06749725 -24.99308777]
[125.52490234 -17.88529015]
[122.33487701 -11.32845020]
[117.67108917 -5.69940948]
[111.79215240 -1.32397246]
[105.02732849 1.54194486]
[105.40428162 16.53720856]
[105.78122711 31.53247070]
[106.15818024 46.52773285]
[106.53513336 61.52299500]
[106.91208649 76.51825714]
[107.28903961 91.51351929]
[107.85438538 106.50286102]
[108.79624939 121.47326660]
[109.92614746 136.43064880]
[111.05605316 151.38803101]
[119.81089020 164.56617737]
[113.05427551 177.84010315]
[114.18418121 192.79748535]
[115.31407928 207.75488281]
[116.44398499 222.71226501]
[117.57388306 237.66964722]
[120.65611267 242.15960693]
[121.53868103 246.90605164]
[120.50868225 250.99971008]
[118.18185425 253.78889465]
[118.18185425 268.78887939]
[118.18185425 283.78887939]
[118.18185425 298.78887939]
[118.18185425 313.78887939]
[118.18185425 328.78887939]
[118.18185425 343.78887939]
[118.18185425 358.78887939]
[124.22819519 374.62802124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 123]
[3 122]
[4 121]
[5 120]
[6 119]
[7 118]
[8 117]
[9 116]
[10 112]
[11 111]
[12 110]
[13 109]
[14 108]
[16 106]
[17 105]
[18 104]
[20 103]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[28 96]
[31 84]
[32 83]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[43 72]
[44 71]
[45 70]
[46 69]
[50 62]
[51 61]
[52 60]
] def

init

% Start Annotations
10 30 10 0.0 1.0 0.0 omark / 97 114 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
