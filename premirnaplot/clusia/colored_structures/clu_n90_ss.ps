%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCUGUCGUGAAAUCCUCUGGCUUAACUGGGGGCUUGCGGUGGGUACGGGCCGGCUUGAGUGCGGUAGGGGAGACUGGAACUCCUGGUGUAGCGGUGGAAUGCGCAGAUA\
) } def
/len { sequence length } bind def

/coor [
[70.63320923 403.37716675]
[76.67955017 387.53802490]
[76.67955017 372.53802490]
[76.67955017 357.53802490]
[76.67955017 342.53802490]
[76.67955017 327.53802490]
[73.48680115 320.75204468]
[76.89582062 312.11880493]
[77.31651306 297.12472534]
[77.73720551 282.13061523]
[78.15789795 267.13650513]
[70.38349915 260.23812866]
[67.70943451 249.96536255]
[71.27919006 239.73373413]
[80.11693573 233.08760071]
[81.37769318 218.14068604]
[82.63845062 203.19375610]
[75.99826050 189.86119080]
[84.86809540 176.76017761]
[86.12885284 161.81326294]
[87.38961029 146.86633301]
[84.77853394 139.83601379]
[88.90110779 131.51985168]
[90.58057404 116.61417389]
[81.62879944 105.22066498]
[83.25111389 90.82225037]
[94.51374054 81.70635986]
[96.19320679 66.80067444]
[97.87267303 51.89499664]
[99.55213928 36.98931122]
[101.23161316 22.08362770]
[102.91107941 7.17794514]
[104.59054565 -7.72773790]
[106.27001190 -22.63342094]
[104.10131073 -31.65843010]
[108.21132660 -37.93147278]
[110.30818176 -52.78419113]
[104.57598114 -67.53045654]
[114.01645660 -79.05116272]
[116.11331177 -93.90387726]
[118.21016693 -108.75659943]
[120.30702209 -123.60931396]
[107.69447327 -132.13485718]
[100.06536102 -145.23767090]
[98.88658905 -160.29193115]
[104.33855438 -174.30752563]
[115.28997803 -184.52397156]
[129.53216553 -188.95405579]
[122.37858582 -199.79924011]
[124.52397919 -212.20431519]
[134.26136780 -219.53190613]
[136.77395630 -234.31996155]
[139.28654480 -249.10803223]
[141.79914856 -263.89608765]
[140.13989258 -273.02850342]
[144.59516907 -279.06121826]
[135.60748291 -292.06112671]
[138.52670288 -307.59347534]
[151.62088013 -316.44320679]
[167.12150574 -313.35992432]
[175.83230591 -300.17291260]
[172.58532715 -284.70578003]
[159.30694580 -276.13488770]
[156.58720398 -261.38351440]
[154.07461548 -246.59542847]
[151.56202698 -231.80737305]
[149.04942322 -217.01930237]
[156.06925964 -201.00277710]
[144.38488770 -186.85719299]
[156.84405518 -178.65751648]
[164.53918457 -165.80860901]
[165.89805603 -150.83148193]
[160.59780884 -136.69190979]
[149.63954163 -126.21320343]
[135.15974426 -121.51245880]
[133.06288147 -106.65974426]
[130.96603394 -91.80702209]
[128.86917114 -76.95430756]
[134.75135803 -63.27040482]
[125.16089630 -50.68733597]
[123.06404114 -35.83461761]
[121.17569733 -20.95395470]
[119.49622345 -6.04827070]
[117.81675720 8.85741234]
[116.13729095 23.76309586]
[114.45782471 38.66877747]
[112.77835846 53.57446289]
[111.09889221 68.48014832]
[109.41942596 83.38582611]
[118.37120056 94.77933502]
[116.74888611 109.17774963]
[105.48625946 118.29364014]
[103.80679321 133.19932556]
[102.33653259 148.12709045]
[101.07577515 163.07402039]
[99.81501770 178.02093506]
[106.36502838 192.42260742]
[97.58537292 204.45451355]
[96.32461548 219.40144348]
[95.06385803 234.34835815]
[104.53687286 252.03353882]
[93.15200043 267.55722046]
[92.73130798 282.55130005]
[92.31060791 297.54541016]
[91.88991547 312.53952026]
[91.67955017 327.53802490]
[91.67955017 342.53802490]
[91.67955017 357.53802490]
[91.67955017 372.53802490]
[91.67955017 387.53802490]
[97.72589111 403.37716675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[8 105]
[9 104]
[10 103]
[11 102]
[15 100]
[16 99]
[17 98]
[19 96]
[20 95]
[21 94]
[23 93]
[24 92]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[36 81]
[37 80]
[39 78]
[40 77]
[41 76]
[42 75]
[48 69]
[51 67]
[52 66]
[53 65]
[54 64]
[56 63]
] def

init

% Start Annotations
79 98 10 0.5019607843137255 0.0 0.0 omark / 20 40 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
