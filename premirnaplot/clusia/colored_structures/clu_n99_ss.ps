%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCGGUGGUCUCUAAUUCGCUUGGUGCAGAUGGCGAGAAGCUAUUGGCCUAAAGGAGUGGAAGCUUUUGUUUCCCGCCUUGCAUCAACUGAAUCGGAGACCGCGGUGAA\
) } def
/len { sequence length } bind def

/coor [
[76.77971649 549.89520264]
[82.82605743 534.05603027]
[82.82605743 519.05603027]
[82.82605743 504.05606079]
[82.82605743 489.05606079]
[82.82605743 474.05606079]
[82.82605743 459.05606079]
[79.63424683 452.27191162]
[83.04035950 443.64053345]
[83.45732880 428.64633179]
[83.87430573 413.65213013]
[84.29127502 398.65792847]
[84.70824432 383.66372681]
[85.12522125 368.66952515]
[85.54219055 353.67532349]
[85.95915985 338.68112183]
[78.57864380 325.74368286]
[86.69657898 312.16390991]
[87.11354828 297.16970825]
[87.53051758 282.17550659]
[87.94749451 267.18130493]
[88.36446381 252.18710327]
[80.98394775 239.24966431]
[89.10187531 225.66990662]
[89.51884460 210.67570496]
[89.93582153 195.68150330]
[90.35279083 180.68730164]
[90.76976013 165.69309998]
[91.18673706 150.69889832]
[91.60370636 135.70469666]
[92.02067566 120.71048737]
[92.43765259 105.71628571]
[89.69995880 101.06304932]
[89.84735107 95.20085144]
[93.31761932 89.90681458]
[94.56724548 74.95895386]
[95.81687164 60.01109695]
[97.06649780 45.06324005]
[90.50576782 30.66645813]
[99.27645874 18.62801170]
[100.52608490 3.68015361]
[101.77571106 -11.26770306]
[103.02533722 -26.21556091]
[104.27496338 -41.16341782]
[93.14099884 -49.42335129]
[87.61992645 -62.02125168]
[89.06961060 -75.58992767]
[97.00025940 -86.56081390]
[109.23193359 -92.10249329]
[110.89659882 -107.00983429]
[112.56126404 -121.91717529]
[113.81089020 -136.86503601]
[114.64451599 -151.84185791]
[115.47813416 -166.81866455]
[104.75567627 -178.42919922]
[105.46711731 -194.21746826]
[117.19036102 -204.81657410]
[132.97023010 -203.93824768]
[143.44479370 -192.10360718]
[142.39968872 -176.33390808]
[130.45495605 -165.98504639]
[129.62133789 -151.00822449]
[128.78770447 -136.03141785]
[131.34558105 -131.84591675]
[131.20143127 -125.98559570]
[127.46861267 -120.25251007]
[125.80393982 -105.34516907]
[124.13927460 -90.43782043]
[136.58549500 -79.83393860]
[140.34600830 -63.75159073]
[133.76173401 -48.42455673]
[119.22282410 -39.91379166]
[117.97319794 -24.96593475]
[116.72357178 -10.01807690]
[115.47394562 4.92978048]
[114.22431946 19.87763786]
[120.87442780 33.20524979]
[112.01435852 46.31286621]
[110.76473236 61.26072311]
[109.51510620 76.20858002]
[108.26547241 91.15644073]
[107.43185425 106.13325500]
[107.01488495 121.12745667]
[106.59790802 136.12165833]
[106.18093872 151.11585999]
[105.76396942 166.11007690]
[105.34699249 181.10427856]
[104.93002319 196.09848022]
[104.51305389 211.09268188]
[104.09607697 226.08688354]
[111.44676971 240.09680176]
[103.35866547 252.60408020]
[102.94169617 267.59826660]
[102.52471924 282.59246826]
[102.10774994 297.58670044]
[101.69078064 312.58090210]
[109.04147339 326.59082031]
[100.95336914 339.09808350]
[100.53639221 354.09228516]
[100.11942291 369.08648682]
[99.70245361 384.08068848]
[99.28547668 399.07489014]
[98.86850739 414.06909180]
[98.45153809 429.06329346]
[98.03456116 444.05749512]
[97.82605743 459.05606079]
[97.82605743 474.05606079]
[97.82605743 489.05606079]
[97.82605743 504.05606079]
[97.82605743 519.05603027]
[97.82605743 534.05603027]
[103.87239838 549.89520264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[6 107]
[7 106]
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[15 99]
[16 98]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[35 81]
[36 80]
[37 79]
[38 78]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[49 68]
[50 67]
[51 66]
[52 63]
[53 62]
[54 61]
] def

init

% Start Annotations
12 32 10 0.0 1.0 0.0 omark / 84 104 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
