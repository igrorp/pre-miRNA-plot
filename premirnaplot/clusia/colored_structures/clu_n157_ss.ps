%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUGUGUUAGAUGAAUCAUGGUUUGCUGCUGACAGCUUUUUGUAUCGAAUGUGCAAGGAUUUCAUUUUGUUGGUGCUAGAUGCCUCAGUAGUAGAUGGAGACCUUUUGACAUGGAC\
) } def
/len { sequence length } bind def

/coor [
[79.17182922 564.21868896]
[85.21817017 548.37957764]
[85.21817017 533.37957764]
[85.21817017 518.37957764]
[85.21817017 503.37957764]
[85.21817017 488.37957764]
[85.21817017 473.37957764]
[85.21817017 458.37957764]
[85.21817017 443.37957764]
[85.21817017 428.37957764]
[85.21817017 413.37957764]
[85.21817017 398.37957764]
[73.68237305 391.51956177]
[67.01757812 379.74487305]
[67.07448578 366.10626221]
[73.94593048 354.19934082]
[85.91397095 347.21673584]
[86.31327820 332.22204590]
[78.91752625 319.29330444]
[87.01945496 305.70401001]
[79.62370300 292.77526855]
[87.72562408 279.18594360]
[88.12493134 264.19128418]
[88.52423859 249.19659424]
[88.92355347 234.20190430]
[89.32286072 219.20721436]
[89.72216797 204.21253967]
[90.12147522 189.21784973]
[90.52078247 174.22317505]
[90.92008972 159.22848511]
[91.31939697 144.23379517]
[91.71870422 129.23912048]
[92.11801147 114.24443054]
[84.59083557 105.25234222]
[85.05902100 93.53496552]
[93.27964783 85.17210388]
[94.07798004 70.19336700]
[87.08612061 56.00095749]
[95.48983002 43.70352173]
[96.28816223 28.72477913]
[97.08649445 13.74603939]
[90.09463501 -0.44637024]
[98.49834442 -12.74380779]
[99.29667664 -27.72254753]
[100.09500885 -42.70129013]
[100.89334106 -57.68003082]
[101.69167328 -72.65876770]
[102.49000549 -87.63751221]
[89.38411713 -80.34123230]
[75.40707397 -85.78569031]
[70.68977356 -100.02462006]
[78.65143585 -112.73728943]
[93.52124786 -114.70925140]
[104.52128601 -104.51098633]
[107.30061340 -119.25124359]
[110.07994843 -133.99151611]
[112.85927582 -148.73176575]
[115.63861084 -163.47203064]
[104.89480591 -174.66802979]
[102.81707764 -190.04536438]
[110.20436096 -203.69116211]
[124.21609497 -210.35832214]
[139.46447754 -207.48316956]
[150.08619690 -196.17129517]
[151.99699402 -180.77230835]
[144.46211243 -167.20745850]
[130.37887573 -160.69270325]
[127.59954071 -145.95243835]
[124.82020569 -131.21217346]
[122.04087830 -116.47191620]
[119.26155090 -101.73165131]
[117.46874237 -86.83917999]
[116.67041016 -71.86043549]
[115.87207794 -56.88169479]
[115.07374573 -41.90295792]
[114.27541351 -26.92421532]
[113.47708130 -11.94547558]
[120.52604675 1.17555428]
[112.06523132 14.54437160]
[111.26689911 29.52311134]
[110.46856689 44.50185394]
[117.51753235 57.62288284]
[109.05672455 70.99169922]
[108.25838470 85.97043610]
[116.26674652 100.64996338]
[107.11269379 114.64373779]
[106.71338654 129.63842773]
[106.31407928 144.63310242]
[105.91477203 159.62779236]
[105.51546478 174.62248230]
[105.11615753 189.61715698]
[104.71685028 204.61184692]
[104.31754303 219.60652161]
[103.91823578 234.60121155]
[103.51892853 249.59590149]
[103.11962128 264.59057617]
[102.72031403 279.58526611]
[110.08750153 293.58651733]
[102.01413727 306.10330200]
[109.38132477 320.10455322]
[101.30796051 332.62133789]
[100.90865326 347.61602783]
[114.42851257 357.67761230]
[119.28472137 373.64294434]
[113.76769257 389.21682739]
[100.21817017 398.37957764]
[100.21817017 413.37957764]
[100.21817017 428.37957764]
[100.21817017 443.37957764]
[100.21817017 458.37957764]
[100.21817017 473.37957764]
[100.21817017 488.37957764]
[100.21817017 503.37957764]
[100.21817017 518.37957764]
[100.21817017 533.37957764]
[100.21817017 548.37957764]
[106.26450348 564.21868896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[11 107]
[12 106]
[17 102]
[18 101]
[20 99]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[32 87]
[33 86]
[36 84]
[37 83]
[39 81]
[40 80]
[41 79]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
] def

init

% Start Annotations
24 42 10 0.0 1.0 0.0 omark / 81 98 10 0.5019607843137255 0.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
