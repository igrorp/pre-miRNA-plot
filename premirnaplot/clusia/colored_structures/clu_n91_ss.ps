%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCUGUGAAUACUUUUGCUGAGAUUGAUUUGGGUGAGGCUUUAAAUUUGAAUAUUCGGAGGUGCAAGUAUGUGAAACCUACUCCAGUUCAGCGUCAUGCAAUACCAAUAUCACUGGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[110.22959137 515.01818848]
[116.27592468 499.17904663]
[116.27592468 484.17904663]
[116.27592468 469.17904663]
[116.08744049 454.18023682]
[115.71048737 439.18496704]
[107.65579224 426.65615845]
[115.04384613 412.66592407]
[114.66690063 397.67065430]
[114.28994751 382.67538452]
[113.91299438 367.68011475]
[98.31874084 362.12377930]
[85.99595642 351.01470947]
[78.82672119 336.01220703]
[77.92026520 319.37292480]
[83.44142914 303.61157227]
[94.58155823 291.12078857]
[109.67678833 283.80789185]
[108.54689026 268.85052490]
[107.41698456 253.89314270]
[106.28708649 238.93576050]
[104.96931458 223.99375916]
[103.46389008 209.06948853]
[101.95846558 194.14521790]
[90.29602051 184.95158386]
[88.55670166 169.83770752]
[98.27890778 157.66738892]
[96.77348328 142.74313354]
[95.26805878 127.81886292]
[93.76263428 112.89459991]
[85.74837494 101.43757629]
[91.31310272 88.61083221]
[89.80767822 73.68656158]
[88.30225372 58.76229858]
[86.79682922 43.83803177]
[85.10398102 28.93386269]
[83.22398376 14.05214310]
[79.00174713 5.82293463]
[81.48859406 -1.22659957]
[79.98316193 -16.15086555]
[78.47773743 -31.07513046]
[69.39449310 -44.02909851]
[75.81539917 -57.46863937]
[74.30997467 -72.39290619]
[72.80455017 -87.31716919]
[71.29912567 -102.24143219]
[58.75088882 -117.92311096]
[67.17066956 -135.25660706]
[64.91728210 -150.08638000]
[62.66389847 -164.91615295]
[60.41051483 -179.74592590]
[58.15713120 -194.57569885]
[48.43449783 -207.05693054]
[54.17203140 -220.80210876]
[51.91864777 -235.63188171]
[38.07599640 -242.64335632]
[31.02826881 -256.46755981]
[33.48546219 -271.78884888]
[44.50273132 -282.71585083]
[59.84371567 -285.04693604]
[73.60948944 -277.88571167]
[80.50683594 -263.98583984]
[77.88358307 -248.69210815]
[66.74842072 -237.88526917]
[69.00180817 -223.05549622]
[78.56326294 -211.63499451]
[72.98690796 -196.82908630]
[75.24028778 -181.99931335]
[77.49367523 -167.16954041]
[79.74706268 -152.33976746]
[82.00044250 -137.50997925]
[90.84769440 -132.12954712]
[95.31114960 -122.54174805]
[93.66585541 -111.87101746]
[86.22338867 -103.74685669]
[87.72881317 -88.82259369]
[89.23423767 -73.89833069]
[90.73966217 -58.97406387]
[99.71523285 -47.08758163]
[93.40200806 -32.58055496]
[94.90743256 -17.65629005]
[96.41285706 -2.73202538]
[98.10570526 12.17214394]
[99.98570251 27.05386543]
[103.99019623 33.36610031]
[101.72109222 42.33260727]
[103.22651672 57.25687408]
[104.73194122 72.18113708]
[106.23736572 87.10540009]
[114.25162506 98.56242371]
[108.68689728 111.38916779]
[110.19232178 126.31343842]
[111.69774628 141.23770142]
[113.20317078 156.16197205]
[125.16005707 166.14547729]
[126.47417450 181.30226135]
[116.88272858 192.63980103]
[118.38815308 207.56405640]
[119.89357758 222.48832703]
[123.90767670 230.82104492]
[121.24446869 237.80584717]
[122.37436676 252.76324463]
[123.50427246 267.72061157]
[124.63417053 282.67800903]
[137.72877502 286.19320679]
[149.06665039 293.58627319]
[157.53585815 304.11514282]
[162.31109619 316.73110962]
[162.93409729 330.18325806]
[159.35751343 343.14239502]
[151.94830322 354.33255005]
[141.45001221 362.65643311]
[128.90826416 367.30316162]
[129.28520203 382.29843140]
[129.66215515 397.29370117]
[130.03910828 412.28897095]
[138.12077332 425.89035034]
[130.70574951 438.80801392]
[131.08270264 453.80328369]
[134.45771790 462.41470337]
[131.27592468 469.17904663]
[131.27592468 484.17904663]
[131.27592468 499.17904663]
[137.32226562 515.01818848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 123]
[3 122]
[4 121]
[5 119]
[6 118]
[8 116]
[9 115]
[10 114]
[11 113]
[18 104]
[19 103]
[20 102]
[21 101]
[22 99]
[23 98]
[24 97]
[27 94]
[28 93]
[29 92]
[30 91]
[32 89]
[33 88]
[34 87]
[35 86]
[36 84]
[37 83]
[39 82]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[46 75]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[54 65]
[55 64]
] def

init

% Start Annotations
85 105 10 0.5019607843137255 0.0 0.0 omark / 18 37 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
