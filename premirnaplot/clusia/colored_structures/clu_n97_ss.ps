%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGAAGUUGUAGGAAUGGGCGGAUUGGGAUGAAAUAAAAUCAUCCUCUUUUCUUCUUACUCCUGUGUUGAGCUUCUAAAUAUAUGAUCUUCCCAAUACCGCCCAUUCCGAUGAUUUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[89.23516846 559.72607422]
[95.28150940 543.88696289]
[95.28150940 528.88696289]
[95.28150940 513.88696289]
[95.28150940 498.88693237]
[95.28150940 483.88693237]
[95.28150940 468.88693237]
[95.28150940 453.88693237]
[95.28150940 438.88693237]
[95.28150940 423.88693237]
[95.28150940 408.88693237]
[95.28150940 393.88693237]
[87.54421234 381.15966797]
[95.28150940 367.35949707]
[95.28150940 352.35949707]
[95.28150940 337.35949707]
[95.28150940 322.35949707]
[95.28150940 307.35949707]
[95.28150940 292.35949707]
[95.28150940 277.35949707]
[95.28150940 262.35949707]
[95.28150940 247.35949707]
[95.28150940 232.35949707]
[95.28150940 217.35949707]
[95.09149933 202.36070251]
[94.71150970 187.36550903]
[94.33152008 172.37031555]
[93.95153046 157.37513733]
[93.57153320 142.37994385]
[93.19154358 127.38476562]
[92.81155396 112.38957977]
[85.68064880 100.36286163]
[92.19326019 87.99040985]
[91.81327057 72.99522400]
[80.93757629 83.32573700]
[65.98059082 84.46084595]
[53.67044067 75.88994598]
[49.54463959 61.46851349]
[55.45910263 47.68377304]
[68.75331116 40.73654556]
[83.44710541 43.75192642]
[92.93087006 55.37389755]
[95.20229340 40.54687119]
[97.47370911 25.71984673]
[99.74512482 10.89282227]
[85.83952332 5.08592987]
[73.73519897 -3.87496281]
[64.13317108 -15.46548176]
[57.58823776 -29.00911713]
[54.47694397 -43.71670914]
[54.97589874 -58.73242950]
[59.05175400 -73.18357849]
[66.46341705 -86.23130798]
[76.77626801 -97.11932373]
[89.38769531 -105.21770477]
[103.56226349 -110.05935669]
[118.47463226 -111.36694336]
[120.74604797 -126.19396973]
[123.01746368 -141.02099609]
[125.28887939 -155.84802246]
[127.37229919 -170.70262146]
[117.50141907 -183.04528809]
[119.33224487 -198.74317932]
[131.77857971 -208.48300171]
[147.45622253 -206.48631287]
[157.06393433 -193.93769836]
[154.90159607 -178.28204346]
[142.25210571 -168.80755615]
[144.55436707 -161.69381714]
[140.11590576 -153.57659912]
[137.84448242 -138.74957275]
[135.57307434 -123.92255402]
[133.30165100 -109.09552765]
[147.13868713 -103.38368988]
[159.21379089 -94.52073669]
[168.82249451 -83.01836395]
[175.40292358 -69.54238892]
[178.56866455 -54.87425995]
[178.13145447 -39.86569214]
[174.11238098 -25.38923645]
[166.74085999 -12.28755093]
[156.44161987 -1.32434773]
[143.81016541 6.86012697]
[129.57839966 11.78647804]
[114.57215118 13.16423893]
[112.30072784 27.99126434]
[110.02931213 42.81829071]
[107.75789642 57.64531326]
[106.80845642 72.61523438]
[107.18844604 87.61042023]
[114.31935120 99.63713837]
[107.80673981 112.00959015]
[108.18672943 127.00477600]
[108.56671906 141.99995422]
[108.94671631 156.99514771]
[109.32670593 171.99032593]
[109.70669556 186.98551941]
[110.08668518 201.98069763]
[113.46405792 210.59362793]
[110.28150940 217.35949707]
[110.28150940 232.35949707]
[110.28150940 247.35949707]
[110.28150940 262.35949707]
[110.28150940 277.35949707]
[110.28150940 292.35949707]
[110.28150940 307.35949707]
[110.28150940 322.35949707]
[110.28150940 337.35949707]
[110.28150940 352.35949707]
[110.28150940 367.35949707]
[118.01880646 381.15966797]
[110.28150940 393.88693237]
[110.28150940 408.88693237]
[110.28150940 423.88693237]
[110.28150940 438.88693237]
[110.28150940 453.88693237]
[110.28150940 468.88693237]
[110.28150940 483.88693237]
[110.28150940 498.88693237]
[110.28150940 513.88696289]
[110.28150940 528.88696289]
[110.28150940 543.88696289]
[116.32785034 559.72607422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[14 110]
[15 109]
[16 108]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[33 90]
[34 89]
[42 88]
[43 87]
[44 86]
[45 85]
[57 73]
[58 72]
[59 71]
[60 70]
[61 68]
] def

init

% Start Annotations
89 110 10 0.5019607843137255 0.0 0.0 omark / 16 37 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
