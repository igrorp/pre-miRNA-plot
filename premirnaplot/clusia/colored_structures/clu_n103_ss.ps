%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUAGGAGGGUGCGAAGUCGCUGGAGGCAGCGGUUCAUCGAUCUCUUCCUGGCGUAAUUUGUACGUUUAAUUUUGUGUGUUUAUAUAUUAAACGCCAAAGCAAAGCACAUGAAUCGAUCGAUAAACCUCUGCAUCCAGCGCCUUCUUCUCUCCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[79.81819153 605.06994629]
[85.86453247 589.23077393]
[85.86453247 574.23077393]
[78.12722778 561.50354004]
[85.86453247 547.70336914]
[85.86453247 532.70336914]
[85.86453247 517.70336914]
[85.86453247 502.70333862]
[85.86453247 487.70333862]
[85.86453247 472.70333862]
[85.86453247 457.70333862]
[75.54840088 449.93270874]
[71.54715729 437.44799805]
[75.54145813 424.75656128]
[86.28176880 416.57751465]
[86.57627869 401.58041382]
[86.87078094 386.58331299]
[87.16528320 371.58618164]
[79.67935944 358.70947266]
[87.68611908 345.06387329]
[87.98062134 330.06674194]
[88.27513123 315.06964111]
[88.56963348 300.07254028]
[88.86413574 285.07543945]
[89.15864563 270.07830811]
[89.45314789 255.08120728]
[81.96722412 242.20448303]
[89.97398376 228.55888367]
[90.26848602 213.56176758]
[90.56299591 198.56466675]
[90.85749817 183.56755066]
[83.37157440 170.69082642]
[91.37832642 157.04522705]
[91.67283630 142.04811096]
[91.96733856 127.05100250]
[92.26184845 112.05389404]
[85.67881775 99.71876526]
[92.74104309 87.65160370]
[93.03555298 72.65449524]
[93.33005524 57.65738297]
[93.62456512 42.66027451]
[93.91906738 27.66316605]
[94.21356964 12.66605759]
[94.50807953 -2.33105135]
[83.83420563 -13.67593002]
[84.34651947 -28.88093567]
[95.22790527 -38.98692322]
[95.52241516 -53.98403168]
[95.81691742 -68.98114014]
[88.35205841 -82.93056488]
[96.33774567 -95.50347137]
[96.63225555 -110.50057983]
[96.77951050 -125.49985504]
[96.77951050 -140.49986267]
[82.39305115 -148.59979248]
[74.08884430 -162.76078796]
[74.04425812 -179.08328247]
[82.17706299 -193.12722778]
[96.19344330 -201.11990356]
[95.89894104 -216.11701965]
[95.60443878 -231.11412048]
[95.30992889 -246.11123657]
[86.55236816 -255.62664795]
[86.64439392 -268.15682983]
[94.98908234 -276.95907593]
[94.98908234 -291.95907593]
[94.98908234 -306.95907593]
[94.98908234 -321.95907593]
[94.98908234 -336.95907593]
[94.98908234 -351.95907593]
[94.98908234 -366.95907593]
[94.98908234 -381.95907593]
[86.42003632 -391.64459229]
[86.75805664 -404.17056274]
[95.27396393 -412.80725098]
[95.56846619 -427.80435181]
[95.86296844 -442.80145264]
[96.15747833 -457.79858398]
[87.76882172 -471.88980103]
[96.01287079 -486.06610107]
[112.40885925 -485.74411011]
[120.08999634 -471.25509644]
[111.15458679 -457.50405884]
[110.86007690 -442.50695801]
[110.56557465 -427.50985718]
[110.27107239 -412.51275635]
[119.57024384 -397.65618896]
[109.98908234 -381.95907593]
[109.98908234 -366.95907593]
[109.98908234 -351.95907593]
[109.98908234 -336.95907593]
[109.98908234 -321.95907593]
[109.98908234 -306.95907593]
[109.98908234 -291.95907593]
[109.98908234 -276.95907593]
[119.57815552 -262.28796387]
[110.30703735 -246.40573120]
[110.60154724 -231.40863037]
[110.89604950 -216.41151428]
[111.19055176 -201.41441345]
[123.58138275 -195.60575867]
[132.29389954 -184.96701050]
[135.57751465 -171.54553223]
[132.73358154 -157.95635986]
[124.26306915 -146.87263489]
[111.77951050 -140.49986267]
[111.77951050 -125.49985504]
[114.94071960 -118.77612305]
[111.62936401 -110.20607758]
[111.33485413 -95.20896912]
[118.82078552 -82.33223724]
[110.81402588 -68.68663788]
[110.51952362 -53.68952560]
[110.22501373 -38.69241714]
[120.70125580 -28.16702080]
[120.61622620 -12.95362473]
[109.50518799 -2.03654599]
[109.21067810 12.96056271]
[108.91617584 27.95767212]
[108.62167358 42.95478058]
[108.32716370 57.95188904]
[108.03266144 72.94899750]
[107.73815155 87.94610596]
[114.32118225 100.28123474]
[107.25895691 112.34839630]
[106.96444702 127.34550476]
[106.66994476 142.34262085]
[106.37543488 157.33972168]
[113.84030151 171.28915405]
[105.85460663 183.86206055]
[105.56010437 198.85916138]
[105.26559448 213.85627747]
[104.97109222 228.85337830]
[112.43595123 242.80281067]
[104.45025635 255.37571716]
[104.15575409 270.37283325]
[103.86125183 285.36993408]
[103.56674194 300.36703491]
[103.27223969 315.36413574]
[102.97772980 330.36126709]
[102.68322754 345.35836792]
[110.14808655 359.30780029]
[102.16239166 371.88070679]
[101.86788940 386.87780762]
[101.57338715 401.87490845]
[101.27887726 416.87200928]
[113.62499237 429.23022461]
[113.24698639 446.35754395]
[100.86453247 457.70333862]
[100.86453247 472.70333862]
[100.86453247 487.70333862]
[100.86453247 502.70333862]
[100.86453247 517.70336914]
[100.86453247 532.70336914]
[100.86453247 547.70336914]
[108.60182953 561.50354004]
[100.86453247 574.23077393]
[100.86453247 589.23077393]
[106.91086578 605.06994629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 158]
[3 157]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 149]
[15 146]
[16 145]
[17 144]
[18 143]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[28 133]
[29 132]
[30 131]
[31 130]
[33 128]
[34 127]
[35 126]
[36 125]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[44 117]
[47 114]
[48 113]
[49 112]
[51 110]
[52 109]
[53 107]
[54 106]
[59 100]
[60 99]
[61 98]
[62 97]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% Start Annotations
119 139 10 0.5019607843137255 0.0 0.0 omark / 24 44 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
