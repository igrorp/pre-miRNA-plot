%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Oct  9 14:06:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGGGCCCACUGUUGUAGUUGUAGUUGUUGUUGAGGUUGUUGUGGGGUUGGUGCUGGUGGAGGUGUUCCUGCUCCUGCUCCCCGUGUGUUUAGAUCAAGACCGUUGAUGUGUUGCAUCUUCGAUCUGACGACUGUUUGACGAUUUUUUUUUUUUUUUCUCUCUCCCUCU\
) } def
/len { sequence length } bind def

/coor [
[198.41522217 708.01751709]
[204.46156311 692.17840576]
[204.46156311 677.17840576]
[204.46156311 662.17840576]
[204.46156311 647.17840576]
[204.46156311 632.17840576]
[204.46156311 617.17840576]
[183.72998047 610.41052246]
[166.93965149 596.45275879]
[156.47332764 577.26098633]
[153.82548523 555.53564453]
[159.38891602 534.34173584]
[172.39669800 516.67620850]
[191.02770996 505.04458618]
[187.49940491 490.46545410]
[183.97108459 475.88632202]
[180.44276428 461.30718994]
[176.91445923 446.72805786]
[163.56864929 443.73739624]
[152.76640320 435.24133301]
[146.65652466 422.85726929]
[146.48562622 408.98278809]
[152.34429932 396.33178711]
[163.13815308 387.40335083]
[159.87669373 372.76220703]
[156.61523438 358.12106323]
[153.35379028 343.47991943]
[150.09233093 328.83880615]
[146.83088684 314.19766235]
[143.56942749 299.55651855]
[140.30798340 284.91537476]
[136.77966309 270.33624268]
[132.98565674 255.82398987]
[129.19166565 241.31173706]
[125.39765930 226.79948425]
[121.60366058 212.28723145]
[117.80966187 197.77497864]
[114.01565552 183.26272583]
[103.31079102 172.90631104]
[107.30598450 157.59785461]
[103.51197815 143.08558655]
[99.71797943 128.57333374]
[82.66227722 125.93173218]
[68.88271332 113.22953796]
[64.14034271 93.56848145]
[71.61204529 73.18403625]
[61.39989090 62.19713593]
[51.18774033 51.21023560]
[40.97558975 40.22333527]
[32.64060593 41.48408127]
[24.58278847 39.35025024]
[18.11218262 34.24623871]
[14.24983597 27.07283211]
[13.56698608 19.04894257]
[16.10166931 11.50468826]
[6.71875334 -0.19834079]
[-7.95029354 -6.12536669]
[-9.87489796 -20.89510536]
[-19.25781441 -32.59813309]
[-33.92686081 -38.52515793]
[-35.85146332 -53.29489899]
[-50.52051163 -59.22192383]
[-52.44511795 -73.99166107]
[-61.82803345 -85.69469452]
[-71.21094513 -97.39772034]
[-86.68010712 -102.84171295]
[-89.43369293 -119.00802612]
[-76.63904572 -129.26614380]
[-61.45820618 -123.06340027]
[-59.50791931 -106.78063202]
[-50.12500381 -95.07760620]
[-40.74208832 -83.37458038]
[-26.74416924 -78.28462982]
[-24.14843559 -62.67781448]
[-10.15051746 -57.58786774]
[-7.55478430 -41.98104858]
[1.82813132 -30.27802086]
[15.82604980 -25.18807411]
[18.42178345 -9.58125591]
[27.80469894 2.12177300]
[48.65887833 7.86605453]
[51.96249008 30.01118469]
[62.17464066 40.99808502]
[72.38679504 51.98498535]
[82.59894562 62.97188568]
[90.08362579 62.49275208]
[80.00106812 51.38680649]
[82.39752197 36.57947922]
[95.46845245 29.22075081]
[109.37138367 34.85177994]
[113.63734436 49.23237610]
[105.05298615 61.53448868]
[112.53765869 61.05535889]
[121.26554871 48.85601044]
[123.00263214 33.13045502]
[136.70077515 27.28151321]
[145.42866516 15.08216763]
[154.15653992 2.88282180]
[162.88442993 -9.31652451]
[171.61230469 -21.51587105]
[170.41596985 -37.51425552]
[182.27563477 -48.31833649]
[198.09355164 -45.64014816]
[205.73559570 -31.53416824]
[199.33943176 -16.82129478]
[183.81166077 -12.78798676]
[175.08377075 -0.58864063]
[166.35589600 11.61070538]
[157.62800598 23.81005096]
[148.90011597 36.00939941]
[147.78730774 50.86237335]
[133.46488953 57.58389664]
[124.73700714 69.78324127]
[134.53945923 91.54681396]
[129.47592163 112.62728882]
[114.23023987 124.77933502]
[118.02423859 139.29159546]
[121.81823730 153.80384827]
[132.79447937 165.19827271]
[128.52790833 179.46871948]
[132.32191467 193.98097229]
[136.11592102 208.49322510]
[139.90991211 223.00547791]
[143.70391846 237.51774597]
[147.49792480 252.02999878]
[151.29191589 266.54223633]
[155.69856262 271.55078125]
[156.73065186 277.18661499]
[154.94911194 281.65393066]
[158.21057129 296.29507446]
[161.47201538 310.93621826]
[164.73347473 325.57733154]
[167.99493408 340.21847534]
[171.25637817 354.85961914]
[174.51783752 369.50076294]
[177.77928162 384.14190674]
[193.58883667 388.92434692]
[204.77325439 400.95074463]
[208.35647583 416.88232422]
[203.45506287 432.36056519]
[191.49359131 443.19973755]
[195.02189636 457.77886963]
[198.55021667 472.35800171]
[202.07853699 486.93713379]
[205.60684204 501.51626587]
[214.71873474 501.25921631]
[223.75613403 502.42086792]
[232.49958801 504.97186279]
[240.73695374 508.84906006]
[248.26858521 513.95715332]
[254.91210938 520.17114258]
[260.50689697 527.33911133]
[264.91793823 535.28619385]
[268.03903198 543.81866455]
[269.79547119 552.72888184]
[270.14569092 561.79998779]
[269.08236694 570.81158447]
[266.63250732 579.54479980]
[262.85675049 587.78784180]
[257.84793091 595.34075928]
[251.72872925 602.02069092]
[244.64868164 607.66619873]
[236.78057861 612.14093018]
[228.31616211 615.33715820]
[219.46156311 617.17840576]
[219.46156311 632.17840576]
[219.46156311 647.17840576]
[219.46156311 662.17840576]
[219.46156311 677.17840576]
[219.46156311 692.17840576]
[225.50790405 708.01751709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 170]
[3 169]
[4 168]
[5 167]
[6 166]
[7 165]
[14 145]
[15 144]
[16 143]
[17 142]
[18 141]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[29 131]
[30 130]
[31 129]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[40 118]
[41 117]
[42 116]
[46 85]
[47 84]
[48 83]
[49 82]
[55 80]
[56 79]
[58 77]
[59 76]
[61 74]
[63 72]
[64 71]
[65 70]
[93 113]
[94 112]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% Start Annotations
115 134 10 0.5019607843137255 0.0 0.0 omark / 29 46 10 0.0 1.0 0.0 omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
